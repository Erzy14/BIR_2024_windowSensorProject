
HelloWorldWithAccount.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6dc  08000238  08000238  00001238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003bc  0800b914  0800b914  0000c914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bcd0  0800bcd0  0000ccd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bcd8  0800bcd8  0000ccd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800bcdc  0800bcdc  0000ccdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000009c  20000000  0800bce0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000680  2000009c  0800bd7c  0000d09c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000071c  0800bd7c  0000d71c  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000d09c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001b240  00000000  00000000  0000d0d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000041e1  00000000  00000000  00028312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001678  00000000  00000000  0002c4f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000010e2  00000000  00000000  0002db70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00033ead  00000000  00000000  0002ec52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001f7b1  00000000  00000000  00062aff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0012c0a6  00000000  00000000  000822b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001ae356  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000066e0  00000000  00000000  001ae39c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000075  00000000  00000000  001b4a7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	2000009c 	.word	0x2000009c
 8000254:	00000000 	.word	0x00000000
 8000258:	0800b8fc 	.word	0x0800b8fc

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200000a0 	.word	0x200000a0
 8000274:	0800b8fc 	.word	0x0800b8fc

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	@ 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	3c01      	subs	r4, #1
 80003c4:	bf28      	it	cs
 80003c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ca:	d2e9      	bcs.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_d2iz>:
 8000b34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b38:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b3c:	d215      	bcs.n	8000b6a <__aeabi_d2iz+0x36>
 8000b3e:	d511      	bpl.n	8000b64 <__aeabi_d2iz+0x30>
 8000b40:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b48:	d912      	bls.n	8000b70 <__aeabi_d2iz+0x3c>
 8000b4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b56:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b5e:	bf18      	it	ne
 8000b60:	4240      	negne	r0, r0
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b6e:	d105      	bne.n	8000b7c <__aeabi_d2iz+0x48>
 8000b70:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b74:	bf08      	it	eq
 8000b76:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b7a:	4770      	bx	lr
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop

08000b84 <__aeabi_d2uiz>:
 8000b84:	004a      	lsls	r2, r1, #1
 8000b86:	d211      	bcs.n	8000bac <__aeabi_d2uiz+0x28>
 8000b88:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b8c:	d211      	bcs.n	8000bb2 <__aeabi_d2uiz+0x2e>
 8000b8e:	d50d      	bpl.n	8000bac <__aeabi_d2uiz+0x28>
 8000b90:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b98:	d40e      	bmi.n	8000bb8 <__aeabi_d2uiz+0x34>
 8000b9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b9e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ba6:	fa23 f002 	lsr.w	r0, r3, r2
 8000baa:	4770      	bx	lr
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb6:	d102      	bne.n	8000bbe <__aeabi_d2uiz+0x3a>
 8000bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bbc:	4770      	bx	lr
 8000bbe:	f04f 0000 	mov.w	r0, #0
 8000bc2:	4770      	bx	lr

08000bc4 <startSystem>:
#include "config.h"

#include "stm32u5xx_hal.h"


void startSystem() {
 8000bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0


	int window1Status = checkWindow1Status();
 8000bca:	f000 f967 	bl	8000e9c <checkWindow1Status>
 8000bce:	60f8      	str	r0, [r7, #12]
	int window2Status = checkWindow2Status();
 8000bd0:	f000 f976 	bl	8000ec0 <checkWindow2Status>
 8000bd4:	60b8      	str	r0, [r7, #8]
	int window3Status = checkWindow3Status();
 8000bd6:	f000 f983 	bl	8000ee0 <checkWindow3Status>
 8000bda:	6078      	str	r0, [r7, #4]

	initialiseSystem();
 8000bdc:	f000 f904 	bl	8000de8 <initialiseSystem>
	Radio.Rx(0);
 8000be0:	4b3c      	ldr	r3, [pc, #240]	@ (8000cd4 <startSystem+0x110>)
 8000be2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000be4:	2000      	movs	r0, #0
 8000be6:	4798      	blx	r3

	while (1) {

		if (checkWindow1Status() != window1Status && isSensor1Registered)
 8000be8:	f000 f958 	bl	8000e9c <checkWindow1Status>
 8000bec:	4602      	mov	r2, r0
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d01c      	beq.n	8000c2e <startSystem+0x6a>
 8000bf4:	4b38      	ldr	r3, [pc, #224]	@ (8000cd8 <startSystem+0x114>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d018      	beq.n	8000c2e <startSystem+0x6a>
		{
			window1Status = checkWindow1Status();
 8000bfc:	f000 f94e 	bl	8000e9c <checkWindow1Status>
 8000c00:	60f8      	str	r0, [r7, #12]
			send_window_status_update(MESSAGE_TYPE_SEND_UPDATE, stationId, sensor1Id, checkWindow1Status());
 8000c02:	4b36      	ldr	r3, [pc, #216]	@ (8000cdc <startSystem+0x118>)
 8000c04:	681c      	ldr	r4, [r3, #0]
 8000c06:	4b36      	ldr	r3, [pc, #216]	@ (8000ce0 <startSystem+0x11c>)
 8000c08:	681d      	ldr	r5, [r3, #0]
 8000c0a:	4b36      	ldr	r3, [pc, #216]	@ (8000ce4 <startSystem+0x120>)
 8000c0c:	681e      	ldr	r6, [r3, #0]
 8000c0e:	f000 f945 	bl	8000e9c <checkWindow1Status>
 8000c12:	4603      	mov	r3, r0
 8000c14:	4632      	mov	r2, r6
 8000c16:	4629      	mov	r1, r5
 8000c18:	4620      	mov	r0, r4
 8000c1a:	f000 f9df 	bl	8000fdc <send_window_status_update>
			HAL_Delay(300);
 8000c1e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000c22:	f001 f815 	bl	8001c50 <HAL_Delay>
			Radio.Rx(0);
 8000c26:	4b2b      	ldr	r3, [pc, #172]	@ (8000cd4 <startSystem+0x110>)
 8000c28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	4798      	blx	r3
	    }
		if (checkWindow2Status() != window2Status  && isSensor2Registered)
 8000c2e:	f000 f947 	bl	8000ec0 <checkWindow2Status>
 8000c32:	4602      	mov	r2, r0
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d01c      	beq.n	8000c74 <startSystem+0xb0>
 8000c3a:	4b2b      	ldr	r3, [pc, #172]	@ (8000ce8 <startSystem+0x124>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d018      	beq.n	8000c74 <startSystem+0xb0>
		{
			window2Status = checkWindow2Status();
 8000c42:	f000 f93d 	bl	8000ec0 <checkWindow2Status>
 8000c46:	60b8      	str	r0, [r7, #8]
			send_window_status_update(MESSAGE_TYPE_SEND_UPDATE, stationId, sensor2Id, checkWindow2Status());
 8000c48:	4b24      	ldr	r3, [pc, #144]	@ (8000cdc <startSystem+0x118>)
 8000c4a:	681c      	ldr	r4, [r3, #0]
 8000c4c:	4b24      	ldr	r3, [pc, #144]	@ (8000ce0 <startSystem+0x11c>)
 8000c4e:	681d      	ldr	r5, [r3, #0]
 8000c50:	4b26      	ldr	r3, [pc, #152]	@ (8000cec <startSystem+0x128>)
 8000c52:	681e      	ldr	r6, [r3, #0]
 8000c54:	f000 f934 	bl	8000ec0 <checkWindow2Status>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	4632      	mov	r2, r6
 8000c5c:	4629      	mov	r1, r5
 8000c5e:	4620      	mov	r0, r4
 8000c60:	f000 f9bc 	bl	8000fdc <send_window_status_update>
			HAL_Delay(300);
 8000c64:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000c68:	f000 fff2 	bl	8001c50 <HAL_Delay>
			Radio.Rx(0);
 8000c6c:	4b19      	ldr	r3, [pc, #100]	@ (8000cd4 <startSystem+0x110>)
 8000c6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c70:	2000      	movs	r0, #0
 8000c72:	4798      	blx	r3
	    }
		if (checkWindow3Status() != window3Status  && isSensor3Registered)
 8000c74:	f000 f934 	bl	8000ee0 <checkWindow3Status>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d01c      	beq.n	8000cba <startSystem+0xf6>
 8000c80:	4b1b      	ldr	r3, [pc, #108]	@ (8000cf0 <startSystem+0x12c>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d018      	beq.n	8000cba <startSystem+0xf6>
		{
			window3Status = checkWindow3Status();
 8000c88:	f000 f92a 	bl	8000ee0 <checkWindow3Status>
 8000c8c:	6078      	str	r0, [r7, #4]
			send_window_status_update(MESSAGE_TYPE_SEND_UPDATE, stationId, sensor3Id, checkWindow3Status());
 8000c8e:	4b13      	ldr	r3, [pc, #76]	@ (8000cdc <startSystem+0x118>)
 8000c90:	681c      	ldr	r4, [r3, #0]
 8000c92:	4b13      	ldr	r3, [pc, #76]	@ (8000ce0 <startSystem+0x11c>)
 8000c94:	681d      	ldr	r5, [r3, #0]
 8000c96:	4b17      	ldr	r3, [pc, #92]	@ (8000cf4 <startSystem+0x130>)
 8000c98:	681e      	ldr	r6, [r3, #0]
 8000c9a:	f000 f921 	bl	8000ee0 <checkWindow3Status>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	4632      	mov	r2, r6
 8000ca2:	4629      	mov	r1, r5
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f000 f999 	bl	8000fdc <send_window_status_update>
			HAL_Delay(300);
 8000caa:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000cae:	f000 ffcf 	bl	8001c50 <HAL_Delay>
			Radio.Rx(0);
 8000cb2:	4b08      	ldr	r3, [pc, #32]	@ (8000cd4 <startSystem+0x110>)
 8000cb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	4798      	blx	r3
	    }

		checkForUpdateRequests();
 8000cba:	f000 f81f 	bl	8000cfc <checkForUpdateRequests>

		if (State == RX_TIMEOUT)
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf8 <startSystem+0x134>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	2b03      	cmp	r3, #3
 8000cc4:	d102      	bne.n	8000ccc <startSystem+0x108>
		{

			State = RX;
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf8 <startSystem+0x134>)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	701a      	strb	r2, [r3, #0]
		}
		HAL_Delay(100);
 8000ccc:	2064      	movs	r0, #100	@ 0x64
 8000cce:	f000 ffbf 	bl	8001c50 <HAL_Delay>
		if (checkWindow1Status() != window1Status && isSensor1Registered)
 8000cd2:	e789      	b.n	8000be8 <startSystem+0x24>
 8000cd4:	0800ba64 	.word	0x0800ba64
 8000cd8:	20000016 	.word	0x20000016
 8000cdc:	20000010 	.word	0x20000010
 8000ce0:	2000000c 	.word	0x2000000c
 8000ce4:	20000000 	.word	0x20000000
 8000ce8:	20000017 	.word	0x20000017
 8000cec:	20000004 	.word	0x20000004
 8000cf0:	20000018 	.word	0x20000018
 8000cf4:	20000008 	.word	0x20000008
 8000cf8:	200000b8 	.word	0x200000b8

08000cfc <checkForUpdateRequests>:
	}
}

void checkForUpdateRequests() {
 8000cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cfe:	af00      	add	r7, sp, #0

	if (shouldUpdateSensor1 && isSensor1Registered)
 8000d00:	4b2d      	ldr	r3, [pc, #180]	@ (8000db8 <checkForUpdateRequests+0xbc>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d019      	beq.n	8000d3c <checkForUpdateRequests+0x40>
 8000d08:	4b2c      	ldr	r3, [pc, #176]	@ (8000dbc <checkForUpdateRequests+0xc0>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d015      	beq.n	8000d3c <checkForUpdateRequests+0x40>
	{
		send_window_status_update(MESSAGE_TYPE_SEND_UPDATE, stationId, sensor1Id, checkWindow1Status());
 8000d10:	4b2b      	ldr	r3, [pc, #172]	@ (8000dc0 <checkForUpdateRequests+0xc4>)
 8000d12:	681c      	ldr	r4, [r3, #0]
 8000d14:	4b2b      	ldr	r3, [pc, #172]	@ (8000dc4 <checkForUpdateRequests+0xc8>)
 8000d16:	681d      	ldr	r5, [r3, #0]
 8000d18:	4b2b      	ldr	r3, [pc, #172]	@ (8000dc8 <checkForUpdateRequests+0xcc>)
 8000d1a:	681e      	ldr	r6, [r3, #0]
 8000d1c:	f000 f8be 	bl	8000e9c <checkWindow1Status>
 8000d20:	4603      	mov	r3, r0
 8000d22:	4632      	mov	r2, r6
 8000d24:	4629      	mov	r1, r5
 8000d26:	4620      	mov	r0, r4
 8000d28:	f000 f958 	bl	8000fdc <send_window_status_update>
		HAL_Delay(300);
 8000d2c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000d30:	f000 ff8e 	bl	8001c50 <HAL_Delay>
		Radio.Rx(0);
 8000d34:	4b25      	ldr	r3, [pc, #148]	@ (8000dcc <checkForUpdateRequests+0xd0>)
 8000d36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d38:	2000      	movs	r0, #0
 8000d3a:	4798      	blx	r3
    }
	if (shouldUpdateSensor2 && isSensor2Registered)
 8000d3c:	4b24      	ldr	r3, [pc, #144]	@ (8000dd0 <checkForUpdateRequests+0xd4>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d019      	beq.n	8000d78 <checkForUpdateRequests+0x7c>
 8000d44:	4b23      	ldr	r3, [pc, #140]	@ (8000dd4 <checkForUpdateRequests+0xd8>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d015      	beq.n	8000d78 <checkForUpdateRequests+0x7c>
	{
		send_window_status_update(MESSAGE_TYPE_SEND_UPDATE, stationId, sensor2Id, checkWindow2Status());
 8000d4c:	4b1c      	ldr	r3, [pc, #112]	@ (8000dc0 <checkForUpdateRequests+0xc4>)
 8000d4e:	681c      	ldr	r4, [r3, #0]
 8000d50:	4b1c      	ldr	r3, [pc, #112]	@ (8000dc4 <checkForUpdateRequests+0xc8>)
 8000d52:	681d      	ldr	r5, [r3, #0]
 8000d54:	4b20      	ldr	r3, [pc, #128]	@ (8000dd8 <checkForUpdateRequests+0xdc>)
 8000d56:	681e      	ldr	r6, [r3, #0]
 8000d58:	f000 f8b2 	bl	8000ec0 <checkWindow2Status>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	4632      	mov	r2, r6
 8000d60:	4629      	mov	r1, r5
 8000d62:	4620      	mov	r0, r4
 8000d64:	f000 f93a 	bl	8000fdc <send_window_status_update>
		HAL_Delay(300);
 8000d68:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000d6c:	f000 ff70 	bl	8001c50 <HAL_Delay>
		Radio.Rx(0);
 8000d70:	4b16      	ldr	r3, [pc, #88]	@ (8000dcc <checkForUpdateRequests+0xd0>)
 8000d72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d74:	2000      	movs	r0, #0
 8000d76:	4798      	blx	r3
    }
	if (shouldUpdateSensor3  && isSensor3Registered)
 8000d78:	4b18      	ldr	r3, [pc, #96]	@ (8000ddc <checkForUpdateRequests+0xe0>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d019      	beq.n	8000db4 <checkForUpdateRequests+0xb8>
 8000d80:	4b17      	ldr	r3, [pc, #92]	@ (8000de0 <checkForUpdateRequests+0xe4>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d015      	beq.n	8000db4 <checkForUpdateRequests+0xb8>
	{
		send_window_status_update(MESSAGE_TYPE_SEND_UPDATE, stationId, sensor3Id, checkWindow3Status());
 8000d88:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc0 <checkForUpdateRequests+0xc4>)
 8000d8a:	681c      	ldr	r4, [r3, #0]
 8000d8c:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc4 <checkForUpdateRequests+0xc8>)
 8000d8e:	681d      	ldr	r5, [r3, #0]
 8000d90:	4b14      	ldr	r3, [pc, #80]	@ (8000de4 <checkForUpdateRequests+0xe8>)
 8000d92:	681e      	ldr	r6, [r3, #0]
 8000d94:	f000 f8a4 	bl	8000ee0 <checkWindow3Status>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	4632      	mov	r2, r6
 8000d9c:	4629      	mov	r1, r5
 8000d9e:	4620      	mov	r0, r4
 8000da0:	f000 f91c 	bl	8000fdc <send_window_status_update>
		HAL_Delay(300);
 8000da4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000da8:	f000 ff52 	bl	8001c50 <HAL_Delay>
		Radio.Rx(0);
 8000dac:	4b07      	ldr	r3, [pc, #28]	@ (8000dcc <checkForUpdateRequests+0xd0>)
 8000dae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000db0:	2000      	movs	r0, #0
 8000db2:	4798      	blx	r3
    }
}
 8000db4:	bf00      	nop
 8000db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000db8:	200000c0 	.word	0x200000c0
 8000dbc:	20000016 	.word	0x20000016
 8000dc0:	20000010 	.word	0x20000010
 8000dc4:	2000000c 	.word	0x2000000c
 8000dc8:	20000000 	.word	0x20000000
 8000dcc:	0800ba64 	.word	0x0800ba64
 8000dd0:	200000c1 	.word	0x200000c1
 8000dd4:	20000017 	.word	0x20000017
 8000dd8:	20000004 	.word	0x20000004
 8000ddc:	200000c2 	.word	0x200000c2
 8000de0:	20000018 	.word	0x20000018
 8000de4:	20000008 	.word	0x20000008

08000de8 <initialiseSystem>:

void initialiseSystem() {
 8000de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dea:	af00      	add	r7, sp, #0


	initRadioCommunication();
 8000dec:	f000 f888 	bl	8000f00 <initRadioCommunication>

	//register sensors to given radio stations
	send_window_status_update(MESSAGE_TYPE_REGISTER, stationId, sensor1Id,  checkWindow1Status());
 8000df0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e5c <initialiseSystem+0x74>)
 8000df2:	681c      	ldr	r4, [r3, #0]
 8000df4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e60 <initialiseSystem+0x78>)
 8000df6:	681d      	ldr	r5, [r3, #0]
 8000df8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e64 <initialiseSystem+0x7c>)
 8000dfa:	681e      	ldr	r6, [r3, #0]
 8000dfc:	f000 f84e 	bl	8000e9c <checkWindow1Status>
 8000e00:	4603      	mov	r3, r0
 8000e02:	4632      	mov	r2, r6
 8000e04:	4629      	mov	r1, r5
 8000e06:	4620      	mov	r0, r4
 8000e08:	f000 f8e8 	bl	8000fdc <send_window_status_update>
	HAL_Delay(200);
 8000e0c:	20c8      	movs	r0, #200	@ 0xc8
 8000e0e:	f000 ff1f 	bl	8001c50 <HAL_Delay>
	send_window_status_update(MESSAGE_TYPE_REGISTER, stationId, sensor2Id,  checkWindow2Status());
 8000e12:	4b12      	ldr	r3, [pc, #72]	@ (8000e5c <initialiseSystem+0x74>)
 8000e14:	681c      	ldr	r4, [r3, #0]
 8000e16:	4b12      	ldr	r3, [pc, #72]	@ (8000e60 <initialiseSystem+0x78>)
 8000e18:	681d      	ldr	r5, [r3, #0]
 8000e1a:	4b13      	ldr	r3, [pc, #76]	@ (8000e68 <initialiseSystem+0x80>)
 8000e1c:	681e      	ldr	r6, [r3, #0]
 8000e1e:	f000 f84f 	bl	8000ec0 <checkWindow2Status>
 8000e22:	4603      	mov	r3, r0
 8000e24:	4632      	mov	r2, r6
 8000e26:	4629      	mov	r1, r5
 8000e28:	4620      	mov	r0, r4
 8000e2a:	f000 f8d7 	bl	8000fdc <send_window_status_update>
	HAL_Delay(200);
 8000e2e:	20c8      	movs	r0, #200	@ 0xc8
 8000e30:	f000 ff0e 	bl	8001c50 <HAL_Delay>
	send_window_status_update(MESSAGE_TYPE_REGISTER, stationId, sensor3Id,  checkWindow3Status());
 8000e34:	4b09      	ldr	r3, [pc, #36]	@ (8000e5c <initialiseSystem+0x74>)
 8000e36:	681c      	ldr	r4, [r3, #0]
 8000e38:	4b09      	ldr	r3, [pc, #36]	@ (8000e60 <initialiseSystem+0x78>)
 8000e3a:	681d      	ldr	r5, [r3, #0]
 8000e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e6c <initialiseSystem+0x84>)
 8000e3e:	681e      	ldr	r6, [r3, #0]
 8000e40:	f000 f84e 	bl	8000ee0 <checkWindow3Status>
 8000e44:	4603      	mov	r3, r0
 8000e46:	4632      	mov	r2, r6
 8000e48:	4629      	mov	r1, r5
 8000e4a:	4620      	mov	r0, r4
 8000e4c:	f000 f8c6 	bl	8000fdc <send_window_status_update>
	HAL_Delay(200);
 8000e50:	20c8      	movs	r0, #200	@ 0xc8
 8000e52:	f000 fefd 	bl	8001c50 <HAL_Delay>

}
 8000e56:	bf00      	nop
 8000e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	200000bc 	.word	0x200000bc
 8000e60:	2000000c 	.word	0x2000000c
 8000e64:	20000000 	.word	0x20000000
 8000e68:	20000004 	.word	0x20000004
 8000e6c:	20000008 	.word	0x20000008

08000e70 <encode_message>:
#include "cryptography_module.h"

char* encode_message(char* message) {
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
	return message; //not implemented yet on purpose
 8000e78:	687b      	ldr	r3, [r7, #4]
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr

08000e86 <decode_message>:

uint8_t* decode_message(uint8_t* message) {
 8000e86:	b480      	push	{r7}
 8000e88:	b083      	sub	sp, #12
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
	return message; //not implemented yet on purpose
 8000e8e:	687b      	ldr	r3, [r7, #4]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <checkWindow1Status>:
#include "gpio_control.h"
#include "stm32u5xx_hal.h"// Include the STM32 HAL for GPIO functions

int checkWindow1Status(void) {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET;
 8000ea0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ea4:	4805      	ldr	r0, [pc, #20]	@ (8000ebc <checkWindow1Status+0x20>)
 8000ea6:	f001 fd23 	bl	80028f0 <HAL_GPIO_ReadPin>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	bf0c      	ite	eq
 8000eb0:	2301      	moveq	r3, #1
 8000eb2:	2300      	movne	r3, #0
 8000eb4:	b2db      	uxtb	r3, r3
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	42020800 	.word	0x42020800

08000ec0 <checkWindow2Status>:

int checkWindow2Status(void) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(GPIOH, GPIO_PIN_1) == GPIO_PIN_RESET;
 8000ec4:	2102      	movs	r1, #2
 8000ec6:	4805      	ldr	r0, [pc, #20]	@ (8000edc <checkWindow2Status+0x1c>)
 8000ec8:	f001 fd12 	bl	80028f0 <HAL_GPIO_ReadPin>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	bf0c      	ite	eq
 8000ed2:	2301      	moveq	r3, #1
 8000ed4:	2300      	movne	r3, #0
 8000ed6:	b2db      	uxtb	r3, r3
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	42021c00 	.word	0x42021c00

08000ee0 <checkWindow3Status>:

int checkWindow3Status(void) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET;
 8000ee4:	2108      	movs	r1, #8
 8000ee6:	4805      	ldr	r0, [pc, #20]	@ (8000efc <checkWindow3Status+0x1c>)
 8000ee8:	f001 fd02 	bl	80028f0 <HAL_GPIO_ReadPin>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	bf0c      	ite	eq
 8000ef2:	2301      	moveq	r3, #1
 8000ef4:	2300      	movne	r3, #0
 8000ef6:	b2db      	uxtb	r3, r3
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	42020400 	.word	0x42020400

08000f00 <initRadioCommunication>:

/**
 * Main application entry point.
 */
void initRadioCommunication( void )
{
 8000f00:	b590      	push	{r4, r7, lr}
 8000f02:	b08b      	sub	sp, #44	@ 0x2c
 8000f04:	af0a      	add	r7, sp, #40	@ 0x28
    // Target board initialization
    BoardInitMcu( );
 8000f06:	f005 fb29 	bl	800655c <BoardInitMcu>
    BoardInitPeriph( );
 8000f0a:	f005 faf1 	bl	80064f0 <BoardInitPeriph>

    // Radio initialization
    RadioEvents.TxDone = OnTxDone;
 8000f0e:	4b2a      	ldr	r3, [pc, #168]	@ (8000fb8 <initRadioCommunication+0xb8>)
 8000f10:	4a2a      	ldr	r2, [pc, #168]	@ (8000fbc <initRadioCommunication+0xbc>)
 8000f12:	601a      	str	r2, [r3, #0]
    RadioEvents.RxDone = OnRxDone;
 8000f14:	4b28      	ldr	r3, [pc, #160]	@ (8000fb8 <initRadioCommunication+0xb8>)
 8000f16:	4a2a      	ldr	r2, [pc, #168]	@ (8000fc0 <initRadioCommunication+0xc0>)
 8000f18:	609a      	str	r2, [r3, #8]
    RadioEvents.TxTimeout = OnTxTimeout;
 8000f1a:	4b27      	ldr	r3, [pc, #156]	@ (8000fb8 <initRadioCommunication+0xb8>)
 8000f1c:	4a29      	ldr	r2, [pc, #164]	@ (8000fc4 <initRadioCommunication+0xc4>)
 8000f1e:	605a      	str	r2, [r3, #4]
    RadioEvents.RxTimeout = OnRxTimeout;
 8000f20:	4b25      	ldr	r3, [pc, #148]	@ (8000fb8 <initRadioCommunication+0xb8>)
 8000f22:	4a29      	ldr	r2, [pc, #164]	@ (8000fc8 <initRadioCommunication+0xc8>)
 8000f24:	60da      	str	r2, [r3, #12]
    RadioEvents.RxError = OnRxError;
 8000f26:	4b24      	ldr	r3, [pc, #144]	@ (8000fb8 <initRadioCommunication+0xb8>)
 8000f28:	4a28      	ldr	r2, [pc, #160]	@ (8000fcc <initRadioCommunication+0xcc>)
 8000f2a:	611a      	str	r2, [r3, #16]

    Radio.Init( &RadioEvents );
 8000f2c:	4b28      	ldr	r3, [pc, #160]	@ (8000fd0 <initRadioCommunication+0xd0>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4821      	ldr	r0, [pc, #132]	@ (8000fb8 <initRadioCommunication+0xb8>)
 8000f32:	4798      	blx	r3

    Radio.SetChannel( RF_FREQUENCY );
 8000f34:	4b26      	ldr	r3, [pc, #152]	@ (8000fd0 <initRadioCommunication+0xd0>)
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	4826      	ldr	r0, [pc, #152]	@ (8000fd4 <initRadioCommunication+0xd4>)
 8000f3a:	4798      	blx	r3

    Radio.SetTxConfig(  MODEM_FSK,						/* Radio modem to be used [0: FSK, 1: LoRa] */
 8000f3c:	4b24      	ldr	r3, [pc, #144]	@ (8000fd0 <initRadioCommunication+0xd0>)
 8000f3e:	69dc      	ldr	r4, [r3, #28]
 8000f40:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8000f44:	9308      	str	r3, [sp, #32]
 8000f46:	2300      	movs	r3, #0
 8000f48:	9307      	str	r3, [sp, #28]
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	9306      	str	r3, [sp, #24]
 8000f4e:	2300      	movs	r3, #0
 8000f50:	9305      	str	r3, [sp, #20]
 8000f52:	2301      	movs	r3, #1
 8000f54:	9304      	str	r3, [sp, #16]
 8000f56:	2300      	movs	r3, #0
 8000f58:	9303      	str	r3, [sp, #12]
 8000f5a:	2305      	movs	r3, #5
 8000f5c:	9302      	str	r3, [sp, #8]
 8000f5e:	2300      	movs	r3, #0
 8000f60:	9301      	str	r3, [sp, #4]
 8000f62:	f24c 3350 	movw	r3, #50000	@ 0xc350
 8000f66:	9300      	str	r3, [sp, #0]
 8000f68:	2300      	movs	r3, #0
 8000f6a:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8000f6e:	2100      	movs	r1, #0
 8000f70:	2000      	movs	r0, #0
 8000f72:	47a0      	blx	r4
						0,								/* Number of symbols bewteen each hop. FSK: N/A ( set to 0 ) */
						0,								/* Inverts IQ signals (LoRa only). FSK: N/A ( set to 0 ) */
						3000							/* Transmission timeout [ms] */
	);

    Radio.SetRxConfig(  MODEM_FSK,						/* Radio modem to be used [0: FSK, 1: LoRa] */
 8000f74:	4b16      	ldr	r3, [pc, #88]	@ (8000fd0 <initRadioCommunication+0xd0>)
 8000f76:	699c      	ldr	r4, [r3, #24]
 8000f78:	2301      	movs	r3, #1
 8000f7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	9308      	str	r3, [sp, #32]
 8000f80:	2300      	movs	r3, #0
 8000f82:	9307      	str	r3, [sp, #28]
 8000f84:	2300      	movs	r3, #0
 8000f86:	9306      	str	r3, [sp, #24]
 8000f88:	2301      	movs	r3, #1
 8000f8a:	9305      	str	r3, [sp, #20]
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	9304      	str	r3, [sp, #16]
 8000f90:	2300      	movs	r3, #0
 8000f92:	9303      	str	r3, [sp, #12]
 8000f94:	2300      	movs	r3, #0
 8000f96:	9302      	str	r3, [sp, #8]
 8000f98:	2305      	movs	r3, #5
 8000f9a:	9301      	str	r3, [sp, #4]
 8000f9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd8 <initRadioCommunication+0xd8>)
 8000f9e:	9300      	str	r3, [sp, #0]
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8000fa6:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8000faa:	2000      	movs	r0, #0
 8000fac:	47a0      	blx	r4
	);




}
 8000fae:	bf00      	nop
 8000fb0:	3704      	adds	r7, #4
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd90      	pop	{r4, r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	200000d8 	.word	0x200000d8
 8000fbc:	0800109d 	.word	0x0800109d
 8000fc0:	080010c5 	.word	0x080010c5
 8000fc4:	0800126d 	.word	0x0800126d
 8000fc8:	08001299 	.word	0x08001299
 8000fcc:	080012c1 	.word	0x080012c1
 8000fd0:	0800ba64 	.word	0x0800ba64
 8000fd4:	33bca100 	.word	0x33bca100
 8000fd8:	00014585 	.word	0x00014585

08000fdc <send_window_status_update>:

int send_window_status_update(int messageType, int stationId, int sensorId, int windowStatus)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08c      	sub	sp, #48	@ 0x30
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
 8000fe8:	603b      	str	r3, [r7, #0]
	if (stationId >= 100 || sensorId >= 100)
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	2b63      	cmp	r3, #99	@ 0x63
 8000fee:	dc02      	bgt.n	8000ff6 <send_window_status_update+0x1a>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b63      	cmp	r3, #99	@ 0x63
 8000ff4:	dd01      	ble.n	8000ffa <send_window_status_update+0x1e>
			return 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	e045      	b.n	8001086 <send_window_status_update+0xaa>
	if (messageType != 0 && messageType != 3)
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d004      	beq.n	800100a <send_window_status_update+0x2e>
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	2b03      	cmp	r3, #3
 8001004:	d001      	beq.n	800100a <send_window_status_update+0x2e>
		return 0;
 8001006:	2300      	movs	r3, #0
 8001008:	e03d      	b.n	8001086 <send_window_status_update+0xaa>
	char stationIdMessage[3];
	char sensorIdMessage[3];
	char windowStatusMessage[2];


    snprintf(stationIdMessage, sizeof(stationIdMessage), "%02d", stationId);
 800100a:	f107 001c 	add.w	r0, r7, #28
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	4a1f      	ldr	r2, [pc, #124]	@ (8001090 <send_window_status_update+0xb4>)
 8001012:	2103      	movs	r1, #3
 8001014:	f009 fad8 	bl	800a5c8 <sniprintf>
    snprintf(sensorIdMessage, sizeof(sensorIdMessage), "%02d", sensorId);
 8001018:	f107 0018 	add.w	r0, r7, #24
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4a1c      	ldr	r2, [pc, #112]	@ (8001090 <send_window_status_update+0xb4>)
 8001020:	2103      	movs	r1, #3
 8001022:	f009 fad1 	bl	800a5c8 <sniprintf>
    snprintf(windowStatusMessage, sizeof(windowStatusMessage), "%d", windowStatus);
 8001026:	f107 0014 	add.w	r0, r7, #20
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	4a19      	ldr	r2, [pc, #100]	@ (8001094 <send_window_status_update+0xb8>)
 800102e:	2102      	movs	r1, #2
 8001030:	f009 faca 	bl	800a5c8 <sniprintf>
    snprintf(messageTypeMessage, sizeof(messageTypeMessage), "%d", messageType);
 8001034:	f107 0020 	add.w	r0, r7, #32
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	4a16      	ldr	r2, [pc, #88]	@ (8001094 <send_window_status_update+0xb8>)
 800103c:	2102      	movs	r1, #2
 800103e:	f009 fac3 	bl	800a5c8 <sniprintf>

    message[0] = messageTypeMessage[0];
 8001042:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001046:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    message[1] = stationIdMessage[0];
 800104a:	7f3b      	ldrb	r3, [r7, #28]
 800104c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    message[2] = stationIdMessage[1];
 8001050:	7f7b      	ldrb	r3, [r7, #29]
 8001052:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    message[3] = sensorIdMessage[0];
 8001056:	7e3b      	ldrb	r3, [r7, #24]
 8001058:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    message[4] = sensorIdMessage[1];
 800105c:	7e7b      	ldrb	r3, [r7, #25]
 800105e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    message[5] = windowStatusMessage[0];
 8001062:	7d3b      	ldrb	r3, [r7, #20]
 8001064:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    message[6] = windowStatusMessage[1];
 8001068:	7d7b      	ldrb	r3, [r7, #21]
 800106a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

    char* encoded_message = encode_message(message);
 800106e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff fefc 	bl	8000e70 <encode_message>
 8001078:	62f8      	str	r0, [r7, #44]	@ 0x2c

    Radio.Send( encoded_message, 7 );
 800107a:	4b07      	ldr	r3, [pc, #28]	@ (8001098 <send_window_status_update+0xbc>)
 800107c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800107e:	2107      	movs	r1, #7
 8001080:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001082:	4798      	blx	r3
    return 1;
 8001084:	2301      	movs	r3, #1

}
 8001086:	4618      	mov	r0, r3
 8001088:	3730      	adds	r7, #48	@ 0x30
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	0800b914 	.word	0x0800b914
 8001094:	0800b91c 	.word	0x0800b91c
 8001098:	0800ba64 	.word	0x0800ba64

0800109c <OnTxDone>:



void OnTxDone( void )
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
    State = TX;
 80010a0:	4b06      	ldr	r3, [pc, #24]	@ (80010bc <OnTxDone+0x20>)
 80010a2:	2205      	movs	r2, #5
 80010a4:	701a      	strb	r2, [r3, #0]
    trx_events_cnt.txdone++;
 80010a6:	4b06      	ldr	r3, [pc, #24]	@ (80010c0 <OnTxDone+0x24>)
 80010a8:	68db      	ldr	r3, [r3, #12]
 80010aa:	3301      	adds	r3, #1
 80010ac:	4a04      	ldr	r2, [pc, #16]	@ (80010c0 <OnTxDone+0x24>)
 80010ae:	60d3      	str	r3, [r2, #12]
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	200000b8 	.word	0x200000b8
 80010c0:	200000c4 	.word	0x200000c4

080010c4 <OnRxDone>:

void OnRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 80010c4:	b590      	push	{r4, r7, lr}
 80010c6:	b089      	sub	sp, #36	@ 0x24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	4608      	mov	r0, r1
 80010ce:	4611      	mov	r1, r2
 80010d0:	461a      	mov	r2, r3
 80010d2:	4603      	mov	r3, r0
 80010d4:	817b      	strh	r3, [r7, #10]
 80010d6:	460b      	mov	r3, r1
 80010d8:	813b      	strh	r3, [r7, #8]
 80010da:	4613      	mov	r3, r2
 80010dc:	71fb      	strb	r3, [r7, #7]
    uint8_t*  decoded_message = decode_message(payload);
 80010de:	68f8      	ldr	r0, [r7, #12]
 80010e0:	f7ff fed1 	bl	8000e86 <decode_message>
 80010e4:	61f8      	str	r0, [r7, #28]

    if (strlen((char *) decoded_message) != 5) {
 80010e6:	69f8      	ldr	r0, [r7, #28]
 80010e8:	f7ff f8c6 	bl	8000278 <strlen>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b05      	cmp	r3, #5
 80010f0:	d002      	beq.n	80010f8 <OnRxDone+0x34>
        printf("Error: Input string must be exactly 5 characters long.\n");
 80010f2:	4829      	ldr	r0, [pc, #164]	@ (8001198 <OnRxDone+0xd4>)
 80010f4:	f009 fa60 	bl	800a5b8 <puts>
    char messageType[2];
    char stationId[3];
    char sensorId[3];


    messageType[0] = decoded_message[0];
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	763b      	strb	r3, [r7, #24]
    messageType[1] = '\0';
 80010fe:	2300      	movs	r3, #0
 8001100:	767b      	strb	r3, [r7, #25]

    stationId[0] = decoded_message[1];
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	3301      	adds	r3, #1
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	753b      	strb	r3, [r7, #20]
    stationId[1] = decoded_message[2];
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	3302      	adds	r3, #2
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	757b      	strb	r3, [r7, #21]
    stationId[2] = '\0';
 8001112:	2300      	movs	r3, #0
 8001114:	75bb      	strb	r3, [r7, #22]

    sensorId[0] = decoded_message[3];
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	3303      	adds	r3, #3
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	743b      	strb	r3, [r7, #16]
    sensorId[1] = decoded_message[4];
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	3304      	adds	r3, #4
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	747b      	strb	r3, [r7, #17]
    sensorId[2] = '\0';
 8001126:	2300      	movs	r3, #0
 8001128:	74bb      	strb	r3, [r7, #18]

    if (messageType[0] == MESSAGE_TYPE_ACKNOWLEDGEMENT) {
 800112a:	7e3a      	ldrb	r2, [r7, #24]
 800112c:	4b1b      	ldr	r3, [pc, #108]	@ (800119c <OnRxDone+0xd8>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	429a      	cmp	r2, r3
 8001132:	d110      	bne.n	8001156 <OnRxDone+0x92>
    	handleAcknowledgementMessage(atoi(stationId), atoi(sensorId));
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	4618      	mov	r0, r3
 800113a:	f009 f88b 	bl	800a254 <atoi>
 800113e:	4604      	mov	r4, r0
 8001140:	f107 0310 	add.w	r3, r7, #16
 8001144:	4618      	mov	r0, r3
 8001146:	f009 f885 	bl	800a254 <atoi>
 800114a:	4603      	mov	r3, r0
 800114c:	4619      	mov	r1, r3
 800114e:	4620      	mov	r0, r4
 8001150:	f000 f82c 	bl	80011ac <handleAcknowledgementMessage>
 8001154:	e014      	b.n	8001180 <OnRxDone+0xbc>
    }
    else if ((messageType[0] == MESSAGE_TYPE_REQUEST_UPDATE)) {
 8001156:	7e3a      	ldrb	r2, [r7, #24]
 8001158:	4b11      	ldr	r3, [pc, #68]	@ (80011a0 <OnRxDone+0xdc>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	429a      	cmp	r2, r3
 800115e:	d10f      	bne.n	8001180 <OnRxDone+0xbc>
    	handleUpdateStatusMessage(atoi(stationId), atoi(sensorId));
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	4618      	mov	r0, r3
 8001166:	f009 f875 	bl	800a254 <atoi>
 800116a:	4604      	mov	r4, r0
 800116c:	f107 0310 	add.w	r3, r7, #16
 8001170:	4618      	mov	r0, r3
 8001172:	f009 f86f 	bl	800a254 <atoi>
 8001176:	4603      	mov	r3, r0
 8001178:	4619      	mov	r1, r3
 800117a:	4620      	mov	r0, r4
 800117c:	f000 f844 	bl	8001208 <handleUpdateStatusMessage>
    }


    State = RX_DONE;
 8001180:	4b08      	ldr	r3, [pc, #32]	@ (80011a4 <OnRxDone+0xe0>)
 8001182:	2202      	movs	r2, #2
 8001184:	701a      	strb	r2, [r3, #0]
    trx_events_cnt.rxdone++;
 8001186:	4b08      	ldr	r3, [pc, #32]	@ (80011a8 <OnRxDone+0xe4>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	3301      	adds	r3, #1
 800118c:	4a06      	ldr	r2, [pc, #24]	@ (80011a8 <OnRxDone+0xe4>)
 800118e:	6013      	str	r3, [r2, #0]
}
 8001190:	bf00      	nop
 8001192:	3724      	adds	r7, #36	@ 0x24
 8001194:	46bd      	mov	sp, r7
 8001196:	bd90      	pop	{r4, r7, pc}
 8001198:	0800b920 	.word	0x0800b920
 800119c:	20000014 	.word	0x20000014
 80011a0:	20000015 	.word	0x20000015
 80011a4:	200000b8 	.word	0x200000b8
 80011a8:	200000c4 	.word	0x200000c4

080011ac <handleAcknowledgementMessage>:

void handleAcknowledgementMessage(int stationId, int sensorId) {
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]

	if (sensorId == sensor1Id)
 80011b6:	4b10      	ldr	r3, [pc, #64]	@ (80011f8 <handleAcknowledgementMessage+0x4c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	683a      	ldr	r2, [r7, #0]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d103      	bne.n	80011c8 <handleAcknowledgementMessage+0x1c>
		isSensor1Registered = true;
 80011c0:	4b0e      	ldr	r3, [pc, #56]	@ (80011fc <handleAcknowledgementMessage+0x50>)
 80011c2:	2201      	movs	r2, #1
 80011c4:	701a      	strb	r2, [r3, #0]
 80011c6:	e012      	b.n	80011ee <handleAcknowledgementMessage+0x42>
	else if (sensorId == sensor2Id)
 80011c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001200 <handleAcknowledgementMessage+0x54>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	683a      	ldr	r2, [r7, #0]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d103      	bne.n	80011da <handleAcknowledgementMessage+0x2e>
		isSensor1Registered = true;
 80011d2:	4b0a      	ldr	r3, [pc, #40]	@ (80011fc <handleAcknowledgementMessage+0x50>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	701a      	strb	r2, [r3, #0]
 80011d8:	e009      	b.n	80011ee <handleAcknowledgementMessage+0x42>
	else if (sensorId == sensor3Id)
 80011da:	4b0a      	ldr	r3, [pc, #40]	@ (8001204 <handleAcknowledgementMessage+0x58>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	683a      	ldr	r2, [r7, #0]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d103      	bne.n	80011ec <handleAcknowledgementMessage+0x40>
		isSensor1Registered = true;
 80011e4:	4b05      	ldr	r3, [pc, #20]	@ (80011fc <handleAcknowledgementMessage+0x50>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	701a      	strb	r2, [r3, #0]
 80011ea:	e000      	b.n	80011ee <handleAcknowledgementMessage+0x42>
	else
		return;
 80011ec:	bf00      	nop
}
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	20000000 	.word	0x20000000
 80011fc:	20000016 	.word	0x20000016
 8001200:	20000004 	.word	0x20000004
 8001204:	20000008 	.word	0x20000008

08001208 <handleUpdateStatusMessage>:

void handleUpdateStatusMessage(int stationId, int sensorId) {
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]

	if (sensorId == sensor1Id)
 8001212:	4b10      	ldr	r3, [pc, #64]	@ (8001254 <handleUpdateStatusMessage+0x4c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	683a      	ldr	r2, [r7, #0]
 8001218:	429a      	cmp	r2, r3
 800121a:	d103      	bne.n	8001224 <handleUpdateStatusMessage+0x1c>
		shouldUpdateSensor1 = true;
 800121c:	4b0e      	ldr	r3, [pc, #56]	@ (8001258 <handleUpdateStatusMessage+0x50>)
 800121e:	2201      	movs	r2, #1
 8001220:	701a      	strb	r2, [r3, #0]
 8001222:	e012      	b.n	800124a <handleUpdateStatusMessage+0x42>
	else if (sensorId == sensor2Id)
 8001224:	4b0d      	ldr	r3, [pc, #52]	@ (800125c <handleUpdateStatusMessage+0x54>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	683a      	ldr	r2, [r7, #0]
 800122a:	429a      	cmp	r2, r3
 800122c:	d103      	bne.n	8001236 <handleUpdateStatusMessage+0x2e>
		shouldUpdateSensor2 = true;
 800122e:	4b0c      	ldr	r3, [pc, #48]	@ (8001260 <handleUpdateStatusMessage+0x58>)
 8001230:	2201      	movs	r2, #1
 8001232:	701a      	strb	r2, [r3, #0]
 8001234:	e009      	b.n	800124a <handleUpdateStatusMessage+0x42>
	else if (sensorId == sensor3Id)
 8001236:	4b0b      	ldr	r3, [pc, #44]	@ (8001264 <handleUpdateStatusMessage+0x5c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	683a      	ldr	r2, [r7, #0]
 800123c:	429a      	cmp	r2, r3
 800123e:	d103      	bne.n	8001248 <handleUpdateStatusMessage+0x40>
		shouldUpdateSensor3 = true;
 8001240:	4b09      	ldr	r3, [pc, #36]	@ (8001268 <handleUpdateStatusMessage+0x60>)
 8001242:	2201      	movs	r2, #1
 8001244:	701a      	strb	r2, [r3, #0]
 8001246:	e000      	b.n	800124a <handleUpdateStatusMessage+0x42>
	else
		return;
 8001248:	bf00      	nop
}
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	20000000 	.word	0x20000000
 8001258:	200000c0 	.word	0x200000c0
 800125c:	20000004 	.word	0x20000004
 8001260:	200000c1 	.word	0x200000c1
 8001264:	20000008 	.word	0x20000008
 8001268:	200000c2 	.word	0x200000c2

0800126c <OnTxTimeout>:

void OnTxTimeout( void )
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
    Radio.Sleep( );
 8001270:	4b06      	ldr	r3, [pc, #24]	@ (800128c <OnTxTimeout+0x20>)
 8001272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001274:	4798      	blx	r3
    State = TX_TIMEOUT;
 8001276:	4b06      	ldr	r3, [pc, #24]	@ (8001290 <OnTxTimeout+0x24>)
 8001278:	2206      	movs	r2, #6
 800127a:	701a      	strb	r2, [r3, #0]
    trx_events_cnt.txtimeout++;
 800127c:	4b05      	ldr	r3, [pc, #20]	@ (8001294 <OnTxTimeout+0x28>)
 800127e:	691b      	ldr	r3, [r3, #16]
 8001280:	3301      	adds	r3, #1
 8001282:	4a04      	ldr	r2, [pc, #16]	@ (8001294 <OnTxTimeout+0x28>)
 8001284:	6113      	str	r3, [r2, #16]
}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	0800ba64 	.word	0x0800ba64
 8001290:	200000b8 	.word	0x200000b8
 8001294:	200000c4 	.word	0x200000c4

08001298 <OnRxTimeout>:

void OnRxTimeout( void )
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
    State = RX_TIMEOUT;
 800129c:	4b06      	ldr	r3, [pc, #24]	@ (80012b8 <OnRxTimeout+0x20>)
 800129e:	2203      	movs	r2, #3
 80012a0:	701a      	strb	r2, [r3, #0]
    trx_events_cnt.rxtimeout++;
 80012a2:	4b06      	ldr	r3, [pc, #24]	@ (80012bc <OnRxTimeout+0x24>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	3301      	adds	r3, #1
 80012a8:	4a04      	ldr	r2, [pc, #16]	@ (80012bc <OnRxTimeout+0x24>)
 80012aa:	6053      	str	r3, [r2, #4]
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	200000b8 	.word	0x200000b8
 80012bc:	200000c4 	.word	0x200000c4

080012c0 <OnRxError>:

void OnRxError( void )
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
    State = RX_ERROR;
 80012c4:	4b06      	ldr	r3, [pc, #24]	@ (80012e0 <OnRxError+0x20>)
 80012c6:	2204      	movs	r2, #4
 80012c8:	701a      	strb	r2, [r3, #0]
    trx_events_cnt.rxerror++;
 80012ca:	4b06      	ldr	r3, [pc, #24]	@ (80012e4 <OnRxError+0x24>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	3301      	adds	r3, #1
 80012d0:	4a04      	ldr	r2, [pc, #16]	@ (80012e4 <OnRxError+0x24>)
 80012d2:	6093      	str	r3, [r2, #8]
    Radio.Rx(0);
 80012d4:	4b04      	ldr	r3, [pc, #16]	@ (80012e8 <OnRxError+0x28>)
 80012d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012d8:	2000      	movs	r0, #0
 80012da:	4798      	blx	r3
}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	200000b8 	.word	0x200000b8
 80012e4:	200000c4 	.word	0x200000c4
 80012e8:	0800ba64 	.word	0x0800ba64

080012ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012f0:	f000 fbe8 	bl	8001ac4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012f4:	f000 f80f 	bl	8001316 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80012f8:	f000 f85b 	bl	80013b2 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012fc:	f000 f960 	bl	80015c0 <MX_GPIO_Init>
  MX_LPDMA1_Init();
 8001300:	f000 f864 	bl	80013cc <MX_LPDMA1_Init>
  MX_RTC_Init();
 8001304:	f000 f8a0 	bl	8001448 <MX_RTC_Init>
  MX_SPI1_Init();
 8001308:	f000 f8ec 	bl	80014e4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  startSystem();
 800130c:	f7ff fc5a 	bl	8000bc4 <startSystem>
 8001310:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
}
 8001312:	4618      	mov	r0, r3
 8001314:	bd80      	pop	{r7, pc}

08001316 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b09e      	sub	sp, #120	@ 0x78
 800131a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800131c:	f107 0318 	add.w	r3, r7, #24
 8001320:	2260      	movs	r2, #96	@ 0x60
 8001322:	2100      	movs	r1, #0
 8001324:	4618      	mov	r0, r3
 8001326:	f009 fa5b 	bl	800a7e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800132a:	463b      	mov	r3, r7
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
 8001338:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 800133a:	2000      	movs	r0, #0
 800133c:	f001 fb3a 	bl	80029b4 <HAL_PWREx_ControlVoltageScaling>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001346:	f000 f9b3 	bl	80016b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 800134a:	2318      	movs	r3, #24
 800134c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800134e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001352:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001354:	2301      	movs	r3, #1
 8001356:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001358:	2310      	movs	r3, #16
 800135a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 800135c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001360:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8001362:	2300      	movs	r3, #0
 8001364:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001366:	2300      	movs	r3, #0
 8001368:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800136a:	f107 0318 	add.w	r3, r7, #24
 800136e:	4618      	mov	r0, r3
 8001370:	f001 fbfc 	bl	8002b6c <HAL_RCC_OscConfig>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <SystemClock_Config+0x68>
  {
    Error_Handler();
 800137a:	f000 f999 	bl	80016b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800137e:	231f      	movs	r3, #31
 8001380:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001382:	2300      	movs	r3, #0
 8001384:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001386:	2300      	movs	r3, #0
 8001388:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800138e:	2300      	movs	r3, #0
 8001390:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8001392:	2300      	movs	r3, #0
 8001394:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001396:	463b      	mov	r3, r7
 8001398:	2100      	movs	r1, #0
 800139a:	4618      	mov	r0, r3
 800139c:	f002 fac2 	bl	8003924 <HAL_RCC_ClockConfig>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <SystemClock_Config+0x94>
  {
    Error_Handler();
 80013a6:	f000 f983 	bl	80016b0 <Error_Handler>
  }
}
 80013aa:	bf00      	nop
 80013ac:	3778      	adds	r7, #120	@ 0x78
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	af00      	add	r7, sp, #0

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 80013b6:	2002      	movs	r0, #2
 80013b8:	f001 fb88 	bl	8002acc <HAL_PWREx_ConfigSupply>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <SystemPower_Config+0x14>
  {
    Error_Handler();
 80013c2:	f000 f975 	bl	80016b0 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
	...

080013cc <MX_LPDMA1_Init>:
  * @brief LPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPDMA1_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPDMA1_Init 0 */

  /* USER CODE END LPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_LPDMA1_CLK_ENABLE();
 80013d2:	4b1a      	ldr	r3, [pc, #104]	@ (800143c <MX_LPDMA1_Init+0x70>)
 80013d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013d8:	4a18      	ldr	r2, [pc, #96]	@ (800143c <MX_LPDMA1_Init+0x70>)
 80013da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80013e2:	4b16      	ldr	r3, [pc, #88]	@ (800143c <MX_LPDMA1_Init+0x70>)
 80013e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN LPDMA1_Init 1 */

  /* USER CODE END LPDMA1_Init 1 */
  handle_LPDMA1_Channel0.Instance = LPDMA1_Channel0;
 80013f0:	4b13      	ldr	r3, [pc, #76]	@ (8001440 <MX_LPDMA1_Init+0x74>)
 80013f2:	4a14      	ldr	r2, [pc, #80]	@ (8001444 <MX_LPDMA1_Init+0x78>)
 80013f4:	601a      	str	r2, [r3, #0]
  handle_LPDMA1_Channel0.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80013f6:	4b12      	ldr	r3, [pc, #72]	@ (8001440 <MX_LPDMA1_Init+0x74>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	639a      	str	r2, [r3, #56]	@ 0x38
  handle_LPDMA1_Channel0.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 80013fc:	4b10      	ldr	r3, [pc, #64]	@ (8001440 <MX_LPDMA1_Init+0x74>)
 80013fe:	2200      	movs	r2, #0
 8001400:	63da      	str	r2, [r3, #60]	@ 0x3c
  handle_LPDMA1_Channel0.InitLinkedList.TransferEventMode = DMA_TCEM_LAST_LL_ITEM_TRANSFER;
 8001402:	4b0f      	ldr	r3, [pc, #60]	@ (8001440 <MX_LPDMA1_Init+0x74>)
 8001404:	f04f 4240 	mov.w	r2, #3221225472	@ 0xc0000000
 8001408:	645a      	str	r2, [r3, #68]	@ 0x44
  handle_LPDMA1_Channel0.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_NORMAL;
 800140a:	4b0d      	ldr	r3, [pc, #52]	@ (8001440 <MX_LPDMA1_Init+0x74>)
 800140c:	2280      	movs	r2, #128	@ 0x80
 800140e:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_DMAEx_List_Init(&handle_LPDMA1_Channel0) != HAL_OK)
 8001410:	480b      	ldr	r0, [pc, #44]	@ (8001440 <MX_LPDMA1_Init+0x74>)
 8001412:	f000 fe11 	bl	8002038 <HAL_DMAEx_List_Init>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_LPDMA1_Init+0x54>
  {
    Error_Handler();
 800141c:	f000 f948 	bl	80016b0 <Error_Handler>
  }
  if (HAL_DMA_ConfigChannelAttributes(&handle_LPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001420:	2110      	movs	r1, #16
 8001422:	4807      	ldr	r0, [pc, #28]	@ (8001440 <MX_LPDMA1_Init+0x74>)
 8001424:	f000 fdcc 	bl	8001fc0 <HAL_DMA_ConfigChannelAttributes>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_LPDMA1_Init+0x66>
  {
    Error_Handler();
 800142e:	f000 f93f 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN LPDMA1_Init 2 */

  /* USER CODE END LPDMA1_Init 2 */

}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	46020c00 	.word	0x46020c00
 8001440:	200000f4 	.word	0x200000f4
 8001444:	46025050 	.word	0x46025050

08001448 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b088      	sub	sp, #32
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
 800145c:	615a      	str	r2, [r3, #20]
 800145e:	619a      	str	r2, [r3, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001460:	4b1e      	ldr	r3, [pc, #120]	@ (80014dc <MX_RTC_Init+0x94>)
 8001462:	4a1f      	ldr	r2, [pc, #124]	@ (80014e0 <MX_RTC_Init+0x98>)
 8001464:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001466:	4b1d      	ldr	r3, [pc, #116]	@ (80014dc <MX_RTC_Init+0x94>)
 8001468:	2200      	movs	r2, #0
 800146a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800146c:	4b1b      	ldr	r3, [pc, #108]	@ (80014dc <MX_RTC_Init+0x94>)
 800146e:	227f      	movs	r2, #127	@ 0x7f
 8001470:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001472:	4b1a      	ldr	r3, [pc, #104]	@ (80014dc <MX_RTC_Init+0x94>)
 8001474:	22ff      	movs	r2, #255	@ 0xff
 8001476:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001478:	4b18      	ldr	r3, [pc, #96]	@ (80014dc <MX_RTC_Init+0x94>)
 800147a:	2200      	movs	r2, #0
 800147c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800147e:	4b17      	ldr	r3, [pc, #92]	@ (80014dc <MX_RTC_Init+0x94>)
 8001480:	2200      	movs	r2, #0
 8001482:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001484:	4b15      	ldr	r3, [pc, #84]	@ (80014dc <MX_RTC_Init+0x94>)
 8001486:	2200      	movs	r2, #0
 8001488:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800148a:	4b14      	ldr	r3, [pc, #80]	@ (80014dc <MX_RTC_Init+0x94>)
 800148c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001490:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001492:	4b12      	ldr	r3, [pc, #72]	@ (80014dc <MX_RTC_Init+0x94>)
 8001494:	2200      	movs	r2, #0
 8001496:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8001498:	4b10      	ldr	r3, [pc, #64]	@ (80014dc <MX_RTC_Init+0x94>)
 800149a:	2200      	movs	r2, #0
 800149c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800149e:	480f      	ldr	r0, [pc, #60]	@ (80014dc <MX_RTC_Init+0x94>)
 80014a0:	f003 fc42 	bl	8004d28 <HAL_RTC_Init>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80014aa:	f000 f901 	bl	80016b0 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 80014ae:	2300      	movs	r3, #0
 80014b0:	607b      	str	r3, [r7, #4]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	617b      	str	r3, [r7, #20]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61bb      	str	r3, [r7, #24]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	4619      	mov	r1, r3
 80014c2:	4806      	ldr	r0, [pc, #24]	@ (80014dc <MX_RTC_Init+0x94>)
 80014c4:	f004 f9e6 	bl	8005894 <HAL_RTCEx_PrivilegeModeSet>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 80014ce:	f000 f8ef 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80014d2:	bf00      	nop
 80014d4:	3720      	adds	r7, #32
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	2000016c 	.word	0x2000016c
 80014e0:	46007800 	.word	0x46007800

080014e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014f4:	4b30      	ldr	r3, [pc, #192]	@ (80015b8 <MX_SPI1_Init+0xd4>)
 80014f6:	4a31      	ldr	r2, [pc, #196]	@ (80015bc <MX_SPI1_Init+0xd8>)
 80014f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014fa:	4b2f      	ldr	r3, [pc, #188]	@ (80015b8 <MX_SPI1_Init+0xd4>)
 80014fc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001500:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001502:	4b2d      	ldr	r3, [pc, #180]	@ (80015b8 <MX_SPI1_Init+0xd4>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001508:	4b2b      	ldr	r3, [pc, #172]	@ (80015b8 <MX_SPI1_Init+0xd4>)
 800150a:	2203      	movs	r2, #3
 800150c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800150e:	4b2a      	ldr	r3, [pc, #168]	@ (80015b8 <MX_SPI1_Init+0xd4>)
 8001510:	2200      	movs	r2, #0
 8001512:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001514:	4b28      	ldr	r3, [pc, #160]	@ (80015b8 <MX_SPI1_Init+0xd4>)
 8001516:	2200      	movs	r2, #0
 8001518:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800151a:	4b27      	ldr	r3, [pc, #156]	@ (80015b8 <MX_SPI1_Init+0xd4>)
 800151c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001520:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001522:	4b25      	ldr	r3, [pc, #148]	@ (80015b8 <MX_SPI1_Init+0xd4>)
 8001524:	2200      	movs	r2, #0
 8001526:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001528:	4b23      	ldr	r3, [pc, #140]	@ (80015b8 <MX_SPI1_Init+0xd4>)
 800152a:	2200      	movs	r2, #0
 800152c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800152e:	4b22      	ldr	r3, [pc, #136]	@ (80015b8 <MX_SPI1_Init+0xd4>)
 8001530:	2200      	movs	r2, #0
 8001532:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001534:	4b20      	ldr	r3, [pc, #128]	@ (80015b8 <MX_SPI1_Init+0xd4>)
 8001536:	2200      	movs	r2, #0
 8001538:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 800153a:	4b1f      	ldr	r3, [pc, #124]	@ (80015b8 <MX_SPI1_Init+0xd4>)
 800153c:	2207      	movs	r2, #7
 800153e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001540:	4b1d      	ldr	r3, [pc, #116]	@ (80015b8 <MX_SPI1_Init+0xd4>)
 8001542:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001546:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001548:	4b1b      	ldr	r3, [pc, #108]	@ (80015b8 <MX_SPI1_Init+0xd4>)
 800154a:	2200      	movs	r2, #0
 800154c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800154e:	4b1a      	ldr	r3, [pc, #104]	@ (80015b8 <MX_SPI1_Init+0xd4>)
 8001550:	2200      	movs	r2, #0
 8001552:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001554:	4b18      	ldr	r3, [pc, #96]	@ (80015b8 <MX_SPI1_Init+0xd4>)
 8001556:	2200      	movs	r2, #0
 8001558:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800155a:	4b17      	ldr	r3, [pc, #92]	@ (80015b8 <MX_SPI1_Init+0xd4>)
 800155c:	2200      	movs	r2, #0
 800155e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001560:	4b15      	ldr	r3, [pc, #84]	@ (80015b8 <MX_SPI1_Init+0xd4>)
 8001562:	2200      	movs	r2, #0
 8001564:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001566:	4b14      	ldr	r3, [pc, #80]	@ (80015b8 <MX_SPI1_Init+0xd4>)
 8001568:	2200      	movs	r2, #0
 800156a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800156c:	4b12      	ldr	r3, [pc, #72]	@ (80015b8 <MX_SPI1_Init+0xd4>)
 800156e:	2200      	movs	r2, #0
 8001570:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8001572:	4b11      	ldr	r3, [pc, #68]	@ (80015b8 <MX_SPI1_Init+0xd4>)
 8001574:	2200      	movs	r2, #0
 8001576:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8001578:	4b0f      	ldr	r3, [pc, #60]	@ (80015b8 <MX_SPI1_Init+0xd4>)
 800157a:	2200      	movs	r2, #0
 800157c:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800157e:	480e      	ldr	r0, [pc, #56]	@ (80015b8 <MX_SPI1_Init+0xd4>)
 8001580:	f004 f9b6 	bl	80058f0 <HAL_SPI_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_SPI1_Init+0xaa>
  {
    Error_Handler();
 800158a:	f000 f891 	bl	80016b0 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 800158e:	2300      	movs	r3, #0
 8001590:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8001592:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001596:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8001598:	2300      	movs	r3, #0
 800159a:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 800159c:	1d3b      	adds	r3, r7, #4
 800159e:	4619      	mov	r1, r3
 80015a0:	4805      	ldr	r0, [pc, #20]	@ (80015b8 <MX_SPI1_Init+0xd4>)
 80015a2:	f004 ff64 	bl	800646e <HAL_SPIEx_SetConfigAutonomousMode>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_SPI1_Init+0xcc>
  {
    Error_Handler();
 80015ac:	f000 f880 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015b0:	bf00      	nop
 80015b2:	3710      	adds	r7, #16
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	2000019c 	.word	0x2000019c
 80015bc:	40013000 	.word	0x40013000

080015c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08a      	sub	sp, #40	@ 0x28
 80015c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c6:	f107 0314 	add.w	r3, r7, #20
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	609a      	str	r2, [r3, #8]
 80015d2:	60da      	str	r2, [r3, #12]
 80015d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015d6:	4b32      	ldr	r3, [pc, #200]	@ (80016a0 <MX_GPIO_Init+0xe0>)
 80015d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015dc:	4a30      	ldr	r2, [pc, #192]	@ (80016a0 <MX_GPIO_Init+0xe0>)
 80015de:	f043 0304 	orr.w	r3, r3, #4
 80015e2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80015e6:	4b2e      	ldr	r3, [pc, #184]	@ (80016a0 <MX_GPIO_Init+0xe0>)
 80015e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015ec:	f003 0304 	and.w	r3, r3, #4
 80015f0:	613b      	str	r3, [r7, #16]
 80015f2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015f4:	4b2a      	ldr	r3, [pc, #168]	@ (80016a0 <MX_GPIO_Init+0xe0>)
 80015f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015fa:	4a29      	ldr	r2, [pc, #164]	@ (80016a0 <MX_GPIO_Init+0xe0>)
 80015fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001600:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001604:	4b26      	ldr	r3, [pc, #152]	@ (80016a0 <MX_GPIO_Init+0xe0>)
 8001606:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800160a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001612:	4b23      	ldr	r3, [pc, #140]	@ (80016a0 <MX_GPIO_Init+0xe0>)
 8001614:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001618:	4a21      	ldr	r2, [pc, #132]	@ (80016a0 <MX_GPIO_Init+0xe0>)
 800161a:	f043 0301 	orr.w	r3, r3, #1
 800161e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001622:	4b1f      	ldr	r3, [pc, #124]	@ (80016a0 <MX_GPIO_Init+0xe0>)
 8001624:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001628:	f003 0301 	and.w	r3, r3, #1
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001630:	4b1b      	ldr	r3, [pc, #108]	@ (80016a0 <MX_GPIO_Init+0xe0>)
 8001632:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001636:	4a1a      	ldr	r2, [pc, #104]	@ (80016a0 <MX_GPIO_Init+0xe0>)
 8001638:	f043 0302 	orr.w	r3, r3, #2
 800163c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001640:	4b17      	ldr	r3, [pc, #92]	@ (80016a0 <MX_GPIO_Init+0xe0>)
 8001642:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	607b      	str	r3, [r7, #4]
 800164c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800164e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001652:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001654:	2300      	movs	r3, #0
 8001656:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800165c:	f107 0314 	add.w	r3, r7, #20
 8001660:	4619      	mov	r1, r3
 8001662:	4810      	ldr	r0, [pc, #64]	@ (80016a4 <MX_GPIO_Init+0xe4>)
 8001664:	f000 ff6c 	bl	8002540 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001668:	2302      	movs	r3, #2
 800166a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800166c:	2300      	movs	r3, #0
 800166e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001674:	f107 0314 	add.w	r3, r7, #20
 8001678:	4619      	mov	r1, r3
 800167a:	480b      	ldr	r0, [pc, #44]	@ (80016a8 <MX_GPIO_Init+0xe8>)
 800167c:	f000 ff60 	bl	8002540 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001680:	2308      	movs	r3, #8
 8001682:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001684:	2300      	movs	r3, #0
 8001686:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	4619      	mov	r1, r3
 8001692:	4806      	ldr	r0, [pc, #24]	@ (80016ac <MX_GPIO_Init+0xec>)
 8001694:	f000 ff54 	bl	8002540 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001698:	bf00      	nop
 800169a:	3728      	adds	r7, #40	@ 0x28
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	46020c00 	.word	0x46020c00
 80016a4:	42020800 	.word	0x42020800
 80016a8:	42021c00 	.word	0x42021c00
 80016ac:	42020400 	.word	0x42020400

080016b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016b4:	b672      	cpsid	i
}
 80016b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016b8:	bf00      	nop
 80016ba:	e7fd      	b.n	80016b8 <Error_Handler+0x8>

080016bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80016c2:	4b0a      	ldr	r3, [pc, #40]	@ (80016ec <HAL_MspInit+0x30>)
 80016c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016c8:	4a08      	ldr	r2, [pc, #32]	@ (80016ec <HAL_MspInit+0x30>)
 80016ca:	f043 0304 	orr.w	r3, r3, #4
 80016ce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80016d2:	4b06      	ldr	r3, [pc, #24]	@ (80016ec <HAL_MspInit+0x30>)
 80016d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016d8:	f003 0304 	and.w	r3, r3, #4
 80016dc:	607b      	str	r3, [r7, #4]
 80016de:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	46020c00 	.word	0x46020c00

080016f0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b0b4      	sub	sp, #208	@ 0xd0
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016f8:	f107 0310 	add.w	r3, r7, #16
 80016fc:	22c0      	movs	r2, #192	@ 0xc0
 80016fe:	2100      	movs	r1, #0
 8001700:	4618      	mov	r0, r3
 8001702:	f009 f86d 	bl	800a7e0 <memset>
  if(hrtc->Instance==RTC)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a1d      	ldr	r2, [pc, #116]	@ (8001780 <HAL_RTC_MspInit+0x90>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d132      	bne.n	8001776 <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001710:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001714:	f04f 0300 	mov.w	r3, #0
 8001718:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800171c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001720:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001724:	f107 0310 	add.w	r3, r7, #16
 8001728:	4618      	mov	r0, r3
 800172a:	f002 fc8f 	bl	800404c <HAL_RCCEx_PeriphCLKConfig>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8001734:	f7ff ffbc 	bl	80016b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001738:	4b12      	ldr	r3, [pc, #72]	@ (8001784 <HAL_RTC_MspInit+0x94>)
 800173a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800173e:	4a11      	ldr	r2, [pc, #68]	@ (8001784 <HAL_RTC_MspInit+0x94>)
 8001740:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001744:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001748:	4b0e      	ldr	r3, [pc, #56]	@ (8001784 <HAL_RTC_MspInit+0x94>)
 800174a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800174e:	4a0d      	ldr	r2, [pc, #52]	@ (8001784 <HAL_RTC_MspInit+0x94>)
 8001750:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001754:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8001758:	4b0a      	ldr	r3, [pc, #40]	@ (8001784 <HAL_RTC_MspInit+0x94>)
 800175a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800175e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 8001766:	4b07      	ldr	r3, [pc, #28]	@ (8001784 <HAL_RTC_MspInit+0x94>)
 8001768:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800176c:	4a05      	ldr	r2, [pc, #20]	@ (8001784 <HAL_RTC_MspInit+0x94>)
 800176e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001772:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8001776:	bf00      	nop
 8001778:	37d0      	adds	r7, #208	@ 0xd0
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	46007800 	.word	0x46007800
 8001784:	46020c00 	.word	0x46020c00

08001788 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b0ba      	sub	sp, #232	@ 0xe8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001790:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]
 800179e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017a0:	f107 0310 	add.w	r3, r7, #16
 80017a4:	22c0      	movs	r2, #192	@ 0xc0
 80017a6:	2100      	movs	r1, #0
 80017a8:	4618      	mov	r0, r3
 80017aa:	f009 f819 	bl	800a7e0 <memset>
  if(hspi->Instance==SPI1)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a27      	ldr	r2, [pc, #156]	@ (8001850 <HAL_SPI_MspInit+0xc8>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d146      	bne.n	8001846 <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80017b8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80017bc:	f04f 0300 	mov.w	r3, #0
 80017c0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 80017c4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80017c8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017cc:	f107 0310 	add.w	r3, r7, #16
 80017d0:	4618      	mov	r0, r3
 80017d2:	f002 fc3b 	bl	800404c <HAL_RCCEx_PeriphCLKConfig>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 80017dc:	f7ff ff68 	bl	80016b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001854 <HAL_SPI_MspInit+0xcc>)
 80017e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80017e6:	4a1b      	ldr	r2, [pc, #108]	@ (8001854 <HAL_SPI_MspInit+0xcc>)
 80017e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80017ec:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80017f0:	4b18      	ldr	r3, [pc, #96]	@ (8001854 <HAL_SPI_MspInit+0xcc>)
 80017f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80017f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fe:	4b15      	ldr	r3, [pc, #84]	@ (8001854 <HAL_SPI_MspInit+0xcc>)
 8001800:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001804:	4a13      	ldr	r2, [pc, #76]	@ (8001854 <HAL_SPI_MspInit+0xcc>)
 8001806:	f043 0301 	orr.w	r3, r3, #1
 800180a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800180e:	4b11      	ldr	r3, [pc, #68]	@ (8001854 <HAL_SPI_MspInit+0xcc>)
 8001810:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001814:	f003 0301 	and.w	r3, r3, #1
 8001818:	60bb      	str	r3, [r7, #8]
 800181a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800181c:	23e0      	movs	r3, #224	@ 0xe0
 800181e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001822:	2302      	movs	r3, #2
 8001824:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182e:	2300      	movs	r3, #0
 8001830:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001834:	2305      	movs	r3, #5
 8001836:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800183e:	4619      	mov	r1, r3
 8001840:	4805      	ldr	r0, [pc, #20]	@ (8001858 <HAL_SPI_MspInit+0xd0>)
 8001842:	f000 fe7d 	bl	8002540 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001846:	bf00      	nop
 8001848:	37e8      	adds	r7, #232	@ 0xe8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40013000 	.word	0x40013000
 8001854:	46020c00 	.word	0x46020c00
 8001858:	42020000 	.word	0x42020000

0800185c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001860:	bf00      	nop
 8001862:	e7fd      	b.n	8001860 <NMI_Handler+0x4>

08001864 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001868:	bf00      	nop
 800186a:	e7fd      	b.n	8001868 <HardFault_Handler+0x4>

0800186c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001870:	bf00      	nop
 8001872:	e7fd      	b.n	8001870 <MemManage_Handler+0x4>

08001874 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001878:	bf00      	nop
 800187a:	e7fd      	b.n	8001878 <BusFault_Handler+0x4>

0800187c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001880:	bf00      	nop
 8001882:	e7fd      	b.n	8001880 <UsageFault_Handler+0x4>

08001884 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018b2:	f000 f9ad 	bl	8001c10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}

080018ba <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b086      	sub	sp, #24
 80018be:	af00      	add	r7, sp, #0
 80018c0:	60f8      	str	r0, [r7, #12]
 80018c2:	60b9      	str	r1, [r7, #8]
 80018c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c6:	2300      	movs	r3, #0
 80018c8:	617b      	str	r3, [r7, #20]
 80018ca:	e00a      	b.n	80018e2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018cc:	f3af 8000 	nop.w
 80018d0:	4601      	mov	r1, r0
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	1c5a      	adds	r2, r3, #1
 80018d6:	60ba      	str	r2, [r7, #8]
 80018d8:	b2ca      	uxtb	r2, r1
 80018da:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	3301      	adds	r3, #1
 80018e0:	617b      	str	r3, [r7, #20]
 80018e2:	697a      	ldr	r2, [r7, #20]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	dbf0      	blt.n	80018cc <_read+0x12>
  }

  return len;
 80018ea:	687b      	ldr	r3, [r7, #4]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3718      	adds	r7, #24
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]
 8001904:	e009      	b.n	800191a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	1c5a      	adds	r2, r3, #1
 800190a:	60ba      	str	r2, [r7, #8]
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	3301      	adds	r3, #1
 8001918:	617b      	str	r3, [r7, #20]
 800191a:	697a      	ldr	r2, [r7, #20]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	429a      	cmp	r2, r3
 8001920:	dbf1      	blt.n	8001906 <_write+0x12>
  }
  return len;
 8001922:	687b      	ldr	r3, [r7, #4]
}
 8001924:	4618      	mov	r0, r3
 8001926:	3718      	adds	r7, #24
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <_close>:

int _close(int file)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001934:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001938:	4618      	mov	r0, r3
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001954:	605a      	str	r2, [r3, #4]
  return 0;
 8001956:	2300      	movs	r3, #0
}
 8001958:	4618      	mov	r0, r3
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <_isatty>:

int _isatty(int file)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800196c:	2301      	movs	r3, #1
}
 800196e:	4618      	mov	r0, r3
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800197a:	b480      	push	{r7}
 800197c:	b085      	sub	sp, #20
 800197e:	af00      	add	r7, sp, #0
 8001980:	60f8      	str	r0, [r7, #12]
 8001982:	60b9      	str	r1, [r7, #8]
 8001984:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001986:	2300      	movs	r3, #0
}
 8001988:	4618      	mov	r0, r3
 800198a:	3714      	adds	r7, #20
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800199c:	4a14      	ldr	r2, [pc, #80]	@ (80019f0 <_sbrk+0x5c>)
 800199e:	4b15      	ldr	r3, [pc, #84]	@ (80019f4 <_sbrk+0x60>)
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019a8:	4b13      	ldr	r3, [pc, #76]	@ (80019f8 <_sbrk+0x64>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d102      	bne.n	80019b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019b0:	4b11      	ldr	r3, [pc, #68]	@ (80019f8 <_sbrk+0x64>)
 80019b2:	4a12      	ldr	r2, [pc, #72]	@ (80019fc <_sbrk+0x68>)
 80019b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019b6:	4b10      	ldr	r3, [pc, #64]	@ (80019f8 <_sbrk+0x64>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4413      	add	r3, r2
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d207      	bcs.n	80019d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019c4:	f008 ff5a 	bl	800a87c <__errno>
 80019c8:	4603      	mov	r3, r0
 80019ca:	220c      	movs	r2, #12
 80019cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ce:	f04f 33ff 	mov.w	r3, #4294967295
 80019d2:	e009      	b.n	80019e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019d4:	4b08      	ldr	r3, [pc, #32]	@ (80019f8 <_sbrk+0x64>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019da:	4b07      	ldr	r3, [pc, #28]	@ (80019f8 <_sbrk+0x64>)
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4413      	add	r3, r2
 80019e2:	4a05      	ldr	r2, [pc, #20]	@ (80019f8 <_sbrk+0x64>)
 80019e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019e6:	68fb      	ldr	r3, [r7, #12]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3718      	adds	r7, #24
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	20040000 	.word	0x20040000
 80019f4:	00000400 	.word	0x00000400
 80019f8:	2000022c 	.word	0x2000022c
 80019fc:	20000720 	.word	0x20000720

08001a00 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a04:	4b18      	ldr	r3, [pc, #96]	@ (8001a68 <SystemInit+0x68>)
 8001a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a0a:	4a17      	ldr	r2, [pc, #92]	@ (8001a68 <SystemInit+0x68>)
 8001a0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001a14:	4b15      	ldr	r3, [pc, #84]	@ (8001a6c <SystemInit+0x6c>)
 8001a16:	2201      	movs	r2, #1
 8001a18:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001a1a:	4b14      	ldr	r3, [pc, #80]	@ (8001a6c <SystemInit+0x6c>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001a20:	4b12      	ldr	r3, [pc, #72]	@ (8001a6c <SystemInit+0x6c>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001a26:	4b11      	ldr	r3, [pc, #68]	@ (8001a6c <SystemInit+0x6c>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001a2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001a6c <SystemInit+0x6c>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a0e      	ldr	r2, [pc, #56]	@ (8001a6c <SystemInit+0x6c>)
 8001a32:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001a36:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001a3a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a6c <SystemInit+0x6c>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001a42:	4b0a      	ldr	r3, [pc, #40]	@ (8001a6c <SystemInit+0x6c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a09      	ldr	r2, [pc, #36]	@ (8001a6c <SystemInit+0x6c>)
 8001a48:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a4c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001a4e:	4b07      	ldr	r3, [pc, #28]	@ (8001a6c <SystemInit+0x6c>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a54:	4b04      	ldr	r3, [pc, #16]	@ (8001a68 <SystemInit+0x68>)
 8001a56:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001a5a:	609a      	str	r2, [r3, #8]
  #endif
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	e000ed00 	.word	0xe000ed00
 8001a6c:	46020c00 	.word	0x46020c00

08001a70 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a70:	480d      	ldr	r0, [pc, #52]	@ (8001aa8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a72:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a74:	f7ff ffc4 	bl	8001a00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a78:	480c      	ldr	r0, [pc, #48]	@ (8001aac <LoopForever+0x6>)
  ldr r1, =_edata
 8001a7a:	490d      	ldr	r1, [pc, #52]	@ (8001ab0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a7c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ab4 <LoopForever+0xe>)
  movs r3, #0
 8001a7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a80:	e002      	b.n	8001a88 <LoopCopyDataInit>

08001a82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a86:	3304      	adds	r3, #4

08001a88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a8c:	d3f9      	bcc.n	8001a82 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ab8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a90:	4c0a      	ldr	r4, [pc, #40]	@ (8001abc <LoopForever+0x16>)
  movs r3, #0
 8001a92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a94:	e001      	b.n	8001a9a <LoopFillZerobss>

08001a96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a98:	3204      	adds	r2, #4

08001a9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a9c:	d3fb      	bcc.n	8001a96 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001a9e:	f008 fef3 	bl	800a888 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001aa2:	f7ff fc23 	bl	80012ec <main>

08001aa6 <LoopForever>:

LoopForever:
    b LoopForever
 8001aa6:	e7fe      	b.n	8001aa6 <LoopForever>
  ldr   r0, =_estack
 8001aa8:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001aac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ab0:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8001ab4:	0800bce0 	.word	0x0800bce0
  ldr r2, =_sbss
 8001ab8:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8001abc:	2000071c 	.word	0x2000071c

08001ac0 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ac0:	e7fe      	b.n	8001ac0 <ADC1_IRQHandler>
	...

08001ac4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ac8:	4b12      	ldr	r3, [pc, #72]	@ (8001b14 <HAL_Init+0x50>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a11      	ldr	r2, [pc, #68]	@ (8001b14 <HAL_Init+0x50>)
 8001ace:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ad2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ad4:	2003      	movs	r0, #3
 8001ad6:	f000 f98c 	bl	8001df2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001ada:	f002 f915 	bl	8003d08 <HAL_RCC_GetSysClockFreq>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8001b18 <HAL_Init+0x54>)
 8001ae2:	6a1b      	ldr	r3, [r3, #32]
 8001ae4:	f003 030f 	and.w	r3, r3, #15
 8001ae8:	490c      	ldr	r1, [pc, #48]	@ (8001b1c <HAL_Init+0x58>)
 8001aea:	5ccb      	ldrb	r3, [r1, r3]
 8001aec:	fa22 f303 	lsr.w	r3, r2, r3
 8001af0:	4a0b      	ldr	r2, [pc, #44]	@ (8001b20 <HAL_Init+0x5c>)
 8001af2:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001af4:	2004      	movs	r0, #4
 8001af6:	f000 f9d1 	bl	8001e9c <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001afa:	200f      	movs	r0, #15
 8001afc:	f000 f812 	bl	8001b24 <HAL_InitTick>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e002      	b.n	8001b10 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001b0a:	f7ff fdd7 	bl	80016bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40022000 	.word	0x40022000
 8001b18:	46020c00 	.word	0x46020c00
 8001b1c:	0800b97c 	.word	0x0800b97c
 8001b20:	2000001c 	.word	0x2000001c

08001b24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001b30:	4b33      	ldr	r3, [pc, #204]	@ (8001c00 <HAL_InitTick+0xdc>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d101      	bne.n	8001b3c <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e05c      	b.n	8001bf6 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001b3c:	4b31      	ldr	r3, [pc, #196]	@ (8001c04 <HAL_InitTick+0xe0>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0304 	and.w	r3, r3, #4
 8001b44:	2b04      	cmp	r3, #4
 8001b46:	d10c      	bne.n	8001b62 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001b48:	4b2f      	ldr	r3, [pc, #188]	@ (8001c08 <HAL_InitTick+0xe4>)
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	4b2c      	ldr	r3, [pc, #176]	@ (8001c00 <HAL_InitTick+0xdc>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	4619      	mov	r1, r3
 8001b52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b56:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	e037      	b.n	8001bd2 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001b62:	f000 f9f3 	bl	8001f4c <HAL_SYSTICK_GetCLKSourceConfig>
 8001b66:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d023      	beq.n	8001bb6 <HAL_InitTick+0x92>
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d82d      	bhi.n	8001bd0 <HAL_InitTick+0xac>
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d003      	beq.n	8001b82 <HAL_InitTick+0x5e>
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d00d      	beq.n	8001b9c <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001b80:	e026      	b.n	8001bd0 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001b82:	4b21      	ldr	r3, [pc, #132]	@ (8001c08 <HAL_InitTick+0xe4>)
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	4b1e      	ldr	r3, [pc, #120]	@ (8001c00 <HAL_InitTick+0xdc>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001b90:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b98:	60fb      	str	r3, [r7, #12]
        break;
 8001b9a:	e01a      	b.n	8001bd2 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001b9c:	4b18      	ldr	r3, [pc, #96]	@ (8001c00 <HAL_InitTick+0xdc>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ba6:	fbb3 f3f2 	udiv	r3, r3, r2
 8001baa:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb2:	60fb      	str	r3, [r7, #12]
        break;
 8001bb4:	e00d      	b.n	8001bd2 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001bb6:	4b12      	ldr	r3, [pc, #72]	@ (8001c00 <HAL_InitTick+0xdc>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8001bc4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bcc:	60fb      	str	r3, [r7, #12]
        break;
 8001bce:	e000      	b.n	8001bd2 <HAL_InitTick+0xae>
        break;
 8001bd0:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001bd2:	68f8      	ldr	r0, [r7, #12]
 8001bd4:	f000 f940 	bl	8001e58 <HAL_SYSTICK_Config>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e009      	b.n	8001bf6 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001be2:	2200      	movs	r2, #0
 8001be4:	6879      	ldr	r1, [r7, #4]
 8001be6:	f04f 30ff 	mov.w	r0, #4294967295
 8001bea:	f000 f90d 	bl	8001e08 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001bee:	4a07      	ldr	r2, [pc, #28]	@ (8001c0c <HAL_InitTick+0xe8>)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000024 	.word	0x20000024
 8001c04:	e000e010 	.word	0xe000e010
 8001c08:	2000001c 	.word	0x2000001c
 8001c0c:	20000020 	.word	0x20000020

08001c10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c14:	4b06      	ldr	r3, [pc, #24]	@ (8001c30 <HAL_IncTick+0x20>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	461a      	mov	r2, r3
 8001c1a:	4b06      	ldr	r3, [pc, #24]	@ (8001c34 <HAL_IncTick+0x24>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4413      	add	r3, r2
 8001c20:	4a04      	ldr	r2, [pc, #16]	@ (8001c34 <HAL_IncTick+0x24>)
 8001c22:	6013      	str	r3, [r2, #0]
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	20000024 	.word	0x20000024
 8001c34:	20000230 	.word	0x20000230

08001c38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c3c:	4b03      	ldr	r3, [pc, #12]	@ (8001c4c <HAL_GetTick+0x14>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	20000230 	.word	0x20000230

08001c50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c58:	f7ff ffee 	bl	8001c38 <HAL_GetTick>
 8001c5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c68:	d005      	beq.n	8001c76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c94 <HAL_Delay+0x44>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	461a      	mov	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	4413      	add	r3, r2
 8001c74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c76:	bf00      	nop
 8001c78:	f7ff ffde 	bl	8001c38 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d8f7      	bhi.n	8001c78 <HAL_Delay+0x28>
  {
  }


}
 8001c88:	bf00      	nop
 8001c8a:	bf00      	nop
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000024 	.word	0x20000024

08001c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8001cdc <__NVIC_SetPriorityGrouping+0x44>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cae:	68ba      	ldr	r2, [r7, #8]
 8001cb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cc0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cca:	4a04      	ldr	r2, [pc, #16]	@ (8001cdc <__NVIC_SetPriorityGrouping+0x44>)
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	60d3      	str	r3, [r2, #12]
}
 8001cd0:	bf00      	nop
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ce4:	4b04      	ldr	r3, [pc, #16]	@ (8001cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	0a1b      	lsrs	r3, r3, #8
 8001cea:	f003 0307 	and.w	r3, r3, #7
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	e000ed00 	.word	0xe000ed00

08001cfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	db0b      	blt.n	8001d26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
 8001d10:	f003 021f 	and.w	r2, r3, #31
 8001d14:	4907      	ldr	r1, [pc, #28]	@ (8001d34 <__NVIC_EnableIRQ+0x38>)
 8001d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1a:	095b      	lsrs	r3, r3, #5
 8001d1c:	2001      	movs	r0, #1
 8001d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	e000e100 	.word	0xe000e100

08001d38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	6039      	str	r1, [r7, #0]
 8001d42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	db0a      	blt.n	8001d62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	b2da      	uxtb	r2, r3
 8001d50:	490c      	ldr	r1, [pc, #48]	@ (8001d84 <__NVIC_SetPriority+0x4c>)
 8001d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d56:	0112      	lsls	r2, r2, #4
 8001d58:	b2d2      	uxtb	r2, r2
 8001d5a:	440b      	add	r3, r1
 8001d5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d60:	e00a      	b.n	8001d78 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	b2da      	uxtb	r2, r3
 8001d66:	4908      	ldr	r1, [pc, #32]	@ (8001d88 <__NVIC_SetPriority+0x50>)
 8001d68:	79fb      	ldrb	r3, [r7, #7]
 8001d6a:	f003 030f 	and.w	r3, r3, #15
 8001d6e:	3b04      	subs	r3, #4
 8001d70:	0112      	lsls	r2, r2, #4
 8001d72:	b2d2      	uxtb	r2, r2
 8001d74:	440b      	add	r3, r1
 8001d76:	761a      	strb	r2, [r3, #24]
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	e000e100 	.word	0xe000e100
 8001d88:	e000ed00 	.word	0xe000ed00

08001d8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b089      	sub	sp, #36	@ 0x24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	f1c3 0307 	rsb	r3, r3, #7
 8001da6:	2b04      	cmp	r3, #4
 8001da8:	bf28      	it	cs
 8001daa:	2304      	movcs	r3, #4
 8001dac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	3304      	adds	r3, #4
 8001db2:	2b06      	cmp	r3, #6
 8001db4:	d902      	bls.n	8001dbc <NVIC_EncodePriority+0x30>
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	3b03      	subs	r3, #3
 8001dba:	e000      	b.n	8001dbe <NVIC_EncodePriority+0x32>
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43da      	mvns	r2, r3
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	401a      	ands	r2, r3
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	fa01 f303 	lsl.w	r3, r1, r3
 8001dde:	43d9      	mvns	r1, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de4:	4313      	orrs	r3, r2
         );
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3724      	adds	r7, #36	@ 0x24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b082      	sub	sp, #8
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7ff ff4c 	bl	8001c98 <__NVIC_SetPriorityGrouping>
}
 8001e00:	bf00      	nop
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
 8001e14:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e16:	f7ff ff63 	bl	8001ce0 <__NVIC_GetPriorityGrouping>
 8001e1a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	68b9      	ldr	r1, [r7, #8]
 8001e20:	6978      	ldr	r0, [r7, #20]
 8001e22:	f7ff ffb3 	bl	8001d8c <NVIC_EncodePriority>
 8001e26:	4602      	mov	r2, r0
 8001e28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e2c:	4611      	mov	r1, r2
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff ff82 	bl	8001d38 <__NVIC_SetPriority>
}
 8001e34:	bf00      	nop
 8001e36:	3718      	adds	r7, #24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff ff56 	bl	8001cfc <__NVIC_EnableIRQ>
}
 8001e50:	bf00      	nop
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e68:	d301      	bcc.n	8001e6e <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e00d      	b.n	8001e8a <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001e6e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e98 <HAL_SYSTICK_Config+0x40>)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001e76:	4b08      	ldr	r3, [pc, #32]	@ (8001e98 <HAL_SYSTICK_Config+0x40>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001e7c:	4b06      	ldr	r3, [pc, #24]	@ (8001e98 <HAL_SYSTICK_Config+0x40>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a05      	ldr	r2, [pc, #20]	@ (8001e98 <HAL_SYSTICK_Config+0x40>)
 8001e82:	f043 0303 	orr.w	r3, r3, #3
 8001e86:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	e000e010 	.word	0xe000e010

08001e9c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b04      	cmp	r3, #4
 8001ea8:	d844      	bhi.n	8001f34 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001eaa:	a201      	add	r2, pc, #4	@ (adr r2, 8001eb0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eb0:	08001ed3 	.word	0x08001ed3
 8001eb4:	08001ef1 	.word	0x08001ef1
 8001eb8:	08001f13 	.word	0x08001f13
 8001ebc:	08001f35 	.word	0x08001f35
 8001ec0:	08001ec5 	.word	0x08001ec5
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001ec4:	4b1f      	ldr	r3, [pc, #124]	@ (8001f44 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a1e      	ldr	r2, [pc, #120]	@ (8001f44 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001eca:	f043 0304 	orr.w	r3, r3, #4
 8001ece:	6013      	str	r3, [r2, #0]
      break;
 8001ed0:	e031      	b.n	8001f36 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001ed2:	4b1c      	ldr	r3, [pc, #112]	@ (8001f44 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a1b      	ldr	r2, [pc, #108]	@ (8001f44 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001ed8:	f023 0304 	bic.w	r3, r3, #4
 8001edc:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8001ede:	4b1a      	ldr	r3, [pc, #104]	@ (8001f48 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001ee0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ee4:	4a18      	ldr	r2, [pc, #96]	@ (8001f48 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001ee6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001eea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001eee:	e022      	b.n	8001f36 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001ef0:	4b14      	ldr	r3, [pc, #80]	@ (8001f44 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a13      	ldr	r2, [pc, #76]	@ (8001f44 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001ef6:	f023 0304 	bic.w	r3, r3, #4
 8001efa:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8001efc:	4b12      	ldr	r3, [pc, #72]	@ (8001f48 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001efe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f02:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001f06:	4a10      	ldr	r2, [pc, #64]	@ (8001f48 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001f08:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001f0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001f10:	e011      	b.n	8001f36 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001f12:	4b0c      	ldr	r3, [pc, #48]	@ (8001f44 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a0b      	ldr	r2, [pc, #44]	@ (8001f44 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f18:	f023 0304 	bic.w	r3, r3, #4
 8001f1c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8001f1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f48 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001f20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f24:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001f28:	4a07      	ldr	r2, [pc, #28]	@ (8001f48 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001f2a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001f2e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001f32:	e000      	b.n	8001f36 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001f34:	bf00      	nop
  }
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	e000e010 	.word	0xe000e010
 8001f48:	46020c00 	.word	0x46020c00

08001f4c <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8001f52:	4b19      	ldr	r3, [pc, #100]	@ (8001fb8 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0304 	and.w	r3, r3, #4
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d002      	beq.n	8001f64 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8001f5e:	2304      	movs	r3, #4
 8001f60:	607b      	str	r3, [r7, #4]
 8001f62:	e021      	b.n	8001fa8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8001f64:	4b15      	ldr	r3, [pc, #84]	@ (8001fbc <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8001f66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f6a:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8001f6e:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001f76:	d011      	beq.n	8001f9c <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001f7e:	d810      	bhi.n	8001fa2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d004      	beq.n	8001f90 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f8c:	d003      	beq.n	8001f96 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8001f8e:	e008      	b.n	8001fa2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001f90:	2300      	movs	r3, #0
 8001f92:	607b      	str	r3, [r7, #4]
        break;
 8001f94:	e008      	b.n	8001fa8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8001f96:	2301      	movs	r3, #1
 8001f98:	607b      	str	r3, [r7, #4]
        break;
 8001f9a:	e005      	b.n	8001fa8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	607b      	str	r3, [r7, #4]
        break;
 8001fa0:	e002      	b.n	8001fa8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	607b      	str	r3, [r7, #4]
        break;
 8001fa6:	bf00      	nop
    }
  }
  return systick_source;
 8001fa8:	687b      	ldr	r3, [r7, #4]
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	e000e010 	.word	0xe000e010
 8001fbc:	46020c00 	.word	0x46020c00

08001fc0 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d101      	bne.n	8001fd4 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e02b      	b.n	800202c <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001fdc:	f023 030f 	bic.w	r3, r3, #15
 8001fe0:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fea:	3b50      	subs	r3, #80	@ 0x50
 8001fec:	09db      	lsrs	r3, r3, #7
 8001fee:	f003 031f 	and.w	r3, r3, #31
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	f003 0310 	and.w	r3, r3, #16
 8002000:	2b00      	cmp	r3, #0
 8002002:	d012      	beq.n	800202a <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	f003 0311 	and.w	r3, r3, #17
 800200a:	2b11      	cmp	r3, #17
 800200c:	d106      	bne.n	800201c <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	685a      	ldr	r2, [r3, #4]
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	431a      	orrs	r2, r3
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	e006      	b.n	800202a <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	685a      	ldr	r2, [r3, #4]
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	43db      	mvns	r3, r3
 8002024:	401a      	ands	r2, r3
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	3714      	adds	r7, #20
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8002040:	f7ff fdfa 	bl	8001c38 <HAL_GetTick>
 8002044:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d101      	bne.n	8002050 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e0db      	b.n	8002208 <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a6e      	ldr	r2, [pc, #440]	@ (8002210 <HAL_DMAEx_List_Init+0x1d8>)
 8002056:	4293      	cmp	r3, r2
 8002058:	f000 809f 	beq.w	800219a <HAL_DMAEx_List_Init+0x162>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a6c      	ldr	r2, [pc, #432]	@ (8002214 <HAL_DMAEx_List_Init+0x1dc>)
 8002062:	4293      	cmp	r3, r2
 8002064:	f000 8099 	beq.w	800219a <HAL_DMAEx_List_Init+0x162>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a6a      	ldr	r2, [pc, #424]	@ (8002218 <HAL_DMAEx_List_Init+0x1e0>)
 800206e:	4293      	cmp	r3, r2
 8002070:	f000 8093 	beq.w	800219a <HAL_DMAEx_List_Init+0x162>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a68      	ldr	r2, [pc, #416]	@ (800221c <HAL_DMAEx_List_Init+0x1e4>)
 800207a:	4293      	cmp	r3, r2
 800207c:	f000 808d 	beq.w	800219a <HAL_DMAEx_List_Init+0x162>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a66      	ldr	r2, [pc, #408]	@ (8002220 <HAL_DMAEx_List_Init+0x1e8>)
 8002086:	4293      	cmp	r3, r2
 8002088:	f000 8087 	beq.w	800219a <HAL_DMAEx_List_Init+0x162>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a64      	ldr	r2, [pc, #400]	@ (8002224 <HAL_DMAEx_List_Init+0x1ec>)
 8002092:	4293      	cmp	r3, r2
 8002094:	f000 8081 	beq.w	800219a <HAL_DMAEx_List_Init+0x162>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a62      	ldr	r2, [pc, #392]	@ (8002228 <HAL_DMAEx_List_Init+0x1f0>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d07b      	beq.n	800219a <HAL_DMAEx_List_Init+0x162>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a61      	ldr	r2, [pc, #388]	@ (800222c <HAL_DMAEx_List_Init+0x1f4>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d076      	beq.n	800219a <HAL_DMAEx_List_Init+0x162>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a5f      	ldr	r2, [pc, #380]	@ (8002230 <HAL_DMAEx_List_Init+0x1f8>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d071      	beq.n	800219a <HAL_DMAEx_List_Init+0x162>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a5e      	ldr	r2, [pc, #376]	@ (8002234 <HAL_DMAEx_List_Init+0x1fc>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d06c      	beq.n	800219a <HAL_DMAEx_List_Init+0x162>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a5c      	ldr	r2, [pc, #368]	@ (8002238 <HAL_DMAEx_List_Init+0x200>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d067      	beq.n	800219a <HAL_DMAEx_List_Init+0x162>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a5b      	ldr	r2, [pc, #364]	@ (800223c <HAL_DMAEx_List_Init+0x204>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d062      	beq.n	800219a <HAL_DMAEx_List_Init+0x162>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a59      	ldr	r2, [pc, #356]	@ (8002240 <HAL_DMAEx_List_Init+0x208>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d05d      	beq.n	800219a <HAL_DMAEx_List_Init+0x162>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a58      	ldr	r2, [pc, #352]	@ (8002244 <HAL_DMAEx_List_Init+0x20c>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d058      	beq.n	800219a <HAL_DMAEx_List_Init+0x162>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a56      	ldr	r2, [pc, #344]	@ (8002248 <HAL_DMAEx_List_Init+0x210>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d053      	beq.n	800219a <HAL_DMAEx_List_Init+0x162>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a55      	ldr	r2, [pc, #340]	@ (800224c <HAL_DMAEx_List_Init+0x214>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d04e      	beq.n	800219a <HAL_DMAEx_List_Init+0x162>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a53      	ldr	r2, [pc, #332]	@ (8002250 <HAL_DMAEx_List_Init+0x218>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d049      	beq.n	800219a <HAL_DMAEx_List_Init+0x162>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a52      	ldr	r2, [pc, #328]	@ (8002254 <HAL_DMAEx_List_Init+0x21c>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d044      	beq.n	800219a <HAL_DMAEx_List_Init+0x162>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a50      	ldr	r2, [pc, #320]	@ (8002258 <HAL_DMAEx_List_Init+0x220>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d03f      	beq.n	800219a <HAL_DMAEx_List_Init+0x162>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a4f      	ldr	r2, [pc, #316]	@ (800225c <HAL_DMAEx_List_Init+0x224>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d03a      	beq.n	800219a <HAL_DMAEx_List_Init+0x162>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a4d      	ldr	r2, [pc, #308]	@ (8002260 <HAL_DMAEx_List_Init+0x228>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d035      	beq.n	800219a <HAL_DMAEx_List_Init+0x162>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a4c      	ldr	r2, [pc, #304]	@ (8002264 <HAL_DMAEx_List_Init+0x22c>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d030      	beq.n	800219a <HAL_DMAEx_List_Init+0x162>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a4a      	ldr	r2, [pc, #296]	@ (8002268 <HAL_DMAEx_List_Init+0x230>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d02b      	beq.n	800219a <HAL_DMAEx_List_Init+0x162>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a49      	ldr	r2, [pc, #292]	@ (800226c <HAL_DMAEx_List_Init+0x234>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d026      	beq.n	800219a <HAL_DMAEx_List_Init+0x162>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a47      	ldr	r2, [pc, #284]	@ (8002270 <HAL_DMAEx_List_Init+0x238>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d021      	beq.n	800219a <HAL_DMAEx_List_Init+0x162>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a46      	ldr	r2, [pc, #280]	@ (8002274 <HAL_DMAEx_List_Init+0x23c>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d01c      	beq.n	800219a <HAL_DMAEx_List_Init+0x162>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a44      	ldr	r2, [pc, #272]	@ (8002278 <HAL_DMAEx_List_Init+0x240>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d017      	beq.n	800219a <HAL_DMAEx_List_Init+0x162>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a43      	ldr	r2, [pc, #268]	@ (800227c <HAL_DMAEx_List_Init+0x244>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d012      	beq.n	800219a <HAL_DMAEx_List_Init+0x162>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a41      	ldr	r2, [pc, #260]	@ (8002280 <HAL_DMAEx_List_Init+0x248>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d00d      	beq.n	800219a <HAL_DMAEx_List_Init+0x162>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a40      	ldr	r2, [pc, #256]	@ (8002284 <HAL_DMAEx_List_Init+0x24c>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d008      	beq.n	800219a <HAL_DMAEx_List_Init+0x162>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a3e      	ldr	r2, [pc, #248]	@ (8002288 <HAL_DMAEx_List_Init+0x250>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d003      	beq.n	800219a <HAL_DMAEx_List_Init+0x162>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a3d      	ldr	r2, [pc, #244]	@ (800228c <HAL_DMAEx_List_Init+0x254>)
 8002198:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2202      	movs	r2, #2
 80021a6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	695a      	ldr	r2, [r3, #20]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f042 0206 	orr.w	r2, r2, #6
 80021b8:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80021ba:	e00f      	b.n	80021dc <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80021bc:	f7ff fd3c 	bl	8001c38 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b05      	cmp	r3, #5
 80021c8:	d908      	bls.n	80021dc <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2210      	movs	r2, #16
 80021ce:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2203      	movs	r2, #3
 80021d4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e015      	b.n	8002208 <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1e8      	bne.n	80021bc <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 f850 	bl	8002290 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	3710      	adds	r7, #16
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	40020050 	.word	0x40020050
 8002214:	50020050 	.word	0x50020050
 8002218:	400200d0 	.word	0x400200d0
 800221c:	500200d0 	.word	0x500200d0
 8002220:	40020150 	.word	0x40020150
 8002224:	50020150 	.word	0x50020150
 8002228:	400201d0 	.word	0x400201d0
 800222c:	500201d0 	.word	0x500201d0
 8002230:	40020250 	.word	0x40020250
 8002234:	50020250 	.word	0x50020250
 8002238:	400202d0 	.word	0x400202d0
 800223c:	500202d0 	.word	0x500202d0
 8002240:	40020350 	.word	0x40020350
 8002244:	50020350 	.word	0x50020350
 8002248:	400203d0 	.word	0x400203d0
 800224c:	500203d0 	.word	0x500203d0
 8002250:	40020450 	.word	0x40020450
 8002254:	50020450 	.word	0x50020450
 8002258:	400204d0 	.word	0x400204d0
 800225c:	500204d0 	.word	0x500204d0
 8002260:	40020550 	.word	0x40020550
 8002264:	50020550 	.word	0x50020550
 8002268:	400205d0 	.word	0x400205d0
 800226c:	500205d0 	.word	0x500205d0
 8002270:	40020650 	.word	0x40020650
 8002274:	50020650 	.word	0x50020650
 8002278:	400206d0 	.word	0x400206d0
 800227c:	500206d0 	.word	0x500206d0
 8002280:	40020750 	.word	0x40020750
 8002284:	50020750 	.word	0x50020750
 8002288:	400207d0 	.word	0x400207d0
 800228c:	500207d0 	.word	0x500207d0

08002290 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022a0:	4313      	orrs	r3, r2
 80022a2:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a85      	ldr	r2, [pc, #532]	@ (80024c0 <DMA_List_Init+0x230>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	f000 80a0 	beq.w	80023f0 <DMA_List_Init+0x160>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a83      	ldr	r2, [pc, #524]	@ (80024c4 <DMA_List_Init+0x234>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	f000 809a 	beq.w	80023f0 <DMA_List_Init+0x160>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a81      	ldr	r2, [pc, #516]	@ (80024c8 <DMA_List_Init+0x238>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	f000 8094 	beq.w	80023f0 <DMA_List_Init+0x160>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a7f      	ldr	r2, [pc, #508]	@ (80024cc <DMA_List_Init+0x23c>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	f000 808e 	beq.w	80023f0 <DMA_List_Init+0x160>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a7d      	ldr	r2, [pc, #500]	@ (80024d0 <DMA_List_Init+0x240>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	f000 8088 	beq.w	80023f0 <DMA_List_Init+0x160>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a7b      	ldr	r2, [pc, #492]	@ (80024d4 <DMA_List_Init+0x244>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	f000 8082 	beq.w	80023f0 <DMA_List_Init+0x160>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a79      	ldr	r2, [pc, #484]	@ (80024d8 <DMA_List_Init+0x248>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d07c      	beq.n	80023f0 <DMA_List_Init+0x160>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a78      	ldr	r2, [pc, #480]	@ (80024dc <DMA_List_Init+0x24c>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d077      	beq.n	80023f0 <DMA_List_Init+0x160>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a76      	ldr	r2, [pc, #472]	@ (80024e0 <DMA_List_Init+0x250>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d072      	beq.n	80023f0 <DMA_List_Init+0x160>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a75      	ldr	r2, [pc, #468]	@ (80024e4 <DMA_List_Init+0x254>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d06d      	beq.n	80023f0 <DMA_List_Init+0x160>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a73      	ldr	r2, [pc, #460]	@ (80024e8 <DMA_List_Init+0x258>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d068      	beq.n	80023f0 <DMA_List_Init+0x160>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a72      	ldr	r2, [pc, #456]	@ (80024ec <DMA_List_Init+0x25c>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d063      	beq.n	80023f0 <DMA_List_Init+0x160>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a70      	ldr	r2, [pc, #448]	@ (80024f0 <DMA_List_Init+0x260>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d05e      	beq.n	80023f0 <DMA_List_Init+0x160>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a6f      	ldr	r2, [pc, #444]	@ (80024f4 <DMA_List_Init+0x264>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d059      	beq.n	80023f0 <DMA_List_Init+0x160>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a6d      	ldr	r2, [pc, #436]	@ (80024f8 <DMA_List_Init+0x268>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d054      	beq.n	80023f0 <DMA_List_Init+0x160>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a6c      	ldr	r2, [pc, #432]	@ (80024fc <DMA_List_Init+0x26c>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d04f      	beq.n	80023f0 <DMA_List_Init+0x160>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a6a      	ldr	r2, [pc, #424]	@ (8002500 <DMA_List_Init+0x270>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d04a      	beq.n	80023f0 <DMA_List_Init+0x160>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a69      	ldr	r2, [pc, #420]	@ (8002504 <DMA_List_Init+0x274>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d045      	beq.n	80023f0 <DMA_List_Init+0x160>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a67      	ldr	r2, [pc, #412]	@ (8002508 <DMA_List_Init+0x278>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d040      	beq.n	80023f0 <DMA_List_Init+0x160>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a66      	ldr	r2, [pc, #408]	@ (800250c <DMA_List_Init+0x27c>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d03b      	beq.n	80023f0 <DMA_List_Init+0x160>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a64      	ldr	r2, [pc, #400]	@ (8002510 <DMA_List_Init+0x280>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d036      	beq.n	80023f0 <DMA_List_Init+0x160>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a63      	ldr	r2, [pc, #396]	@ (8002514 <DMA_List_Init+0x284>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d031      	beq.n	80023f0 <DMA_List_Init+0x160>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a61      	ldr	r2, [pc, #388]	@ (8002518 <DMA_List_Init+0x288>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d02c      	beq.n	80023f0 <DMA_List_Init+0x160>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a60      	ldr	r2, [pc, #384]	@ (800251c <DMA_List_Init+0x28c>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d027      	beq.n	80023f0 <DMA_List_Init+0x160>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a5e      	ldr	r2, [pc, #376]	@ (8002520 <DMA_List_Init+0x290>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d022      	beq.n	80023f0 <DMA_List_Init+0x160>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a5d      	ldr	r2, [pc, #372]	@ (8002524 <DMA_List_Init+0x294>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d01d      	beq.n	80023f0 <DMA_List_Init+0x160>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a5b      	ldr	r2, [pc, #364]	@ (8002528 <DMA_List_Init+0x298>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d018      	beq.n	80023f0 <DMA_List_Init+0x160>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a5a      	ldr	r2, [pc, #360]	@ (800252c <DMA_List_Init+0x29c>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d013      	beq.n	80023f0 <DMA_List_Init+0x160>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a58      	ldr	r2, [pc, #352]	@ (8002530 <DMA_List_Init+0x2a0>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d00e      	beq.n	80023f0 <DMA_List_Init+0x160>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a57      	ldr	r2, [pc, #348]	@ (8002534 <DMA_List_Init+0x2a4>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d009      	beq.n	80023f0 <DMA_List_Init+0x160>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a55      	ldr	r2, [pc, #340]	@ (8002538 <DMA_List_Init+0x2a8>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d004      	beq.n	80023f0 <DMA_List_Init+0x160>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a54      	ldr	r2, [pc, #336]	@ (800253c <DMA_List_Init+0x2ac>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d101      	bne.n	80023f4 <DMA_List_Init+0x164>
 80023f0:	2301      	movs	r3, #1
 80023f2:	e000      	b.n	80023f6 <DMA_List_Init+0x166>
 80023f4:	2300      	movs	r3, #0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d004      	beq.n	8002404 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	4313      	orrs	r3, r2
 8002402:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	430a      	orrs	r2, r1
 8002416:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2200      	movs	r2, #0
 800241e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002428:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2200      	movs	r2, #0
 8002430:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2200      	movs	r2, #0
 8002438:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2200      	movs	r2, #0
 8002440:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a36      	ldr	r2, [pc, #216]	@ (8002520 <DMA_List_Init+0x290>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d022      	beq.n	8002492 <DMA_List_Init+0x202>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a34      	ldr	r2, [pc, #208]	@ (8002524 <DMA_List_Init+0x294>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d01d      	beq.n	8002492 <DMA_List_Init+0x202>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a33      	ldr	r2, [pc, #204]	@ (8002528 <DMA_List_Init+0x298>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d018      	beq.n	8002492 <DMA_List_Init+0x202>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a31      	ldr	r2, [pc, #196]	@ (800252c <DMA_List_Init+0x29c>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d013      	beq.n	8002492 <DMA_List_Init+0x202>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a30      	ldr	r2, [pc, #192]	@ (8002530 <DMA_List_Init+0x2a0>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d00e      	beq.n	8002492 <DMA_List_Init+0x202>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a2e      	ldr	r2, [pc, #184]	@ (8002534 <DMA_List_Init+0x2a4>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d009      	beq.n	8002492 <DMA_List_Init+0x202>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a2d      	ldr	r2, [pc, #180]	@ (8002538 <DMA_List_Init+0x2a8>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d004      	beq.n	8002492 <DMA_List_Init+0x202>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a2b      	ldr	r2, [pc, #172]	@ (800253c <DMA_List_Init+0x2ac>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d101      	bne.n	8002496 <DMA_List_Init+0x206>
 8002492:	2301      	movs	r3, #1
 8002494:	e000      	b.n	8002498 <DMA_List_Init+0x208>
 8002496:	2300      	movs	r3, #0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d007      	beq.n	80024ac <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2200      	movs	r2, #0
 80024a2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2200      	movs	r2, #0
 80024aa:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2200      	movs	r2, #0
 80024b2:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80024b4:	bf00      	nop
 80024b6:	3714      	adds	r7, #20
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	40020050 	.word	0x40020050
 80024c4:	50020050 	.word	0x50020050
 80024c8:	400200d0 	.word	0x400200d0
 80024cc:	500200d0 	.word	0x500200d0
 80024d0:	40020150 	.word	0x40020150
 80024d4:	50020150 	.word	0x50020150
 80024d8:	400201d0 	.word	0x400201d0
 80024dc:	500201d0 	.word	0x500201d0
 80024e0:	40020250 	.word	0x40020250
 80024e4:	50020250 	.word	0x50020250
 80024e8:	400202d0 	.word	0x400202d0
 80024ec:	500202d0 	.word	0x500202d0
 80024f0:	40020350 	.word	0x40020350
 80024f4:	50020350 	.word	0x50020350
 80024f8:	400203d0 	.word	0x400203d0
 80024fc:	500203d0 	.word	0x500203d0
 8002500:	40020450 	.word	0x40020450
 8002504:	50020450 	.word	0x50020450
 8002508:	400204d0 	.word	0x400204d0
 800250c:	500204d0 	.word	0x500204d0
 8002510:	40020550 	.word	0x40020550
 8002514:	50020550 	.word	0x50020550
 8002518:	400205d0 	.word	0x400205d0
 800251c:	500205d0 	.word	0x500205d0
 8002520:	40020650 	.word	0x40020650
 8002524:	50020650 	.word	0x50020650
 8002528:	400206d0 	.word	0x400206d0
 800252c:	500206d0 	.word	0x500206d0
 8002530:	40020750 	.word	0x40020750
 8002534:	50020750 	.word	0x50020750
 8002538:	400207d0 	.word	0x400207d0
 800253c:	500207d0 	.word	0x500207d0

08002540 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002540:	b480      	push	{r7}
 8002542:	b089      	sub	sp, #36	@ 0x24
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800254a:	2300      	movs	r3, #0
 800254c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002552:	e1ba      	b.n	80028ca <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	2101      	movs	r1, #1
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	fa01 f303 	lsl.w	r3, r1, r3
 8002560:	4013      	ands	r3, r2
 8002562:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2b00      	cmp	r3, #0
 800256c:	f000 81aa 	beq.w	80028c4 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a55      	ldr	r2, [pc, #340]	@ (80026c8 <HAL_GPIO_Init+0x188>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d15d      	bne.n	8002634 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800257e:	2201      	movs	r2, #1
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	43db      	mvns	r3, r3
 8002588:	69fa      	ldr	r2, [r7, #28]
 800258a:	4013      	ands	r3, r2
 800258c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f003 0201 	and.w	r2, r3, #1
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	69fa      	ldr	r2, [r7, #28]
 800259e:	4313      	orrs	r3, r2
 80025a0:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	69fa      	ldr	r2, [r7, #28]
 80025a6:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80025a8:	4a48      	ldr	r2, [pc, #288]	@ (80026cc <HAL_GPIO_Init+0x18c>)
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80025b0:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80025b2:	4a46      	ldr	r2, [pc, #280]	@ (80026cc <HAL_GPIO_Init+0x18c>)
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	4413      	add	r3, r2
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	08da      	lsrs	r2, r3, #3
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	3208      	adds	r2, #8
 80025c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025ca:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	f003 0307 	and.w	r3, r3, #7
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	220f      	movs	r2, #15
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	43db      	mvns	r3, r3
 80025dc:	69fa      	ldr	r2, [r7, #28]
 80025de:	4013      	ands	r3, r2
 80025e0:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	f003 0307 	and.w	r3, r3, #7
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	220b      	movs	r2, #11
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	69fa      	ldr	r2, [r7, #28]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	08da      	lsrs	r2, r3, #3
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	3208      	adds	r2, #8
 80025fe:	69f9      	ldr	r1, [r7, #28]
 8002600:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	2203      	movs	r2, #3
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	43db      	mvns	r3, r3
 8002616:	69fa      	ldr	r2, [r7, #28]
 8002618:	4013      	ands	r3, r2
 800261a:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	2202      	movs	r2, #2
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	69fa      	ldr	r2, [r7, #28]
 8002628:	4313      	orrs	r3, r2
 800262a:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	69fa      	ldr	r2, [r7, #28]
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	e067      	b.n	8002704 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	2b02      	cmp	r3, #2
 800263a:	d003      	beq.n	8002644 <HAL_GPIO_Init+0x104>
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	2b12      	cmp	r3, #18
 8002642:	d145      	bne.n	80026d0 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	08da      	lsrs	r2, r3, #3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	3208      	adds	r2, #8
 800264c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002650:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	f003 0307 	and.w	r3, r3, #7
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	220f      	movs	r2, #15
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	43db      	mvns	r3, r3
 8002662:	69fa      	ldr	r2, [r7, #28]
 8002664:	4013      	ands	r3, r2
 8002666:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	f003 020f 	and.w	r2, r3, #15
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	69fa      	ldr	r2, [r7, #28]
 800267e:	4313      	orrs	r3, r2
 8002680:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	08da      	lsrs	r2, r3, #3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	3208      	adds	r2, #8
 800268a:	69f9      	ldr	r1, [r7, #28]
 800268c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	2203      	movs	r2, #3
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	43db      	mvns	r3, r3
 80026a2:	69fa      	ldr	r2, [r7, #28]
 80026a4:	4013      	ands	r3, r2
 80026a6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f003 0203 	and.w	r2, r3, #3
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	69fa      	ldr	r2, [r7, #28]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	69fa      	ldr	r2, [r7, #28]
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	e01e      	b.n	8002704 <HAL_GPIO_Init+0x1c4>
 80026c6:	bf00      	nop
 80026c8:	46020000 	.word	0x46020000
 80026cc:	0800b9cc 	.word	0x0800b9cc
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	2203      	movs	r2, #3
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	43db      	mvns	r3, r3
 80026e2:	69fa      	ldr	r2, [r7, #28]
 80026e4:	4013      	ands	r3, r2
 80026e6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f003 0203 	and.w	r2, r3, #3
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	69fa      	ldr	r2, [r7, #28]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	69fa      	ldr	r2, [r7, #28]
 8002702:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d00b      	beq.n	8002724 <HAL_GPIO_Init+0x1e4>
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	2b02      	cmp	r3, #2
 8002712:	d007      	beq.n	8002724 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002718:	2b11      	cmp	r3, #17
 800271a:	d003      	beq.n	8002724 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	2b12      	cmp	r3, #18
 8002722:	d130      	bne.n	8002786 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	2203      	movs	r2, #3
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	43db      	mvns	r3, r3
 8002736:	69fa      	ldr	r2, [r7, #28]
 8002738:	4013      	ands	r3, r2
 800273a:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	68da      	ldr	r2, [r3, #12]
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	69fa      	ldr	r2, [r7, #28]
 800274a:	4313      	orrs	r3, r2
 800274c:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	69fa      	ldr	r2, [r7, #28]
 8002752:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800275a:	2201      	movs	r2, #1
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	43db      	mvns	r3, r3
 8002764:	69fa      	ldr	r2, [r7, #28]
 8002766:	4013      	ands	r3, r2
 8002768:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	091b      	lsrs	r3, r3, #4
 8002770:	f003 0201 	and.w	r2, r3, #1
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	fa02 f303 	lsl.w	r3, r2, r3
 800277a:	69fa      	ldr	r2, [r7, #28]
 800277c:	4313      	orrs	r3, r2
 800277e:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	69fa      	ldr	r2, [r7, #28]
 8002784:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2b03      	cmp	r3, #3
 800278c:	d017      	beq.n	80027be <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	2203      	movs	r2, #3
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	43db      	mvns	r3, r3
 80027a0:	69fa      	ldr	r2, [r7, #28]
 80027a2:	4013      	ands	r3, r2
 80027a4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	689a      	ldr	r2, [r3, #8]
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	fa02 f303 	lsl.w	r3, r2, r3
 80027b2:	69fa      	ldr	r2, [r7, #28]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	69fa      	ldr	r2, [r7, #28]
 80027bc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d07c      	beq.n	80028c4 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80027ca:	4a47      	ldr	r2, [pc, #284]	@ (80028e8 <HAL_GPIO_Init+0x3a8>)
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	089b      	lsrs	r3, r3, #2
 80027d0:	3318      	adds	r3, #24
 80027d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027d6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	f003 0303 	and.w	r3, r3, #3
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	220f      	movs	r2, #15
 80027e2:	fa02 f303 	lsl.w	r3, r2, r3
 80027e6:	43db      	mvns	r3, r3
 80027e8:	69fa      	ldr	r2, [r7, #28]
 80027ea:	4013      	ands	r3, r2
 80027ec:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	0a9a      	lsrs	r2, r3, #10
 80027f2:	4b3e      	ldr	r3, [pc, #248]	@ (80028ec <HAL_GPIO_Init+0x3ac>)
 80027f4:	4013      	ands	r3, r2
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	f002 0203 	and.w	r2, r2, #3
 80027fc:	00d2      	lsls	r2, r2, #3
 80027fe:	4093      	lsls	r3, r2
 8002800:	69fa      	ldr	r2, [r7, #28]
 8002802:	4313      	orrs	r3, r2
 8002804:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002806:	4938      	ldr	r1, [pc, #224]	@ (80028e8 <HAL_GPIO_Init+0x3a8>)
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	089b      	lsrs	r3, r3, #2
 800280c:	3318      	adds	r3, #24
 800280e:	69fa      	ldr	r2, [r7, #28]
 8002810:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002814:	4b34      	ldr	r3, [pc, #208]	@ (80028e8 <HAL_GPIO_Init+0x3a8>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	43db      	mvns	r3, r3
 800281e:	69fa      	ldr	r2, [r7, #28]
 8002820:	4013      	ands	r3, r2
 8002822:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d003      	beq.n	8002838 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8002830:	69fa      	ldr	r2, [r7, #28]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	4313      	orrs	r3, r2
 8002836:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8002838:	4a2b      	ldr	r2, [pc, #172]	@ (80028e8 <HAL_GPIO_Init+0x3a8>)
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800283e:	4b2a      	ldr	r3, [pc, #168]	@ (80028e8 <HAL_GPIO_Init+0x3a8>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	43db      	mvns	r3, r3
 8002848:	69fa      	ldr	r2, [r7, #28]
 800284a:	4013      	ands	r3, r2
 800284c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800285a:	69fa      	ldr	r2, [r7, #28]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	4313      	orrs	r3, r2
 8002860:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8002862:	4a21      	ldr	r2, [pc, #132]	@ (80028e8 <HAL_GPIO_Init+0x3a8>)
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002868:	4b1f      	ldr	r3, [pc, #124]	@ (80028e8 <HAL_GPIO_Init+0x3a8>)
 800286a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800286e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	43db      	mvns	r3, r3
 8002874:	69fa      	ldr	r2, [r7, #28]
 8002876:	4013      	ands	r3, r2
 8002878:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8002886:	69fa      	ldr	r2, [r7, #28]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	4313      	orrs	r3, r2
 800288c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800288e:	4a16      	ldr	r2, [pc, #88]	@ (80028e8 <HAL_GPIO_Init+0x3a8>)
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8002896:	4b14      	ldr	r3, [pc, #80]	@ (80028e8 <HAL_GPIO_Init+0x3a8>)
 8002898:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800289c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	43db      	mvns	r3, r3
 80028a2:	69fa      	ldr	r2, [r7, #28]
 80028a4:	4013      	ands	r3, r2
 80028a6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d003      	beq.n	80028bc <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80028b4:	69fa      	ldr	r2, [r7, #28]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80028bc:	4a0a      	ldr	r2, [pc, #40]	@ (80028e8 <HAL_GPIO_Init+0x3a8>)
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	3301      	adds	r3, #1
 80028c8:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	fa22 f303 	lsr.w	r3, r2, r3
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f47f ae3d 	bne.w	8002554 <HAL_GPIO_Init+0x14>
  }
}
 80028da:	bf00      	nop
 80028dc:	bf00      	nop
 80028de:	3724      	adds	r7, #36	@ 0x24
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	46022000 	.word	0x46022000
 80028ec:	002f7f7f 	.word	0x002f7f7f

080028f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	460b      	mov	r3, r1
 80028fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	691a      	ldr	r2, [r3, #16]
 8002900:	887b      	ldrh	r3, [r7, #2]
 8002902:	4013      	ands	r3, r2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d002      	beq.n	800290e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002908:	2301      	movs	r3, #1
 800290a:	73fb      	strb	r3, [r7, #15]
 800290c:	e001      	b.n	8002912 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800290e:	2300      	movs	r3, #0
 8002910:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 8002912:	7bfb      	ldrb	r3, [r7, #15]
}
 8002914:	4618      	mov	r0, r3
 8002916:	3714      	adds	r7, #20
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	460b      	mov	r3, r1
 800292a:	807b      	strh	r3, [r7, #2]
 800292c:	4613      	mov	r3, r2
 800292e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002930:	787b      	ldrb	r3, [r7, #1]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d003      	beq.n	800293e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002936:	887a      	ldrh	r2, [r7, #2]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 800293c:	e002      	b.n	8002944 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800293e:	887a      	ldrh	r2, [r7, #2]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002944:	bf00      	nop
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	4603      	mov	r3, r0
 8002958:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 800295a:	4b0f      	ldr	r3, [pc, #60]	@ (8002998 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800295c:	68da      	ldr	r2, [r3, #12]
 800295e:	88fb      	ldrh	r3, [r7, #6]
 8002960:	4013      	ands	r3, r2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d006      	beq.n	8002974 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002966:	4a0c      	ldr	r2, [pc, #48]	@ (8002998 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002968:	88fb      	ldrh	r3, [r7, #6]
 800296a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800296c:	88fb      	ldrh	r3, [r7, #6]
 800296e:	4618      	mov	r0, r3
 8002970:	f004 f904 	bl	8006b7c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8002974:	4b08      	ldr	r3, [pc, #32]	@ (8002998 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002976:	691a      	ldr	r2, [r3, #16]
 8002978:	88fb      	ldrh	r3, [r7, #6]
 800297a:	4013      	ands	r3, r2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d006      	beq.n	800298e <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002980:	4a05      	ldr	r2, [pc, #20]	@ (8002998 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002982:	88fb      	ldrh	r3, [r7, #6]
 8002984:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002986:	88fb      	ldrh	r3, [r7, #6]
 8002988:	4618      	mov	r0, r3
 800298a:	f000 f807 	bl	800299c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800298e:	bf00      	nop
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	46022000 	.word	0x46022000

0800299c <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	4603      	mov	r3, r0
 80029a4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
	...

080029b4 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80029bc:	4b39      	ldr	r3, [pc, #228]	@ (8002aa4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80029be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029c4:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80029c6:	68ba      	ldr	r2, [r7, #8]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d10b      	bne.n	80029e6 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029d4:	d905      	bls.n	80029e2 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80029d6:	4b33      	ldr	r3, [pc, #204]	@ (8002aa4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	4a32      	ldr	r2, [pc, #200]	@ (8002aa4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80029dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029e0:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80029e2:	2300      	movs	r3, #0
 80029e4:	e057      	b.n	8002a96 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029ec:	d90a      	bls.n	8002a04 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80029ee:	4b2d      	ldr	r3, [pc, #180]	@ (8002aa4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	4a2a      	ldr	r2, [pc, #168]	@ (8002aa4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80029fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a00:	60d3      	str	r3, [r2, #12]
 8002a02:	e007      	b.n	8002a14 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8002a04:	4b27      	ldr	r3, [pc, #156]	@ (8002aa4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8002a0c:	4925      	ldr	r1, [pc, #148]	@ (8002aa4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002a14:	4b24      	ldr	r3, [pc, #144]	@ (8002aa8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a24      	ldr	r2, [pc, #144]	@ (8002aac <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1e:	099b      	lsrs	r3, r3, #6
 8002a20:	2232      	movs	r2, #50	@ 0x32
 8002a22:	fb02 f303 	mul.w	r3, r2, r3
 8002a26:	4a21      	ldr	r2, [pc, #132]	@ (8002aac <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002a28:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2c:	099b      	lsrs	r3, r3, #6
 8002a2e:	3301      	adds	r3, #1
 8002a30:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002a32:	e002      	b.n	8002a3a <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	3b01      	subs	r3, #1
 8002a38:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002a3a:	4b1a      	ldr	r3, [pc, #104]	@ (8002aa4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d102      	bne.n	8002a4c <HAL_PWREx_ControlVoltageScaling+0x98>
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1f3      	bne.n	8002a34 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d01b      	beq.n	8002a8a <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002a52:	4b15      	ldr	r3, [pc, #84]	@ (8002aa8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a15      	ldr	r2, [pc, #84]	@ (8002aac <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002a58:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5c:	099b      	lsrs	r3, r3, #6
 8002a5e:	2232      	movs	r2, #50	@ 0x32
 8002a60:	fb02 f303 	mul.w	r3, r2, r3
 8002a64:	4a11      	ldr	r2, [pc, #68]	@ (8002aac <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002a66:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6a:	099b      	lsrs	r3, r3, #6
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002a70:	e002      	b.n	8002a78 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	3b01      	subs	r3, #1
 8002a76:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002a78:	4b0a      	ldr	r3, [pc, #40]	@ (8002aa4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002a7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d102      	bne.n	8002a8a <HAL_PWREx_ControlVoltageScaling+0xd6>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1f3      	bne.n	8002a72 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d101      	bne.n	8002a94 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e000      	b.n	8002a96 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3714      	adds	r7, #20
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	46020800 	.word	0x46020800
 8002aa8:	2000001c 	.word	0x2000001c
 8002aac:	10624dd3 	.word	0x10624dd3

08002ab0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8002ab4:	4b04      	ldr	r3, [pc, #16]	@ (8002ac8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002ab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ab8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	46020800 	.word	0x46020800

08002acc <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002ad4:	4b22      	ldr	r3, [pc, #136]	@ (8002b60 <HAL_PWREx_ConfigSupply+0x94>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a22      	ldr	r2, [pc, #136]	@ (8002b64 <HAL_PWREx_ConfigSupply+0x98>)
 8002ada:	fba2 2303 	umull	r2, r3, r2, r3
 8002ade:	099b      	lsrs	r3, r3, #6
 8002ae0:	2232      	movs	r2, #50	@ 0x32
 8002ae2:	fb02 f303 	mul.w	r3, r2, r3
 8002ae6:	4a1f      	ldr	r2, [pc, #124]	@ (8002b64 <HAL_PWREx_ConfigSupply+0x98>)
 8002ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8002aec:	099b      	lsrs	r3, r3, #6
 8002aee:	3301      	adds	r3, #1
 8002af0:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d113      	bne.n	8002b20 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8002af8:	4b1b      	ldr	r3, [pc, #108]	@ (8002b68 <HAL_PWREx_ConfigSupply+0x9c>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	4a1a      	ldr	r2, [pc, #104]	@ (8002b68 <HAL_PWREx_ConfigSupply+0x9c>)
 8002afe:	f023 0302 	bic.w	r3, r3, #2
 8002b02:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002b04:	e002      	b.n	8002b0c <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002b0c:	4b16      	ldr	r3, [pc, #88]	@ (8002b68 <HAL_PWREx_ConfigSupply+0x9c>)
 8002b0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d116      	bne.n	8002b46 <HAL_PWREx_ConfigSupply+0x7a>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1f3      	bne.n	8002b06 <HAL_PWREx_ConfigSupply+0x3a>
 8002b1e:	e012      	b.n	8002b46 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8002b20:	4b11      	ldr	r3, [pc, #68]	@ (8002b68 <HAL_PWREx_ConfigSupply+0x9c>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	4a10      	ldr	r2, [pc, #64]	@ (8002b68 <HAL_PWREx_ConfigSupply+0x9c>)
 8002b26:	f043 0302 	orr.w	r3, r3, #2
 8002b2a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002b2c:	e002      	b.n	8002b34 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	3b01      	subs	r3, #1
 8002b32:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002b34:	4b0c      	ldr	r3, [pc, #48]	@ (8002b68 <HAL_PWREx_ConfigSupply+0x9c>)
 8002b36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d102      	bne.n	8002b46 <HAL_PWREx_ConfigSupply+0x7a>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1f3      	bne.n	8002b2e <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e000      	b.n	8002b52 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3714      	adds	r7, #20
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	2000001c 	.word	0x2000001c
 8002b64:	10624dd3 	.word	0x10624dd3
 8002b68:	46020800 	.word	0x46020800

08002b6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b08e      	sub	sp, #56	@ 0x38
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8002b74:	2300      	movs	r3, #0
 8002b76:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d102      	bne.n	8002b86 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	f000 bec8 	b.w	8003916 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b86:	4b99      	ldr	r3, [pc, #612]	@ (8002dec <HAL_RCC_OscConfig+0x280>)
 8002b88:	69db      	ldr	r3, [r3, #28]
 8002b8a:	f003 030c 	and.w	r3, r3, #12
 8002b8e:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b90:	4b96      	ldr	r3, [pc, #600]	@ (8002dec <HAL_RCC_OscConfig+0x280>)
 8002b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b94:	f003 0303 	and.w	r3, r3, #3
 8002b98:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0310 	and.w	r3, r3, #16
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f000 816c 	beq.w	8002e80 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d007      	beq.n	8002bbe <HAL_RCC_OscConfig+0x52>
 8002bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bb0:	2b0c      	cmp	r3, #12
 8002bb2:	f040 80de 	bne.w	8002d72 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002bb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	f040 80da 	bne.w	8002d72 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d102      	bne.n	8002bcc <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	f000 bea5 	b.w	8003916 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002bd0:	4b86      	ldr	r3, [pc, #536]	@ (8002dec <HAL_RCC_OscConfig+0x280>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d004      	beq.n	8002be6 <HAL_RCC_OscConfig+0x7a>
 8002bdc:	4b83      	ldr	r3, [pc, #524]	@ (8002dec <HAL_RCC_OscConfig+0x280>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002be4:	e005      	b.n	8002bf2 <HAL_RCC_OscConfig+0x86>
 8002be6:	4b81      	ldr	r3, [pc, #516]	@ (8002dec <HAL_RCC_OscConfig+0x280>)
 8002be8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002bec:	041b      	lsls	r3, r3, #16
 8002bee:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d255      	bcs.n	8002ca2 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10a      	bne.n	8002c12 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c00:	4618      	mov	r0, r3
 8002c02:	f001 f99d 	bl	8003f40 <RCC_SetFlashLatencyFromMSIRange>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d002      	beq.n	8002c12 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	f000 be82 	b.w	8003916 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002c12:	4b76      	ldr	r3, [pc, #472]	@ (8002dec <HAL_RCC_OscConfig+0x280>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	4a75      	ldr	r2, [pc, #468]	@ (8002dec <HAL_RCC_OscConfig+0x280>)
 8002c18:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002c1c:	6093      	str	r3, [r2, #8]
 8002c1e:	4b73      	ldr	r3, [pc, #460]	@ (8002dec <HAL_RCC_OscConfig+0x280>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2a:	4970      	ldr	r1, [pc, #448]	@ (8002dec <HAL_RCC_OscConfig+0x280>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c34:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002c38:	d309      	bcc.n	8002c4e <HAL_RCC_OscConfig+0xe2>
 8002c3a:	4b6c      	ldr	r3, [pc, #432]	@ (8002dec <HAL_RCC_OscConfig+0x280>)
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	f023 021f 	bic.w	r2, r3, #31
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a1b      	ldr	r3, [r3, #32]
 8002c46:	4969      	ldr	r1, [pc, #420]	@ (8002dec <HAL_RCC_OscConfig+0x280>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	60cb      	str	r3, [r1, #12]
 8002c4c:	e07e      	b.n	8002d4c <HAL_RCC_OscConfig+0x1e0>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	da0a      	bge.n	8002c6c <HAL_RCC_OscConfig+0x100>
 8002c56:	4b65      	ldr	r3, [pc, #404]	@ (8002dec <HAL_RCC_OscConfig+0x280>)
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a1b      	ldr	r3, [r3, #32]
 8002c62:	015b      	lsls	r3, r3, #5
 8002c64:	4961      	ldr	r1, [pc, #388]	@ (8002dec <HAL_RCC_OscConfig+0x280>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	60cb      	str	r3, [r1, #12]
 8002c6a:	e06f      	b.n	8002d4c <HAL_RCC_OscConfig+0x1e0>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c74:	d30a      	bcc.n	8002c8c <HAL_RCC_OscConfig+0x120>
 8002c76:	4b5d      	ldr	r3, [pc, #372]	@ (8002dec <HAL_RCC_OscConfig+0x280>)
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	029b      	lsls	r3, r3, #10
 8002c84:	4959      	ldr	r1, [pc, #356]	@ (8002dec <HAL_RCC_OscConfig+0x280>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	60cb      	str	r3, [r1, #12]
 8002c8a:	e05f      	b.n	8002d4c <HAL_RCC_OscConfig+0x1e0>
 8002c8c:	4b57      	ldr	r3, [pc, #348]	@ (8002dec <HAL_RCC_OscConfig+0x280>)
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a1b      	ldr	r3, [r3, #32]
 8002c98:	03db      	lsls	r3, r3, #15
 8002c9a:	4954      	ldr	r1, [pc, #336]	@ (8002dec <HAL_RCC_OscConfig+0x280>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	60cb      	str	r3, [r1, #12]
 8002ca0:	e054      	b.n	8002d4c <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002ca2:	4b52      	ldr	r3, [pc, #328]	@ (8002dec <HAL_RCC_OscConfig+0x280>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	4a51      	ldr	r2, [pc, #324]	@ (8002dec <HAL_RCC_OscConfig+0x280>)
 8002ca8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002cac:	6093      	str	r3, [r2, #8]
 8002cae:	4b4f      	ldr	r3, [pc, #316]	@ (8002dec <HAL_RCC_OscConfig+0x280>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cba:	494c      	ldr	r1, [pc, #304]	@ (8002dec <HAL_RCC_OscConfig+0x280>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002cc8:	d309      	bcc.n	8002cde <HAL_RCC_OscConfig+0x172>
 8002cca:	4b48      	ldr	r3, [pc, #288]	@ (8002dec <HAL_RCC_OscConfig+0x280>)
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	f023 021f 	bic.w	r2, r3, #31
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	4945      	ldr	r1, [pc, #276]	@ (8002dec <HAL_RCC_OscConfig+0x280>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	60cb      	str	r3, [r1, #12]
 8002cdc:	e028      	b.n	8002d30 <HAL_RCC_OscConfig+0x1c4>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	da0a      	bge.n	8002cfc <HAL_RCC_OscConfig+0x190>
 8002ce6:	4b41      	ldr	r3, [pc, #260]	@ (8002dec <HAL_RCC_OscConfig+0x280>)
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	015b      	lsls	r3, r3, #5
 8002cf4:	493d      	ldr	r1, [pc, #244]	@ (8002dec <HAL_RCC_OscConfig+0x280>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	60cb      	str	r3, [r1, #12]
 8002cfa:	e019      	b.n	8002d30 <HAL_RCC_OscConfig+0x1c4>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d04:	d30a      	bcc.n	8002d1c <HAL_RCC_OscConfig+0x1b0>
 8002d06:	4b39      	ldr	r3, [pc, #228]	@ (8002dec <HAL_RCC_OscConfig+0x280>)
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a1b      	ldr	r3, [r3, #32]
 8002d12:	029b      	lsls	r3, r3, #10
 8002d14:	4935      	ldr	r1, [pc, #212]	@ (8002dec <HAL_RCC_OscConfig+0x280>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	60cb      	str	r3, [r1, #12]
 8002d1a:	e009      	b.n	8002d30 <HAL_RCC_OscConfig+0x1c4>
 8002d1c:	4b33      	ldr	r3, [pc, #204]	@ (8002dec <HAL_RCC_OscConfig+0x280>)
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a1b      	ldr	r3, [r3, #32]
 8002d28:	03db      	lsls	r3, r3, #15
 8002d2a:	4930      	ldr	r1, [pc, #192]	@ (8002dec <HAL_RCC_OscConfig+0x280>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10a      	bne.n	8002d4c <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f001 f900 	bl	8003f40 <RCC_SetFlashLatencyFromMSIRange>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d002      	beq.n	8002d4c <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	f000 bde5 	b.w	8003916 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8002d4c:	f001 f8de 	bl	8003f0c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002d50:	4b27      	ldr	r3, [pc, #156]	@ (8002df0 <HAL_RCC_OscConfig+0x284>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7fe fee5 	bl	8001b24 <HAL_InitTick>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8002d60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f000 808a 	beq.w	8002e7e <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8002d6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d6e:	f000 bdd2 	b.w	8003916 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d066      	beq.n	8002e48 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8002d7a:	4b1c      	ldr	r3, [pc, #112]	@ (8002dec <HAL_RCC_OscConfig+0x280>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a1b      	ldr	r2, [pc, #108]	@ (8002dec <HAL_RCC_OscConfig+0x280>)
 8002d80:	f043 0301 	orr.w	r3, r3, #1
 8002d84:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002d86:	f7fe ff57 	bl	8001c38 <HAL_GetTick>
 8002d8a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002d8c:	e009      	b.n	8002da2 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d8e:	f7fe ff53 	bl	8001c38 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d902      	bls.n	8002da2 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	f000 bdba 	b.w	8003916 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002da2:	4b12      	ldr	r3, [pc, #72]	@ (8002dec <HAL_RCC_OscConfig+0x280>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0304 	and.w	r3, r3, #4
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d0ef      	beq.n	8002d8e <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002dae:	4b0f      	ldr	r3, [pc, #60]	@ (8002dec <HAL_RCC_OscConfig+0x280>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	4a0e      	ldr	r2, [pc, #56]	@ (8002dec <HAL_RCC_OscConfig+0x280>)
 8002db4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002db8:	6093      	str	r3, [r2, #8]
 8002dba:	4b0c      	ldr	r3, [pc, #48]	@ (8002dec <HAL_RCC_OscConfig+0x280>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc6:	4909      	ldr	r1, [pc, #36]	@ (8002dec <HAL_RCC_OscConfig+0x280>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002dd4:	d30e      	bcc.n	8002df4 <HAL_RCC_OscConfig+0x288>
 8002dd6:	4b05      	ldr	r3, [pc, #20]	@ (8002dec <HAL_RCC_OscConfig+0x280>)
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	f023 021f 	bic.w	r2, r3, #31
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	4902      	ldr	r1, [pc, #8]	@ (8002dec <HAL_RCC_OscConfig+0x280>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	60cb      	str	r3, [r1, #12]
 8002de8:	e04a      	b.n	8002e80 <HAL_RCC_OscConfig+0x314>
 8002dea:	bf00      	nop
 8002dec:	46020c00 	.word	0x46020c00
 8002df0:	20000020 	.word	0x20000020
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	da0a      	bge.n	8002e12 <HAL_RCC_OscConfig+0x2a6>
 8002dfc:	4b98      	ldr	r3, [pc, #608]	@ (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	015b      	lsls	r3, r3, #5
 8002e0a:	4995      	ldr	r1, [pc, #596]	@ (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	60cb      	str	r3, [r1, #12]
 8002e10:	e036      	b.n	8002e80 <HAL_RCC_OscConfig+0x314>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e1a:	d30a      	bcc.n	8002e32 <HAL_RCC_OscConfig+0x2c6>
 8002e1c:	4b90      	ldr	r3, [pc, #576]	@ (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a1b      	ldr	r3, [r3, #32]
 8002e28:	029b      	lsls	r3, r3, #10
 8002e2a:	498d      	ldr	r1, [pc, #564]	@ (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	60cb      	str	r3, [r1, #12]
 8002e30:	e026      	b.n	8002e80 <HAL_RCC_OscConfig+0x314>
 8002e32:	4b8b      	ldr	r3, [pc, #556]	@ (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	03db      	lsls	r3, r3, #15
 8002e40:	4987      	ldr	r1, [pc, #540]	@ (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	60cb      	str	r3, [r1, #12]
 8002e46:	e01b      	b.n	8002e80 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8002e48:	4b85      	ldr	r3, [pc, #532]	@ (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a84      	ldr	r2, [pc, #528]	@ (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002e4e:	f023 0301 	bic.w	r3, r3, #1
 8002e52:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002e54:	f7fe fef0 	bl	8001c38 <HAL_GetTick>
 8002e58:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002e5a:	e009      	b.n	8002e70 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e5c:	f7fe feec 	bl	8001c38 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d902      	bls.n	8002e70 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	f000 bd53 	b.w	8003916 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002e70:	4b7b      	ldr	r3, [pc, #492]	@ (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0304 	and.w	r3, r3, #4
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d1ef      	bne.n	8002e5c <HAL_RCC_OscConfig+0x2f0>
 8002e7c:	e000      	b.n	8002e80 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002e7e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0301 	and.w	r3, r3, #1
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f000 808b 	beq.w	8002fa4 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e90:	2b08      	cmp	r3, #8
 8002e92:	d005      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x334>
 8002e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e96:	2b0c      	cmp	r3, #12
 8002e98:	d109      	bne.n	8002eae <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e9c:	2b03      	cmp	r3, #3
 8002e9e:	d106      	bne.n	8002eae <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d17d      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	f000 bd34 	b.w	8003916 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002eb6:	d106      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x35a>
 8002eb8:	4b69      	ldr	r3, [pc, #420]	@ (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a68      	ldr	r2, [pc, #416]	@ (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002ebe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ec2:	6013      	str	r3, [r2, #0]
 8002ec4:	e041      	b.n	8002f4a <HAL_RCC_OscConfig+0x3de>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ece:	d112      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x38a>
 8002ed0:	4b63      	ldr	r3, [pc, #396]	@ (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a62      	ldr	r2, [pc, #392]	@ (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002ed6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002eda:	6013      	str	r3, [r2, #0]
 8002edc:	4b60      	ldr	r3, [pc, #384]	@ (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a5f      	ldr	r2, [pc, #380]	@ (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002ee2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002ee6:	6013      	str	r3, [r2, #0]
 8002ee8:	4b5d      	ldr	r3, [pc, #372]	@ (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a5c      	ldr	r2, [pc, #368]	@ (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002eee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ef2:	6013      	str	r3, [r2, #0]
 8002ef4:	e029      	b.n	8002f4a <HAL_RCC_OscConfig+0x3de>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8002efe:	d112      	bne.n	8002f26 <HAL_RCC_OscConfig+0x3ba>
 8002f00:	4b57      	ldr	r3, [pc, #348]	@ (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a56      	ldr	r2, [pc, #344]	@ (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002f06:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f0a:	6013      	str	r3, [r2, #0]
 8002f0c:	4b54      	ldr	r3, [pc, #336]	@ (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a53      	ldr	r2, [pc, #332]	@ (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002f12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f16:	6013      	str	r3, [r2, #0]
 8002f18:	4b51      	ldr	r3, [pc, #324]	@ (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a50      	ldr	r2, [pc, #320]	@ (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002f1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f22:	6013      	str	r3, [r2, #0]
 8002f24:	e011      	b.n	8002f4a <HAL_RCC_OscConfig+0x3de>
 8002f26:	4b4e      	ldr	r3, [pc, #312]	@ (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a4d      	ldr	r2, [pc, #308]	@ (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002f2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f30:	6013      	str	r3, [r2, #0]
 8002f32:	4b4b      	ldr	r3, [pc, #300]	@ (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a4a      	ldr	r2, [pc, #296]	@ (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002f38:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f3c:	6013      	str	r3, [r2, #0]
 8002f3e:	4b48      	ldr	r3, [pc, #288]	@ (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a47      	ldr	r2, [pc, #284]	@ (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002f44:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002f48:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d014      	beq.n	8002f7c <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8002f52:	f7fe fe71 	bl	8001c38 <HAL_GetTick>
 8002f56:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f58:	e009      	b.n	8002f6e <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f5a:	f7fe fe6d 	bl	8001c38 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	2b64      	cmp	r3, #100	@ 0x64
 8002f66:	d902      	bls.n	8002f6e <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	f000 bcd4 	b.w	8003916 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f6e:	4b3c      	ldr	r3, [pc, #240]	@ (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d0ef      	beq.n	8002f5a <HAL_RCC_OscConfig+0x3ee>
 8002f7a:	e013      	b.n	8002fa4 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8002f7c:	f7fe fe5c 	bl	8001c38 <HAL_GetTick>
 8002f80:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f82:	e009      	b.n	8002f98 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f84:	f7fe fe58 	bl	8001c38 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b64      	cmp	r3, #100	@ 0x64
 8002f90:	d902      	bls.n	8002f98 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	f000 bcbf 	b.w	8003916 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f98:	4b31      	ldr	r3, [pc, #196]	@ (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1ef      	bne.n	8002f84 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d05f      	beq.n	8003070 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	d005      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x456>
 8002fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fb8:	2b0c      	cmp	r3, #12
 8002fba:	d114      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d111      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d102      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	f000 bca3 	b.w	8003916 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002fd0:	4b23      	ldr	r3, [pc, #140]	@ (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	041b      	lsls	r3, r3, #16
 8002fde:	4920      	ldr	r1, [pc, #128]	@ (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002fe4:	e044      	b.n	8003070 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d024      	beq.n	8003038 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8002fee:	4b1c      	ldr	r3, [pc, #112]	@ (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a1b      	ldr	r2, [pc, #108]	@ (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002ff4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ff8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002ffa:	f7fe fe1d 	bl	8001c38 <HAL_GetTick>
 8002ffe:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003000:	e009      	b.n	8003016 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003002:	f7fe fe19 	bl	8001c38 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d902      	bls.n	8003016 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	f000 bc80 	b.w	8003916 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003016:	4b12      	ldr	r3, [pc, #72]	@ (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800301e:	2b00      	cmp	r3, #0
 8003020:	d0ef      	beq.n	8003002 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003022:	4b0f      	ldr	r3, [pc, #60]	@ (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	041b      	lsls	r3, r3, #16
 8003030:	490b      	ldr	r1, [pc, #44]	@ (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8003032:	4313      	orrs	r3, r2
 8003034:	610b      	str	r3, [r1, #16]
 8003036:	e01b      	b.n	8003070 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8003038:	4b09      	ldr	r3, [pc, #36]	@ (8003060 <HAL_RCC_OscConfig+0x4f4>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a08      	ldr	r2, [pc, #32]	@ (8003060 <HAL_RCC_OscConfig+0x4f4>)
 800303e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003042:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003044:	f7fe fdf8 	bl	8001c38 <HAL_GetTick>
 8003048:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800304a:	e00b      	b.n	8003064 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800304c:	f7fe fdf4 	bl	8001c38 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d904      	bls.n	8003064 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	f000 bc5b 	b.w	8003916 <HAL_RCC_OscConfig+0xdaa>
 8003060:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003064:	4baf      	ldr	r3, [pc, #700]	@ (8003324 <HAL_RCC_OscConfig+0x7b8>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1ed      	bne.n	800304c <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0308 	and.w	r3, r3, #8
 8003078:	2b00      	cmp	r3, #0
 800307a:	f000 80c8 	beq.w	800320e <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800307e:	2300      	movs	r3, #0
 8003080:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003084:	4ba7      	ldr	r3, [pc, #668]	@ (8003324 <HAL_RCC_OscConfig+0x7b8>)
 8003086:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800308a:	f003 0304 	and.w	r3, r3, #4
 800308e:	2b00      	cmp	r3, #0
 8003090:	d111      	bne.n	80030b6 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003092:	4ba4      	ldr	r3, [pc, #656]	@ (8003324 <HAL_RCC_OscConfig+0x7b8>)
 8003094:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003098:	4aa2      	ldr	r2, [pc, #648]	@ (8003324 <HAL_RCC_OscConfig+0x7b8>)
 800309a:	f043 0304 	orr.w	r3, r3, #4
 800309e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80030a2:	4ba0      	ldr	r3, [pc, #640]	@ (8003324 <HAL_RCC_OscConfig+0x7b8>)
 80030a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030a8:	f003 0304 	and.w	r3, r3, #4
 80030ac:	617b      	str	r3, [r7, #20]
 80030ae:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80030b0:	2301      	movs	r3, #1
 80030b2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80030b6:	4b9c      	ldr	r3, [pc, #624]	@ (8003328 <HAL_RCC_OscConfig+0x7bc>)
 80030b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d119      	bne.n	80030f6 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80030c2:	4b99      	ldr	r3, [pc, #612]	@ (8003328 <HAL_RCC_OscConfig+0x7bc>)
 80030c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030c6:	4a98      	ldr	r2, [pc, #608]	@ (8003328 <HAL_RCC_OscConfig+0x7bc>)
 80030c8:	f043 0301 	orr.w	r3, r3, #1
 80030cc:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030ce:	f7fe fdb3 	bl	8001c38 <HAL_GetTick>
 80030d2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80030d4:	e009      	b.n	80030ea <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030d6:	f7fe fdaf 	bl	8001c38 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d902      	bls.n	80030ea <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	f000 bc16 	b.w	8003916 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80030ea:	4b8f      	ldr	r3, [pc, #572]	@ (8003328 <HAL_RCC_OscConfig+0x7bc>)
 80030ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d0ef      	beq.n	80030d6 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d05f      	beq.n	80031be <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80030fe:	4b89      	ldr	r3, [pc, #548]	@ (8003324 <HAL_RCC_OscConfig+0x7b8>)
 8003100:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003104:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	699a      	ldr	r2, [r3, #24]
 800310a:	6a3b      	ldr	r3, [r7, #32]
 800310c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003110:	429a      	cmp	r2, r3
 8003112:	d037      	beq.n	8003184 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003114:	6a3b      	ldr	r3, [r7, #32]
 8003116:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d006      	beq.n	800312c <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800311e:	6a3b      	ldr	r3, [r7, #32]
 8003120:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003124:	2b00      	cmp	r3, #0
 8003126:	d101      	bne.n	800312c <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e3f4      	b.n	8003916 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800312c:	6a3b      	ldr	r3, [r7, #32]
 800312e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d01b      	beq.n	800316e <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8003136:	4b7b      	ldr	r3, [pc, #492]	@ (8003324 <HAL_RCC_OscConfig+0x7b8>)
 8003138:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800313c:	4a79      	ldr	r2, [pc, #484]	@ (8003324 <HAL_RCC_OscConfig+0x7b8>)
 800313e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8003142:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8003146:	f7fe fd77 	bl	8001c38 <HAL_GetTick>
 800314a:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800314c:	e008      	b.n	8003160 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800314e:	f7fe fd73 	bl	8001c38 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	2b05      	cmp	r3, #5
 800315a:	d901      	bls.n	8003160 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e3da      	b.n	8003916 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003160:	4b70      	ldr	r3, [pc, #448]	@ (8003324 <HAL_RCC_OscConfig+0x7b8>)
 8003162:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003166:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1ef      	bne.n	800314e <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800316e:	4b6d      	ldr	r3, [pc, #436]	@ (8003324 <HAL_RCC_OscConfig+0x7b8>)
 8003170:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003174:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	699b      	ldr	r3, [r3, #24]
 800317c:	4969      	ldr	r1, [pc, #420]	@ (8003324 <HAL_RCC_OscConfig+0x7b8>)
 800317e:	4313      	orrs	r3, r2
 8003180:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8003184:	4b67      	ldr	r3, [pc, #412]	@ (8003324 <HAL_RCC_OscConfig+0x7b8>)
 8003186:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800318a:	4a66      	ldr	r2, [pc, #408]	@ (8003324 <HAL_RCC_OscConfig+0x7b8>)
 800318c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003190:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8003194:	f7fe fd50 	bl	8001c38 <HAL_GetTick>
 8003198:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800319a:	e008      	b.n	80031ae <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800319c:	f7fe fd4c 	bl	8001c38 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b05      	cmp	r3, #5
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e3b3      	b.n	8003916 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80031ae:	4b5d      	ldr	r3, [pc, #372]	@ (8003324 <HAL_RCC_OscConfig+0x7b8>)
 80031b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80031b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d0ef      	beq.n	800319c <HAL_RCC_OscConfig+0x630>
 80031bc:	e01b      	b.n	80031f6 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80031be:	4b59      	ldr	r3, [pc, #356]	@ (8003324 <HAL_RCC_OscConfig+0x7b8>)
 80031c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80031c4:	4a57      	ldr	r2, [pc, #348]	@ (8003324 <HAL_RCC_OscConfig+0x7b8>)
 80031c6:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80031ca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80031ce:	f7fe fd33 	bl	8001c38 <HAL_GetTick>
 80031d2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80031d4:	e008      	b.n	80031e8 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031d6:	f7fe fd2f 	bl	8001c38 <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	2b05      	cmp	r3, #5
 80031e2:	d901      	bls.n	80031e8 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e396      	b.n	8003916 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80031e8:	4b4e      	ldr	r3, [pc, #312]	@ (8003324 <HAL_RCC_OscConfig+0x7b8>)
 80031ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80031ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1ef      	bne.n	80031d6 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031f6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d107      	bne.n	800320e <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031fe:	4b49      	ldr	r3, [pc, #292]	@ (8003324 <HAL_RCC_OscConfig+0x7b8>)
 8003200:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003204:	4a47      	ldr	r2, [pc, #284]	@ (8003324 <HAL_RCC_OscConfig+0x7b8>)
 8003206:	f023 0304 	bic.w	r3, r3, #4
 800320a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0304 	and.w	r3, r3, #4
 8003216:	2b00      	cmp	r3, #0
 8003218:	f000 8111 	beq.w	800343e <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 800321c:	2300      	movs	r3, #0
 800321e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003222:	4b40      	ldr	r3, [pc, #256]	@ (8003324 <HAL_RCC_OscConfig+0x7b8>)
 8003224:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003228:	f003 0304 	and.w	r3, r3, #4
 800322c:	2b00      	cmp	r3, #0
 800322e:	d111      	bne.n	8003254 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003230:	4b3c      	ldr	r3, [pc, #240]	@ (8003324 <HAL_RCC_OscConfig+0x7b8>)
 8003232:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003236:	4a3b      	ldr	r2, [pc, #236]	@ (8003324 <HAL_RCC_OscConfig+0x7b8>)
 8003238:	f043 0304 	orr.w	r3, r3, #4
 800323c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003240:	4b38      	ldr	r3, [pc, #224]	@ (8003324 <HAL_RCC_OscConfig+0x7b8>)
 8003242:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003246:	f003 0304 	and.w	r3, r3, #4
 800324a:	613b      	str	r3, [r7, #16]
 800324c:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800324e:	2301      	movs	r3, #1
 8003250:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003254:	4b34      	ldr	r3, [pc, #208]	@ (8003328 <HAL_RCC_OscConfig+0x7bc>)
 8003256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003258:	f003 0301 	and.w	r3, r3, #1
 800325c:	2b00      	cmp	r3, #0
 800325e:	d118      	bne.n	8003292 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003260:	4b31      	ldr	r3, [pc, #196]	@ (8003328 <HAL_RCC_OscConfig+0x7bc>)
 8003262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003264:	4a30      	ldr	r2, [pc, #192]	@ (8003328 <HAL_RCC_OscConfig+0x7bc>)
 8003266:	f043 0301 	orr.w	r3, r3, #1
 800326a:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800326c:	f7fe fce4 	bl	8001c38 <HAL_GetTick>
 8003270:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003272:	e008      	b.n	8003286 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003274:	f7fe fce0 	bl	8001c38 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b02      	cmp	r3, #2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e347      	b.n	8003916 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003286:	4b28      	ldr	r3, [pc, #160]	@ (8003328 <HAL_RCC_OscConfig+0x7bc>)
 8003288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b00      	cmp	r3, #0
 8003290:	d0f0      	beq.n	8003274 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b00      	cmp	r3, #0
 800329c:	d01f      	beq.n	80032de <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f003 0304 	and.w	r3, r3, #4
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d010      	beq.n	80032cc <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80032aa:	4b1e      	ldr	r3, [pc, #120]	@ (8003324 <HAL_RCC_OscConfig+0x7b8>)
 80032ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80032b0:	4a1c      	ldr	r2, [pc, #112]	@ (8003324 <HAL_RCC_OscConfig+0x7b8>)
 80032b2:	f043 0304 	orr.w	r3, r3, #4
 80032b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80032ba:	4b1a      	ldr	r3, [pc, #104]	@ (8003324 <HAL_RCC_OscConfig+0x7b8>)
 80032bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80032c0:	4a18      	ldr	r2, [pc, #96]	@ (8003324 <HAL_RCC_OscConfig+0x7b8>)
 80032c2:	f043 0301 	orr.w	r3, r3, #1
 80032c6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80032ca:	e018      	b.n	80032fe <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80032cc:	4b15      	ldr	r3, [pc, #84]	@ (8003324 <HAL_RCC_OscConfig+0x7b8>)
 80032ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80032d2:	4a14      	ldr	r2, [pc, #80]	@ (8003324 <HAL_RCC_OscConfig+0x7b8>)
 80032d4:	f043 0301 	orr.w	r3, r3, #1
 80032d8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80032dc:	e00f      	b.n	80032fe <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80032de:	4b11      	ldr	r3, [pc, #68]	@ (8003324 <HAL_RCC_OscConfig+0x7b8>)
 80032e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80032e4:	4a0f      	ldr	r2, [pc, #60]	@ (8003324 <HAL_RCC_OscConfig+0x7b8>)
 80032e6:	f023 0301 	bic.w	r3, r3, #1
 80032ea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80032ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003324 <HAL_RCC_OscConfig+0x7b8>)
 80032f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80032f4:	4a0b      	ldr	r2, [pc, #44]	@ (8003324 <HAL_RCC_OscConfig+0x7b8>)
 80032f6:	f023 0304 	bic.w	r3, r3, #4
 80032fa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d057      	beq.n	80033b6 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8003306:	f7fe fc97 	bl	8001c38 <HAL_GetTick>
 800330a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800330c:	e00e      	b.n	800332c <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800330e:	f7fe fc93 	bl	8001c38 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	f241 3288 	movw	r2, #5000	@ 0x1388
 800331c:	4293      	cmp	r3, r2
 800331e:	d905      	bls.n	800332c <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e2f8      	b.n	8003916 <HAL_RCC_OscConfig+0xdaa>
 8003324:	46020c00 	.word	0x46020c00
 8003328:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800332c:	4b9c      	ldr	r3, [pc, #624]	@ (80035a0 <HAL_RCC_OscConfig+0xa34>)
 800332e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d0e9      	beq.n	800330e <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003342:	2b00      	cmp	r3, #0
 8003344:	d01b      	beq.n	800337e <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003346:	4b96      	ldr	r3, [pc, #600]	@ (80035a0 <HAL_RCC_OscConfig+0xa34>)
 8003348:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800334c:	4a94      	ldr	r2, [pc, #592]	@ (80035a0 <HAL_RCC_OscConfig+0xa34>)
 800334e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003352:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003356:	e00a      	b.n	800336e <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003358:	f7fe fc6e 	bl	8001c38 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003366:	4293      	cmp	r3, r2
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e2d3      	b.n	8003916 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800336e:	4b8c      	ldr	r3, [pc, #560]	@ (80035a0 <HAL_RCC_OscConfig+0xa34>)
 8003370:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003374:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003378:	2b00      	cmp	r3, #0
 800337a:	d0ed      	beq.n	8003358 <HAL_RCC_OscConfig+0x7ec>
 800337c:	e053      	b.n	8003426 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800337e:	4b88      	ldr	r3, [pc, #544]	@ (80035a0 <HAL_RCC_OscConfig+0xa34>)
 8003380:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003384:	4a86      	ldr	r2, [pc, #536]	@ (80035a0 <HAL_RCC_OscConfig+0xa34>)
 8003386:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800338a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800338e:	e00a      	b.n	80033a6 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003390:	f7fe fc52 	bl	8001c38 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800339e:	4293      	cmp	r3, r2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e2b7      	b.n	8003916 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80033a6:	4b7e      	ldr	r3, [pc, #504]	@ (80035a0 <HAL_RCC_OscConfig+0xa34>)
 80033a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80033ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1ed      	bne.n	8003390 <HAL_RCC_OscConfig+0x824>
 80033b4:	e037      	b.n	8003426 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80033b6:	f7fe fc3f 	bl	8001c38 <HAL_GetTick>
 80033ba:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033bc:	e00a      	b.n	80033d4 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033be:	f7fe fc3b 	bl	8001c38 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e2a0      	b.n	8003916 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033d4:	4b72      	ldr	r3, [pc, #456]	@ (80035a0 <HAL_RCC_OscConfig+0xa34>)
 80033d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1ed      	bne.n	80033be <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80033e2:	4b6f      	ldr	r3, [pc, #444]	@ (80035a0 <HAL_RCC_OscConfig+0xa34>)
 80033e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80033e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d01a      	beq.n	8003426 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80033f0:	4b6b      	ldr	r3, [pc, #428]	@ (80035a0 <HAL_RCC_OscConfig+0xa34>)
 80033f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80033f6:	4a6a      	ldr	r2, [pc, #424]	@ (80035a0 <HAL_RCC_OscConfig+0xa34>)
 80033f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033fc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003400:	e00a      	b.n	8003418 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003402:	f7fe fc19 	bl	8001c38 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003410:	4293      	cmp	r3, r2
 8003412:	d901      	bls.n	8003418 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e27e      	b.n	8003916 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003418:	4b61      	ldr	r3, [pc, #388]	@ (80035a0 <HAL_RCC_OscConfig+0xa34>)
 800341a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800341e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1ed      	bne.n	8003402 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003426:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800342a:	2b01      	cmp	r3, #1
 800342c:	d107      	bne.n	800343e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800342e:	4b5c      	ldr	r3, [pc, #368]	@ (80035a0 <HAL_RCC_OscConfig+0xa34>)
 8003430:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003434:	4a5a      	ldr	r2, [pc, #360]	@ (80035a0 <HAL_RCC_OscConfig+0xa34>)
 8003436:	f023 0304 	bic.w	r3, r3, #4
 800343a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0320 	and.w	r3, r3, #32
 8003446:	2b00      	cmp	r3, #0
 8003448:	d036      	beq.n	80034b8 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800344e:	2b00      	cmp	r3, #0
 8003450:	d019      	beq.n	8003486 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8003452:	4b53      	ldr	r3, [pc, #332]	@ (80035a0 <HAL_RCC_OscConfig+0xa34>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a52      	ldr	r2, [pc, #328]	@ (80035a0 <HAL_RCC_OscConfig+0xa34>)
 8003458:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800345c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800345e:	f7fe fbeb 	bl	8001c38 <HAL_GetTick>
 8003462:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003464:	e008      	b.n	8003478 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003466:	f7fe fbe7 	bl	8001c38 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b02      	cmp	r3, #2
 8003472:	d901      	bls.n	8003478 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e24e      	b.n	8003916 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003478:	4b49      	ldr	r3, [pc, #292]	@ (80035a0 <HAL_RCC_OscConfig+0xa34>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d0f0      	beq.n	8003466 <HAL_RCC_OscConfig+0x8fa>
 8003484:	e018      	b.n	80034b8 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8003486:	4b46      	ldr	r3, [pc, #280]	@ (80035a0 <HAL_RCC_OscConfig+0xa34>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a45      	ldr	r2, [pc, #276]	@ (80035a0 <HAL_RCC_OscConfig+0xa34>)
 800348c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003490:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003492:	f7fe fbd1 	bl	8001c38 <HAL_GetTick>
 8003496:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003498:	e008      	b.n	80034ac <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800349a:	f7fe fbcd 	bl	8001c38 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d901      	bls.n	80034ac <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e234      	b.n	8003916 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80034ac:	4b3c      	ldr	r3, [pc, #240]	@ (80035a0 <HAL_RCC_OscConfig+0xa34>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1f0      	bne.n	800349a <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d036      	beq.n	8003532 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d019      	beq.n	8003500 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80034cc:	4b34      	ldr	r3, [pc, #208]	@ (80035a0 <HAL_RCC_OscConfig+0xa34>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a33      	ldr	r2, [pc, #204]	@ (80035a0 <HAL_RCC_OscConfig+0xa34>)
 80034d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034d6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80034d8:	f7fe fbae 	bl	8001c38 <HAL_GetTick>
 80034dc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80034de:	e008      	b.n	80034f2 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80034e0:	f7fe fbaa 	bl	8001c38 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e211      	b.n	8003916 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80034f2:	4b2b      	ldr	r3, [pc, #172]	@ (80035a0 <HAL_RCC_OscConfig+0xa34>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d0f0      	beq.n	80034e0 <HAL_RCC_OscConfig+0x974>
 80034fe:	e018      	b.n	8003532 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8003500:	4b27      	ldr	r3, [pc, #156]	@ (80035a0 <HAL_RCC_OscConfig+0xa34>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a26      	ldr	r2, [pc, #152]	@ (80035a0 <HAL_RCC_OscConfig+0xa34>)
 8003506:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800350a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800350c:	f7fe fb94 	bl	8001c38 <HAL_GetTick>
 8003510:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003514:	f7fe fb90 	bl	8001c38 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b02      	cmp	r3, #2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e1f7      	b.n	8003916 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8003526:	4b1e      	ldr	r3, [pc, #120]	@ (80035a0 <HAL_RCC_OscConfig+0xa34>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1f0      	bne.n	8003514 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800353a:	2b00      	cmp	r3, #0
 800353c:	d07f      	beq.n	800363e <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003542:	2b00      	cmp	r3, #0
 8003544:	d062      	beq.n	800360c <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8003546:	4b16      	ldr	r3, [pc, #88]	@ (80035a0 <HAL_RCC_OscConfig+0xa34>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	4a15      	ldr	r2, [pc, #84]	@ (80035a0 <HAL_RCC_OscConfig+0xa34>)
 800354c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003550:	6093      	str	r3, [r2, #8]
 8003552:	4b13      	ldr	r3, [pc, #76]	@ (80035a0 <HAL_RCC_OscConfig+0xa34>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800355e:	4910      	ldr	r1, [pc, #64]	@ (80035a0 <HAL_RCC_OscConfig+0xa34>)
 8003560:	4313      	orrs	r3, r2
 8003562:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003568:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800356c:	d309      	bcc.n	8003582 <HAL_RCC_OscConfig+0xa16>
 800356e:	4b0c      	ldr	r3, [pc, #48]	@ (80035a0 <HAL_RCC_OscConfig+0xa34>)
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	f023 021f 	bic.w	r2, r3, #31
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	4909      	ldr	r1, [pc, #36]	@ (80035a0 <HAL_RCC_OscConfig+0xa34>)
 800357c:	4313      	orrs	r3, r2
 800357e:	60cb      	str	r3, [r1, #12]
 8003580:	e02a      	b.n	80035d8 <HAL_RCC_OscConfig+0xa6c>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003586:	2b00      	cmp	r3, #0
 8003588:	da0c      	bge.n	80035a4 <HAL_RCC_OscConfig+0xa38>
 800358a:	4b05      	ldr	r3, [pc, #20]	@ (80035a0 <HAL_RCC_OscConfig+0xa34>)
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	015b      	lsls	r3, r3, #5
 8003598:	4901      	ldr	r1, [pc, #4]	@ (80035a0 <HAL_RCC_OscConfig+0xa34>)
 800359a:	4313      	orrs	r3, r2
 800359c:	60cb      	str	r3, [r1, #12]
 800359e:	e01b      	b.n	80035d8 <HAL_RCC_OscConfig+0xa6c>
 80035a0:	46020c00 	.word	0x46020c00
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035ac:	d30a      	bcc.n	80035c4 <HAL_RCC_OscConfig+0xa58>
 80035ae:	4ba1      	ldr	r3, [pc, #644]	@ (8003834 <HAL_RCC_OscConfig+0xcc8>)
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	029b      	lsls	r3, r3, #10
 80035bc:	499d      	ldr	r1, [pc, #628]	@ (8003834 <HAL_RCC_OscConfig+0xcc8>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	60cb      	str	r3, [r1, #12]
 80035c2:	e009      	b.n	80035d8 <HAL_RCC_OscConfig+0xa6c>
 80035c4:	4b9b      	ldr	r3, [pc, #620]	@ (8003834 <HAL_RCC_OscConfig+0xcc8>)
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a1b      	ldr	r3, [r3, #32]
 80035d0:	03db      	lsls	r3, r3, #15
 80035d2:	4998      	ldr	r1, [pc, #608]	@ (8003834 <HAL_RCC_OscConfig+0xcc8>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80035d8:	4b96      	ldr	r3, [pc, #600]	@ (8003834 <HAL_RCC_OscConfig+0xcc8>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a95      	ldr	r2, [pc, #596]	@ (8003834 <HAL_RCC_OscConfig+0xcc8>)
 80035de:	f043 0310 	orr.w	r3, r3, #16
 80035e2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80035e4:	f7fe fb28 	bl	8001c38 <HAL_GetTick>
 80035e8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80035ec:	f7fe fb24 	bl	8001c38 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e18b      	b.n	8003916 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80035fe:	4b8d      	ldr	r3, [pc, #564]	@ (8003834 <HAL_RCC_OscConfig+0xcc8>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0320 	and.w	r3, r3, #32
 8003606:	2b00      	cmp	r3, #0
 8003608:	d0f0      	beq.n	80035ec <HAL_RCC_OscConfig+0xa80>
 800360a:	e018      	b.n	800363e <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800360c:	4b89      	ldr	r3, [pc, #548]	@ (8003834 <HAL_RCC_OscConfig+0xcc8>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a88      	ldr	r2, [pc, #544]	@ (8003834 <HAL_RCC_OscConfig+0xcc8>)
 8003612:	f023 0310 	bic.w	r3, r3, #16
 8003616:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003618:	f7fe fb0e 	bl	8001c38 <HAL_GetTick>
 800361c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800361e:	e008      	b.n	8003632 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003620:	f7fe fb0a 	bl	8001c38 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b02      	cmp	r3, #2
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e171      	b.n	8003916 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8003632:	4b80      	ldr	r3, [pc, #512]	@ (8003834 <HAL_RCC_OscConfig+0xcc8>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0320 	and.w	r3, r3, #32
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1f0      	bne.n	8003620 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003642:	2b00      	cmp	r3, #0
 8003644:	f000 8166 	beq.w	8003914 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8003648:	2300      	movs	r3, #0
 800364a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800364e:	4b79      	ldr	r3, [pc, #484]	@ (8003834 <HAL_RCC_OscConfig+0xcc8>)
 8003650:	69db      	ldr	r3, [r3, #28]
 8003652:	f003 030c 	and.w	r3, r3, #12
 8003656:	2b0c      	cmp	r3, #12
 8003658:	f000 80f2 	beq.w	8003840 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003660:	2b02      	cmp	r3, #2
 8003662:	f040 80c5 	bne.w	80037f0 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8003666:	4b73      	ldr	r3, [pc, #460]	@ (8003834 <HAL_RCC_OscConfig+0xcc8>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a72      	ldr	r2, [pc, #456]	@ (8003834 <HAL_RCC_OscConfig+0xcc8>)
 800366c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003670:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003672:	f7fe fae1 	bl	8001c38 <HAL_GetTick>
 8003676:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003678:	e008      	b.n	800368c <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800367a:	f7fe fadd 	bl	8001c38 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	2b02      	cmp	r3, #2
 8003686:	d901      	bls.n	800368c <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e144      	b.n	8003916 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800368c:	4b69      	ldr	r3, [pc, #420]	@ (8003834 <HAL_RCC_OscConfig+0xcc8>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1f0      	bne.n	800367a <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003698:	4b66      	ldr	r3, [pc, #408]	@ (8003834 <HAL_RCC_OscConfig+0xcc8>)
 800369a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800369e:	f003 0304 	and.w	r3, r3, #4
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d111      	bne.n	80036ca <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80036a6:	4b63      	ldr	r3, [pc, #396]	@ (8003834 <HAL_RCC_OscConfig+0xcc8>)
 80036a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036ac:	4a61      	ldr	r2, [pc, #388]	@ (8003834 <HAL_RCC_OscConfig+0xcc8>)
 80036ae:	f043 0304 	orr.w	r3, r3, #4
 80036b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80036b6:	4b5f      	ldr	r3, [pc, #380]	@ (8003834 <HAL_RCC_OscConfig+0xcc8>)
 80036b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036bc:	f003 0304 	and.w	r3, r3, #4
 80036c0:	60fb      	str	r3, [r7, #12]
 80036c2:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80036c4:	2301      	movs	r3, #1
 80036c6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80036ca:	4b5b      	ldr	r3, [pc, #364]	@ (8003838 <HAL_RCC_OscConfig+0xccc>)
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036d2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80036d6:	d102      	bne.n	80036de <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 80036d8:	2301      	movs	r3, #1
 80036da:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80036de:	4b56      	ldr	r3, [pc, #344]	@ (8003838 <HAL_RCC_OscConfig+0xccc>)
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	4a55      	ldr	r2, [pc, #340]	@ (8003838 <HAL_RCC_OscConfig+0xccc>)
 80036e4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036e8:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80036ea:	4b52      	ldr	r3, [pc, #328]	@ (8003834 <HAL_RCC_OscConfig+0xcc8>)
 80036ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80036f2:	f023 0303 	bic.w	r3, r3, #3
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80036fe:	3a01      	subs	r2, #1
 8003700:	0212      	lsls	r2, r2, #8
 8003702:	4311      	orrs	r1, r2
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003708:	430a      	orrs	r2, r1
 800370a:	494a      	ldr	r1, [pc, #296]	@ (8003834 <HAL_RCC_OscConfig+0xcc8>)
 800370c:	4313      	orrs	r3, r2
 800370e:	628b      	str	r3, [r1, #40]	@ 0x28
 8003710:	4b48      	ldr	r3, [pc, #288]	@ (8003834 <HAL_RCC_OscConfig+0xcc8>)
 8003712:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003714:	4b49      	ldr	r3, [pc, #292]	@ (800383c <HAL_RCC_OscConfig+0xcd0>)
 8003716:	4013      	ands	r3, r2
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800371c:	3a01      	subs	r2, #1
 800371e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003726:	3a01      	subs	r2, #1
 8003728:	0252      	lsls	r2, r2, #9
 800372a:	b292      	uxth	r2, r2
 800372c:	4311      	orrs	r1, r2
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003732:	3a01      	subs	r2, #1
 8003734:	0412      	lsls	r2, r2, #16
 8003736:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800373a:	4311      	orrs	r1, r2
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003740:	3a01      	subs	r2, #1
 8003742:	0612      	lsls	r2, r2, #24
 8003744:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8003748:	430a      	orrs	r2, r1
 800374a:	493a      	ldr	r1, [pc, #232]	@ (8003834 <HAL_RCC_OscConfig+0xcc8>)
 800374c:	4313      	orrs	r3, r2
 800374e:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8003750:	4b38      	ldr	r3, [pc, #224]	@ (8003834 <HAL_RCC_OscConfig+0xcc8>)
 8003752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003754:	4a37      	ldr	r2, [pc, #220]	@ (8003834 <HAL_RCC_OscConfig+0xcc8>)
 8003756:	f023 0310 	bic.w	r3, r3, #16
 800375a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003760:	4a34      	ldr	r2, [pc, #208]	@ (8003834 <HAL_RCC_OscConfig+0xcc8>)
 8003762:	00db      	lsls	r3, r3, #3
 8003764:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8003766:	4b33      	ldr	r3, [pc, #204]	@ (8003834 <HAL_RCC_OscConfig+0xcc8>)
 8003768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800376a:	4a32      	ldr	r2, [pc, #200]	@ (8003834 <HAL_RCC_OscConfig+0xcc8>)
 800376c:	f043 0310 	orr.w	r3, r3, #16
 8003770:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8003772:	4b30      	ldr	r3, [pc, #192]	@ (8003834 <HAL_RCC_OscConfig+0xcc8>)
 8003774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003776:	f023 020c 	bic.w	r2, r3, #12
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800377e:	492d      	ldr	r1, [pc, #180]	@ (8003834 <HAL_RCC_OscConfig+0xcc8>)
 8003780:	4313      	orrs	r3, r2
 8003782:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8003784:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003788:	2b01      	cmp	r3, #1
 800378a:	d105      	bne.n	8003798 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800378c:	4b2a      	ldr	r3, [pc, #168]	@ (8003838 <HAL_RCC_OscConfig+0xccc>)
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	4a29      	ldr	r2, [pc, #164]	@ (8003838 <HAL_RCC_OscConfig+0xccc>)
 8003792:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003796:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8003798:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800379c:	2b01      	cmp	r3, #1
 800379e:	d107      	bne.n	80037b0 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80037a0:	4b24      	ldr	r3, [pc, #144]	@ (8003834 <HAL_RCC_OscConfig+0xcc8>)
 80037a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037a6:	4a23      	ldr	r2, [pc, #140]	@ (8003834 <HAL_RCC_OscConfig+0xcc8>)
 80037a8:	f023 0304 	bic.w	r3, r3, #4
 80037ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80037b0:	4b20      	ldr	r3, [pc, #128]	@ (8003834 <HAL_RCC_OscConfig+0xcc8>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a1f      	ldr	r2, [pc, #124]	@ (8003834 <HAL_RCC_OscConfig+0xcc8>)
 80037b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037ba:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80037bc:	f7fe fa3c 	bl	8001c38 <HAL_GetTick>
 80037c0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80037c2:	e008      	b.n	80037d6 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037c4:	f7fe fa38 	bl	8001c38 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e09f      	b.n	8003916 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80037d6:	4b17      	ldr	r3, [pc, #92]	@ (8003834 <HAL_RCC_OscConfig+0xcc8>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d0f0      	beq.n	80037c4 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80037e2:	4b14      	ldr	r3, [pc, #80]	@ (8003834 <HAL_RCC_OscConfig+0xcc8>)
 80037e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037e6:	4a13      	ldr	r2, [pc, #76]	@ (8003834 <HAL_RCC_OscConfig+0xcc8>)
 80037e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037ec:	6293      	str	r3, [r2, #40]	@ 0x28
 80037ee:	e091      	b.n	8003914 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80037f0:	4b10      	ldr	r3, [pc, #64]	@ (8003834 <HAL_RCC_OscConfig+0xcc8>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a0f      	ldr	r2, [pc, #60]	@ (8003834 <HAL_RCC_OscConfig+0xcc8>)
 80037f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037fa:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80037fc:	f7fe fa1c 	bl	8001c38 <HAL_GetTick>
 8003800:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003802:	e008      	b.n	8003816 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003804:	f7fe fa18 	bl	8001c38 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b02      	cmp	r3, #2
 8003810:	d901      	bls.n	8003816 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e07f      	b.n	8003916 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003816:	4b07      	ldr	r3, [pc, #28]	@ (8003834 <HAL_RCC_OscConfig+0xcc8>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1f0      	bne.n	8003804 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003822:	4b04      	ldr	r3, [pc, #16]	@ (8003834 <HAL_RCC_OscConfig+0xcc8>)
 8003824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003826:	4a03      	ldr	r2, [pc, #12]	@ (8003834 <HAL_RCC_OscConfig+0xcc8>)
 8003828:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800382c:	f023 0303 	bic.w	r3, r3, #3
 8003830:	6293      	str	r3, [r2, #40]	@ 0x28
 8003832:	e06f      	b.n	8003914 <HAL_RCC_OscConfig+0xda8>
 8003834:	46020c00 	.word	0x46020c00
 8003838:	46020800 	.word	0x46020800
 800383c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003840:	4b37      	ldr	r3, [pc, #220]	@ (8003920 <HAL_RCC_OscConfig+0xdb4>)
 8003842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003844:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003846:	4b36      	ldr	r3, [pc, #216]	@ (8003920 <HAL_RCC_OscConfig+0xdb4>)
 8003848:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800384a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003850:	2b01      	cmp	r3, #1
 8003852:	d039      	beq.n	80038c8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	f003 0203 	and.w	r2, r3, #3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800385e:	429a      	cmp	r2, r3
 8003860:	d132      	bne.n	80038c8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	0a1b      	lsrs	r3, r3, #8
 8003866:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800386e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8003870:	429a      	cmp	r2, r3
 8003872:	d129      	bne.n	80038c8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800387e:	429a      	cmp	r2, r3
 8003880:	d122      	bne.n	80038c8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800388c:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800388e:	429a      	cmp	r2, r3
 8003890:	d11a      	bne.n	80038c8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	0a5b      	lsrs	r3, r3, #9
 8003896:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800389e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d111      	bne.n	80038c8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	0c1b      	lsrs	r3, r3, #16
 80038a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038b0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d108      	bne.n	80038c8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	0e1b      	lsrs	r3, r3, #24
 80038ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038c2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d001      	beq.n	80038cc <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e024      	b.n	8003916 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80038cc:	4b14      	ldr	r3, [pc, #80]	@ (8003920 <HAL_RCC_OscConfig+0xdb4>)
 80038ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038d0:	08db      	lsrs	r3, r3, #3
 80038d2:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80038da:	429a      	cmp	r2, r3
 80038dc:	d01a      	beq.n	8003914 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80038de:	4b10      	ldr	r3, [pc, #64]	@ (8003920 <HAL_RCC_OscConfig+0xdb4>)
 80038e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038e2:	4a0f      	ldr	r2, [pc, #60]	@ (8003920 <HAL_RCC_OscConfig+0xdb4>)
 80038e4:	f023 0310 	bic.w	r3, r3, #16
 80038e8:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ea:	f7fe f9a5 	bl	8001c38 <HAL_GetTick>
 80038ee:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80038f0:	bf00      	nop
 80038f2:	f7fe f9a1 	bl	8001c38 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d0f9      	beq.n	80038f2 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003902:	4a07      	ldr	r2, [pc, #28]	@ (8003920 <HAL_RCC_OscConfig+0xdb4>)
 8003904:	00db      	lsls	r3, r3, #3
 8003906:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8003908:	4b05      	ldr	r3, [pc, #20]	@ (8003920 <HAL_RCC_OscConfig+0xdb4>)
 800390a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800390c:	4a04      	ldr	r2, [pc, #16]	@ (8003920 <HAL_RCC_OscConfig+0xdb4>)
 800390e:	f043 0310 	orr.w	r3, r3, #16
 8003912:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3738      	adds	r7, #56	@ 0x38
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	46020c00 	.word	0x46020c00

08003924 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b086      	sub	sp, #24
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d101      	bne.n	8003938 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e1d9      	b.n	8003cec <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003938:	4b9b      	ldr	r3, [pc, #620]	@ (8003ba8 <HAL_RCC_ClockConfig+0x284>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 030f 	and.w	r3, r3, #15
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	429a      	cmp	r2, r3
 8003944:	d910      	bls.n	8003968 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003946:	4b98      	ldr	r3, [pc, #608]	@ (8003ba8 <HAL_RCC_ClockConfig+0x284>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f023 020f 	bic.w	r2, r3, #15
 800394e:	4996      	ldr	r1, [pc, #600]	@ (8003ba8 <HAL_RCC_ClockConfig+0x284>)
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	4313      	orrs	r3, r2
 8003954:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003956:	4b94      	ldr	r3, [pc, #592]	@ (8003ba8 <HAL_RCC_ClockConfig+0x284>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 030f 	and.w	r3, r3, #15
 800395e:	683a      	ldr	r2, [r7, #0]
 8003960:	429a      	cmp	r2, r3
 8003962:	d001      	beq.n	8003968 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e1c1      	b.n	8003cec <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0310 	and.w	r3, r3, #16
 8003970:	2b00      	cmp	r3, #0
 8003972:	d010      	beq.n	8003996 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	695a      	ldr	r2, [r3, #20]
 8003978:	4b8c      	ldr	r3, [pc, #560]	@ (8003bac <HAL_RCC_ClockConfig+0x288>)
 800397a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800397c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003980:	429a      	cmp	r2, r3
 8003982:	d908      	bls.n	8003996 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8003984:	4b89      	ldr	r3, [pc, #548]	@ (8003bac <HAL_RCC_ClockConfig+0x288>)
 8003986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003988:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	695b      	ldr	r3, [r3, #20]
 8003990:	4986      	ldr	r1, [pc, #536]	@ (8003bac <HAL_RCC_ClockConfig+0x288>)
 8003992:	4313      	orrs	r3, r2
 8003994:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0308 	and.w	r3, r3, #8
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d012      	beq.n	80039c8 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	691a      	ldr	r2, [r3, #16]
 80039a6:	4b81      	ldr	r3, [pc, #516]	@ (8003bac <HAL_RCC_ClockConfig+0x288>)
 80039a8:	6a1b      	ldr	r3, [r3, #32]
 80039aa:	091b      	lsrs	r3, r3, #4
 80039ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d909      	bls.n	80039c8 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80039b4:	4b7d      	ldr	r3, [pc, #500]	@ (8003bac <HAL_RCC_ClockConfig+0x288>)
 80039b6:	6a1b      	ldr	r3, [r3, #32]
 80039b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	011b      	lsls	r3, r3, #4
 80039c2:	497a      	ldr	r1, [pc, #488]	@ (8003bac <HAL_RCC_ClockConfig+0x288>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0304 	and.w	r3, r3, #4
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d010      	beq.n	80039f6 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	68da      	ldr	r2, [r3, #12]
 80039d8:	4b74      	ldr	r3, [pc, #464]	@ (8003bac <HAL_RCC_ClockConfig+0x288>)
 80039da:	6a1b      	ldr	r3, [r3, #32]
 80039dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d908      	bls.n	80039f6 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80039e4:	4b71      	ldr	r3, [pc, #452]	@ (8003bac <HAL_RCC_ClockConfig+0x288>)
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	496e      	ldr	r1, [pc, #440]	@ (8003bac <HAL_RCC_ClockConfig+0x288>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d010      	beq.n	8003a24 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	689a      	ldr	r2, [r3, #8]
 8003a06:	4b69      	ldr	r3, [pc, #420]	@ (8003bac <HAL_RCC_ClockConfig+0x288>)
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	f003 030f 	and.w	r3, r3, #15
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d908      	bls.n	8003a24 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8003a12:	4b66      	ldr	r3, [pc, #408]	@ (8003bac <HAL_RCC_ClockConfig+0x288>)
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	f023 020f 	bic.w	r2, r3, #15
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	4963      	ldr	r1, [pc, #396]	@ (8003bac <HAL_RCC_ClockConfig+0x288>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0301 	and.w	r3, r3, #1
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f000 80d2 	beq.w	8003bd6 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8003a32:	2300      	movs	r3, #0
 8003a34:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	2b03      	cmp	r3, #3
 8003a3c:	d143      	bne.n	8003ac6 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a3e:	4b5b      	ldr	r3, [pc, #364]	@ (8003bac <HAL_RCC_ClockConfig+0x288>)
 8003a40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a44:	f003 0304 	and.w	r3, r3, #4
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d110      	bne.n	8003a6e <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003a4c:	4b57      	ldr	r3, [pc, #348]	@ (8003bac <HAL_RCC_ClockConfig+0x288>)
 8003a4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a52:	4a56      	ldr	r2, [pc, #344]	@ (8003bac <HAL_RCC_ClockConfig+0x288>)
 8003a54:	f043 0304 	orr.w	r3, r3, #4
 8003a58:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003a5c:	4b53      	ldr	r3, [pc, #332]	@ (8003bac <HAL_RCC_ClockConfig+0x288>)
 8003a5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a62:	f003 0304 	and.w	r3, r3, #4
 8003a66:	60bb      	str	r3, [r7, #8]
 8003a68:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8003a6e:	f7fe f8e3 	bl	8001c38 <HAL_GetTick>
 8003a72:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8003a74:	4b4e      	ldr	r3, [pc, #312]	@ (8003bb0 <HAL_RCC_ClockConfig+0x28c>)
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00f      	beq.n	8003aa0 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8003a80:	e008      	b.n	8003a94 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8003a82:	f7fe f8d9 	bl	8001c38 <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d901      	bls.n	8003a94 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e12b      	b.n	8003cec <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8003a94:	4b46      	ldr	r3, [pc, #280]	@ (8003bb0 <HAL_RCC_ClockConfig+0x28c>)
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d0f0      	beq.n	8003a82 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003aa0:	7dfb      	ldrb	r3, [r7, #23]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d107      	bne.n	8003ab6 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003aa6:	4b41      	ldr	r3, [pc, #260]	@ (8003bac <HAL_RCC_ClockConfig+0x288>)
 8003aa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003aac:	4a3f      	ldr	r2, [pc, #252]	@ (8003bac <HAL_RCC_ClockConfig+0x288>)
 8003aae:	f023 0304 	bic.w	r3, r3, #4
 8003ab2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003ab6:	4b3d      	ldr	r3, [pc, #244]	@ (8003bac <HAL_RCC_ClockConfig+0x288>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d121      	bne.n	8003b06 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e112      	b.n	8003cec <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d107      	bne.n	8003ade <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ace:	4b37      	ldr	r3, [pc, #220]	@ (8003bac <HAL_RCC_ClockConfig+0x288>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d115      	bne.n	8003b06 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e106      	b.n	8003cec <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d107      	bne.n	8003af6 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003ae6:	4b31      	ldr	r3, [pc, #196]	@ (8003bac <HAL_RCC_ClockConfig+0x288>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0304 	and.w	r3, r3, #4
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d109      	bne.n	8003b06 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e0fa      	b.n	8003cec <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003af6:	4b2d      	ldr	r3, [pc, #180]	@ (8003bac <HAL_RCC_ClockConfig+0x288>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e0f2      	b.n	8003cec <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8003b06:	4b29      	ldr	r3, [pc, #164]	@ (8003bac <HAL_RCC_ClockConfig+0x288>)
 8003b08:	69db      	ldr	r3, [r3, #28]
 8003b0a:	f023 0203 	bic.w	r2, r3, #3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	4926      	ldr	r1, [pc, #152]	@ (8003bac <HAL_RCC_ClockConfig+0x288>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8003b18:	f7fe f88e 	bl	8001c38 <HAL_GetTick>
 8003b1c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	2b03      	cmp	r3, #3
 8003b24:	d112      	bne.n	8003b4c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b26:	e00a      	b.n	8003b3e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b28:	f7fe f886 	bl	8001c38 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e0d6      	b.n	8003cec <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b3e:	4b1b      	ldr	r3, [pc, #108]	@ (8003bac <HAL_RCC_ClockConfig+0x288>)
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	f003 030c 	and.w	r3, r3, #12
 8003b46:	2b0c      	cmp	r3, #12
 8003b48:	d1ee      	bne.n	8003b28 <HAL_RCC_ClockConfig+0x204>
 8003b4a:	e044      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d112      	bne.n	8003b7a <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b54:	e00a      	b.n	8003b6c <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b56:	f7fe f86f 	bl	8001c38 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d901      	bls.n	8003b6c <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e0bf      	b.n	8003cec <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b6c:	4b0f      	ldr	r3, [pc, #60]	@ (8003bac <HAL_RCC_ClockConfig+0x288>)
 8003b6e:	69db      	ldr	r3, [r3, #28]
 8003b70:	f003 030c 	and.w	r3, r3, #12
 8003b74:	2b08      	cmp	r3, #8
 8003b76:	d1ee      	bne.n	8003b56 <HAL_RCC_ClockConfig+0x232>
 8003b78:	e02d      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d123      	bne.n	8003bca <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003b82:	e00a      	b.n	8003b9a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b84:	f7fe f858 	bl	8001c38 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e0a8      	b.n	8003cec <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003b9a:	4b04      	ldr	r3, [pc, #16]	@ (8003bac <HAL_RCC_ClockConfig+0x288>)
 8003b9c:	69db      	ldr	r3, [r3, #28]
 8003b9e:	f003 030c 	and.w	r3, r3, #12
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1ee      	bne.n	8003b84 <HAL_RCC_ClockConfig+0x260>
 8003ba6:	e016      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x2b2>
 8003ba8:	40022000 	.word	0x40022000
 8003bac:	46020c00 	.word	0x46020c00
 8003bb0:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bb4:	f7fe f840 	bl	8001c38 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e090      	b.n	8003cec <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bca:	4b4a      	ldr	r3, [pc, #296]	@ (8003cf4 <HAL_RCC_ClockConfig+0x3d0>)
 8003bcc:	69db      	ldr	r3, [r3, #28]
 8003bce:	f003 030c 	and.w	r3, r3, #12
 8003bd2:	2b04      	cmp	r3, #4
 8003bd4:	d1ee      	bne.n	8003bb4 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d010      	beq.n	8003c04 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	689a      	ldr	r2, [r3, #8]
 8003be6:	4b43      	ldr	r3, [pc, #268]	@ (8003cf4 <HAL_RCC_ClockConfig+0x3d0>)
 8003be8:	6a1b      	ldr	r3, [r3, #32]
 8003bea:	f003 030f 	and.w	r3, r3, #15
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d208      	bcs.n	8003c04 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8003bf2:	4b40      	ldr	r3, [pc, #256]	@ (8003cf4 <HAL_RCC_ClockConfig+0x3d0>)
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	f023 020f 	bic.w	r2, r3, #15
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	493d      	ldr	r1, [pc, #244]	@ (8003cf4 <HAL_RCC_ClockConfig+0x3d0>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c04:	4b3c      	ldr	r3, [pc, #240]	@ (8003cf8 <HAL_RCC_ClockConfig+0x3d4>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 030f 	and.w	r3, r3, #15
 8003c0c:	683a      	ldr	r2, [r7, #0]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d210      	bcs.n	8003c34 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c12:	4b39      	ldr	r3, [pc, #228]	@ (8003cf8 <HAL_RCC_ClockConfig+0x3d4>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f023 020f 	bic.w	r2, r3, #15
 8003c1a:	4937      	ldr	r1, [pc, #220]	@ (8003cf8 <HAL_RCC_ClockConfig+0x3d4>)
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c22:	4b35      	ldr	r3, [pc, #212]	@ (8003cf8 <HAL_RCC_ClockConfig+0x3d4>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 030f 	and.w	r3, r3, #15
 8003c2a:	683a      	ldr	r2, [r7, #0]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d001      	beq.n	8003c34 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e05b      	b.n	8003cec <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0304 	and.w	r3, r3, #4
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d010      	beq.n	8003c62 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	68da      	ldr	r2, [r3, #12]
 8003c44:	4b2b      	ldr	r3, [pc, #172]	@ (8003cf4 <HAL_RCC_ClockConfig+0x3d0>)
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d208      	bcs.n	8003c62 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8003c50:	4b28      	ldr	r3, [pc, #160]	@ (8003cf4 <HAL_RCC_ClockConfig+0x3d0>)
 8003c52:	6a1b      	ldr	r3, [r3, #32]
 8003c54:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	4925      	ldr	r1, [pc, #148]	@ (8003cf4 <HAL_RCC_ClockConfig+0x3d0>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0308 	and.w	r3, r3, #8
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d012      	beq.n	8003c94 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	691a      	ldr	r2, [r3, #16]
 8003c72:	4b20      	ldr	r3, [pc, #128]	@ (8003cf4 <HAL_RCC_ClockConfig+0x3d0>)
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	091b      	lsrs	r3, r3, #4
 8003c78:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d209      	bcs.n	8003c94 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8003c80:	4b1c      	ldr	r3, [pc, #112]	@ (8003cf4 <HAL_RCC_ClockConfig+0x3d0>)
 8003c82:	6a1b      	ldr	r3, [r3, #32]
 8003c84:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	011b      	lsls	r3, r3, #4
 8003c8e:	4919      	ldr	r1, [pc, #100]	@ (8003cf4 <HAL_RCC_ClockConfig+0x3d0>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0310 	and.w	r3, r3, #16
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d010      	beq.n	8003cc2 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	695a      	ldr	r2, [r3, #20]
 8003ca4:	4b13      	ldr	r3, [pc, #76]	@ (8003cf4 <HAL_RCC_ClockConfig+0x3d0>)
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d208      	bcs.n	8003cc2 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8003cb0:	4b10      	ldr	r3, [pc, #64]	@ (8003cf4 <HAL_RCC_ClockConfig+0x3d0>)
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	695b      	ldr	r3, [r3, #20]
 8003cbc:	490d      	ldr	r1, [pc, #52]	@ (8003cf4 <HAL_RCC_ClockConfig+0x3d0>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003cc2:	f000 f821 	bl	8003d08 <HAL_RCC_GetSysClockFreq>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	4b0a      	ldr	r3, [pc, #40]	@ (8003cf4 <HAL_RCC_ClockConfig+0x3d0>)
 8003cca:	6a1b      	ldr	r3, [r3, #32]
 8003ccc:	f003 030f 	and.w	r3, r3, #15
 8003cd0:	490a      	ldr	r1, [pc, #40]	@ (8003cfc <HAL_RCC_ClockConfig+0x3d8>)
 8003cd2:	5ccb      	ldrb	r3, [r1, r3]
 8003cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8003cd8:	4a09      	ldr	r2, [pc, #36]	@ (8003d00 <HAL_RCC_ClockConfig+0x3dc>)
 8003cda:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003cdc:	4b09      	ldr	r3, [pc, #36]	@ (8003d04 <HAL_RCC_ClockConfig+0x3e0>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7fd ff1f 	bl	8001b24 <HAL_InitTick>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	73fb      	strb	r3, [r7, #15]

  return status;
 8003cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3718      	adds	r7, #24
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	46020c00 	.word	0x46020c00
 8003cf8:	40022000 	.word	0x40022000
 8003cfc:	0800b97c 	.word	0x0800b97c
 8003d00:	2000001c 	.word	0x2000001c
 8003d04:	20000020 	.word	0x20000020

08003d08 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b08b      	sub	sp, #44	@ 0x2c
 8003d0c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8003d12:	2300      	movs	r3, #0
 8003d14:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d16:	4b78      	ldr	r3, [pc, #480]	@ (8003ef8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003d18:	69db      	ldr	r3, [r3, #28]
 8003d1a:	f003 030c 	and.w	r3, r3, #12
 8003d1e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d20:	4b75      	ldr	r3, [pc, #468]	@ (8003ef8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d24:	f003 0303 	and.w	r3, r3, #3
 8003d28:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d005      	beq.n	8003d3c <HAL_RCC_GetSysClockFreq+0x34>
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	2b0c      	cmp	r3, #12
 8003d34:	d121      	bne.n	8003d7a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d11e      	bne.n	8003d7a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8003d3c:	4b6e      	ldr	r3, [pc, #440]	@ (8003ef8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d107      	bne.n	8003d58 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8003d48:	4b6b      	ldr	r3, [pc, #428]	@ (8003ef8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003d4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003d4e:	0b1b      	lsrs	r3, r3, #12
 8003d50:	f003 030f 	and.w	r3, r3, #15
 8003d54:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d56:	e005      	b.n	8003d64 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8003d58:	4b67      	ldr	r3, [pc, #412]	@ (8003ef8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	0f1b      	lsrs	r3, r3, #28
 8003d5e:	f003 030f 	and.w	r3, r3, #15
 8003d62:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003d64:	4a65      	ldr	r2, [pc, #404]	@ (8003efc <HAL_RCC_GetSysClockFreq+0x1f4>)
 8003d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d6c:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d110      	bne.n	8003d96 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d76:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003d78:	e00d      	b.n	8003d96 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d7a:	4b5f      	ldr	r3, [pc, #380]	@ (8003ef8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003d7c:	69db      	ldr	r3, [r3, #28]
 8003d7e:	f003 030c 	and.w	r3, r3, #12
 8003d82:	2b04      	cmp	r3, #4
 8003d84:	d102      	bne.n	8003d8c <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d86:	4b5e      	ldr	r3, [pc, #376]	@ (8003f00 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8003d88:	623b      	str	r3, [r7, #32]
 8003d8a:	e004      	b.n	8003d96 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	2b08      	cmp	r3, #8
 8003d90:	d101      	bne.n	8003d96 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d92:	4b5b      	ldr	r3, [pc, #364]	@ (8003f00 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8003d94:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	2b0c      	cmp	r3, #12
 8003d9a:	f040 80a5 	bne.w	8003ee8 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003d9e:	4b56      	ldr	r3, [pc, #344]	@ (8003ef8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003da2:	f003 0303 	and.w	r3, r3, #3
 8003da6:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003da8:	4b53      	ldr	r3, [pc, #332]	@ (8003ef8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dac:	0a1b      	lsrs	r3, r3, #8
 8003dae:	f003 030f 	and.w	r3, r3, #15
 8003db2:	3301      	adds	r3, #1
 8003db4:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003db6:	4b50      	ldr	r3, [pc, #320]	@ (8003ef8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dba:	091b      	lsrs	r3, r3, #4
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003dc2:	4b4d      	ldr	r3, [pc, #308]	@ (8003ef8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dc6:	08db      	lsrs	r3, r3, #3
 8003dc8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003dcc:	68ba      	ldr	r2, [r7, #8]
 8003dce:	fb02 f303 	mul.w	r3, r2, r3
 8003dd2:	ee07 3a90 	vmov	s15, r3
 8003dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dda:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d003      	beq.n	8003dec <HAL_RCC_GetSysClockFreq+0xe4>
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	2b03      	cmp	r3, #3
 8003de8:	d022      	beq.n	8003e30 <HAL_RCC_GetSysClockFreq+0x128>
 8003dea:	e043      	b.n	8003e74 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	ee07 3a90 	vmov	s15, r3
 8003df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003df6:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8003f04 <HAL_RCC_GetSysClockFreq+0x1fc>
 8003dfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dfe:	4b3e      	ldr	r3, [pc, #248]	@ (8003ef8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003e00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e06:	ee07 3a90 	vmov	s15, r3
 8003e0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003e0e:	ed97 6a01 	vldr	s12, [r7, #4]
 8003e12:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8003f08 <HAL_RCC_GetSysClockFreq+0x200>
 8003e16:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003e1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003e1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e22:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e2e:	e046      	b.n	8003ebe <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	ee07 3a90 	vmov	s15, r3
 8003e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e3a:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8003f04 <HAL_RCC_GetSysClockFreq+0x1fc>
 8003e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e42:	4b2d      	ldr	r3, [pc, #180]	@ (8003ef8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003e44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e4a:	ee07 3a90 	vmov	s15, r3
 8003e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003e52:	ed97 6a01 	vldr	s12, [r7, #4]
 8003e56:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8003f08 <HAL_RCC_GetSysClockFreq+0x200>
 8003e5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003e62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e66:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e72:	e024      	b.n	8003ebe <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e76:	ee07 3a90 	vmov	s15, r3
 8003e7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	ee07 3a90 	vmov	s15, r3
 8003e84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e8c:	4b1a      	ldr	r3, [pc, #104]	@ (8003ef8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003e8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e94:	ee07 3a90 	vmov	s15, r3
 8003e98:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003e9c:	ed97 6a01 	vldr	s12, [r7, #4]
 8003ea0:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8003f08 <HAL_RCC_GetSysClockFreq+0x200>
 8003ea4:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003ea8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003eac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003eb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003eb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eb8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ebc:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8003ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8003ef8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003ec0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ec2:	0e1b      	lsrs	r3, r3, #24
 8003ec4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ec8:	3301      	adds	r3, #1
 8003eca:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	ee07 3a90 	vmov	s15, r3
 8003ed2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ed6:	edd7 6a07 	vldr	s13, [r7, #28]
 8003eda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ede:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ee2:	ee17 3a90 	vmov	r3, s15
 8003ee6:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8003ee8:	6a3b      	ldr	r3, [r7, #32]
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	372c      	adds	r7, #44	@ 0x2c
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	46020c00 	.word	0x46020c00
 8003efc:	0800b98c 	.word	0x0800b98c
 8003f00:	00f42400 	.word	0x00f42400
 8003f04:	4b742400 	.word	0x4b742400
 8003f08:	46000000 	.word	0x46000000

08003f0c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003f10:	f7ff fefa 	bl	8003d08 <HAL_RCC_GetSysClockFreq>
 8003f14:	4602      	mov	r2, r0
 8003f16:	4b07      	ldr	r3, [pc, #28]	@ (8003f34 <HAL_RCC_GetHCLKFreq+0x28>)
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	f003 030f 	and.w	r3, r3, #15
 8003f1e:	4906      	ldr	r1, [pc, #24]	@ (8003f38 <HAL_RCC_GetHCLKFreq+0x2c>)
 8003f20:	5ccb      	ldrb	r3, [r1, r3]
 8003f22:	fa22 f303 	lsr.w	r3, r2, r3
 8003f26:	4a05      	ldr	r2, [pc, #20]	@ (8003f3c <HAL_RCC_GetHCLKFreq+0x30>)
 8003f28:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8003f2a:	4b04      	ldr	r3, [pc, #16]	@ (8003f3c <HAL_RCC_GetHCLKFreq+0x30>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	46020c00 	.word	0x46020c00
 8003f38:	0800b97c 	.word	0x0800b97c
 8003f3c:	2000001c 	.word	0x2000001c

08003f40 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b086      	sub	sp, #24
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003f48:	4b3e      	ldr	r3, [pc, #248]	@ (8004044 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003f4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f4e:	f003 0304 	and.w	r3, r3, #4
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d003      	beq.n	8003f5e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003f56:	f7fe fdab 	bl	8002ab0 <HAL_PWREx_GetVoltageRange>
 8003f5a:	6178      	str	r0, [r7, #20]
 8003f5c:	e019      	b.n	8003f92 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f5e:	4b39      	ldr	r3, [pc, #228]	@ (8004044 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003f60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f64:	4a37      	ldr	r2, [pc, #220]	@ (8004044 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003f66:	f043 0304 	orr.w	r3, r3, #4
 8003f6a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003f6e:	4b35      	ldr	r3, [pc, #212]	@ (8004044 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003f70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f74:	f003 0304 	and.w	r3, r3, #4
 8003f78:	60fb      	str	r3, [r7, #12]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003f7c:	f7fe fd98 	bl	8002ab0 <HAL_PWREx_GetVoltageRange>
 8003f80:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003f82:	4b30      	ldr	r3, [pc, #192]	@ (8004044 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003f84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f88:	4a2e      	ldr	r2, [pc, #184]	@ (8004044 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003f8a:	f023 0304 	bic.w	r3, r3, #4
 8003f8e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003f98:	d003      	beq.n	8003fa2 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003fa0:	d109      	bne.n	8003fb6 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003fa8:	d202      	bcs.n	8003fb0 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8003faa:	2301      	movs	r3, #1
 8003fac:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8003fae:	e033      	b.n	8004018 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8003fb4:	e030      	b.n	8004018 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003fbc:	d208      	bcs.n	8003fd0 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fc4:	d102      	bne.n	8003fcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	613b      	str	r3, [r7, #16]
 8003fca:	e025      	b.n	8004018 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e035      	b.n	800403c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003fd6:	d90f      	bls.n	8003ff8 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d109      	bne.n	8003ff2 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003fe4:	d902      	bls.n	8003fec <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	613b      	str	r3, [r7, #16]
 8003fea:	e015      	b.n	8004018 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8003fec:	2301      	movs	r3, #1
 8003fee:	613b      	str	r3, [r7, #16]
 8003ff0:	e012      	b.n	8004018 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	613b      	str	r3, [r7, #16]
 8003ff6:	e00f      	b.n	8004018 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ffe:	d109      	bne.n	8004014 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004006:	d102      	bne.n	800400e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8004008:	2301      	movs	r3, #1
 800400a:	613b      	str	r3, [r7, #16]
 800400c:	e004      	b.n	8004018 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800400e:	2302      	movs	r3, #2
 8004010:	613b      	str	r3, [r7, #16]
 8004012:	e001      	b.n	8004018 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8004014:	2301      	movs	r3, #1
 8004016:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004018:	4b0b      	ldr	r3, [pc, #44]	@ (8004048 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f023 020f 	bic.w	r2, r3, #15
 8004020:	4909      	ldr	r1, [pc, #36]	@ (8004048 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	4313      	orrs	r3, r2
 8004026:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004028:	4b07      	ldr	r3, [pc, #28]	@ (8004048 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 030f 	and.w	r3, r3, #15
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	429a      	cmp	r2, r3
 8004034:	d001      	beq.n	800403a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e000      	b.n	800403c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3718      	adds	r7, #24
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	46020c00 	.word	0x46020c00
 8004048:	40022000 	.word	0x40022000

0800404c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800404c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004050:	b0b6      	sub	sp, #216	@ 0xd8
 8004052:	af00      	add	r7, sp, #0
 8004054:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004058:	2300      	movs	r3, #0
 800405a:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800405e:	2300      	movs	r3, #0
 8004060:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004064:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800406c:	f002 0401 	and.w	r4, r2, #1
 8004070:	2500      	movs	r5, #0
 8004072:	ea54 0305 	orrs.w	r3, r4, r5
 8004076:	d00b      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004078:	4bc5      	ldr	r3, [pc, #788]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800407a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800407e:	f023 0103 	bic.w	r1, r3, #3
 8004082:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004086:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004088:	4ac1      	ldr	r2, [pc, #772]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800408a:	430b      	orrs	r3, r1
 800408c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004090:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004098:	f002 0804 	and.w	r8, r2, #4
 800409c:	f04f 0900 	mov.w	r9, #0
 80040a0:	ea58 0309 	orrs.w	r3, r8, r9
 80040a4:	d00b      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80040a6:	4bba      	ldr	r3, [pc, #744]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80040a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80040ac:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80040b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80040b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040b6:	4ab6      	ldr	r2, [pc, #728]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80040b8:	430b      	orrs	r3, r1
 80040ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80040be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80040c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c6:	f002 0a08 	and.w	sl, r2, #8
 80040ca:	f04f 0b00 	mov.w	fp, #0
 80040ce:	ea5a 030b 	orrs.w	r3, sl, fp
 80040d2:	d00b      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80040d4:	4bae      	ldr	r3, [pc, #696]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80040d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80040da:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80040de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80040e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040e4:	4aaa      	ldr	r2, [pc, #680]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80040e6:	430b      	orrs	r3, r1
 80040e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80040ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80040f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f4:	f002 0310 	and.w	r3, r2, #16
 80040f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80040fc:	2300      	movs	r3, #0
 80040fe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004102:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004106:	460b      	mov	r3, r1
 8004108:	4313      	orrs	r3, r2
 800410a:	d00b      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800410c:	4ba0      	ldr	r3, [pc, #640]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800410e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004112:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004116:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800411a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800411c:	4a9c      	ldr	r2, [pc, #624]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800411e:	430b      	orrs	r3, r1
 8004120:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004124:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800412c:	f002 0320 	and.w	r3, r2, #32
 8004130:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004134:	2300      	movs	r3, #0
 8004136:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800413a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800413e:	460b      	mov	r3, r1
 8004140:	4313      	orrs	r3, r2
 8004142:	d00b      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004144:	4b92      	ldr	r3, [pc, #584]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004146:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800414a:	f023 0107 	bic.w	r1, r3, #7
 800414e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004152:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004154:	4a8e      	ldr	r2, [pc, #568]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004156:	430b      	orrs	r3, r1
 8004158:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800415c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004164:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004168:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800416c:	2300      	movs	r3, #0
 800416e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004172:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004176:	460b      	mov	r3, r1
 8004178:	4313      	orrs	r3, r2
 800417a:	d00b      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800417c:	4b84      	ldr	r3, [pc, #528]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800417e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004182:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8004186:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800418a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800418c:	4a80      	ldr	r2, [pc, #512]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800418e:	430b      	orrs	r3, r1
 8004190:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004194:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800419c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80041a0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80041a4:	2300      	movs	r3, #0
 80041a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80041aa:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80041ae:	460b      	mov	r3, r1
 80041b0:	4313      	orrs	r3, r2
 80041b2:	d00b      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80041b4:	4b76      	ldr	r3, [pc, #472]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80041b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80041ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80041be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80041c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041c4:	4a72      	ldr	r2, [pc, #456]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80041c6:	430b      	orrs	r3, r1
 80041c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80041d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d4:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 80041d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80041dc:	2300      	movs	r3, #0
 80041de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80041e2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80041e6:	460b      	mov	r3, r1
 80041e8:	4313      	orrs	r3, r2
 80041ea:	d00b      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80041ec:	4b68      	ldr	r3, [pc, #416]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80041ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80041f2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80041f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80041fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041fc:	4a64      	ldr	r2, [pc, #400]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80041fe:	430b      	orrs	r3, r1
 8004200:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004204:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004210:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004214:	2300      	movs	r3, #0
 8004216:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800421a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800421e:	460b      	mov	r3, r1
 8004220:	4313      	orrs	r3, r2
 8004222:	d00b      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8004224:	4b5a      	ldr	r3, [pc, #360]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004226:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800422a:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800422e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004232:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004234:	4a56      	ldr	r2, [pc, #344]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004236:	430b      	orrs	r3, r1
 8004238:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800423c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004244:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8004248:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800424c:	2300      	movs	r3, #0
 800424e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004252:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004256:	460b      	mov	r3, r1
 8004258:	4313      	orrs	r3, r2
 800425a:	d00b      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800425c:	4b4c      	ldr	r3, [pc, #304]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800425e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004262:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8004266:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800426a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800426c:	4a48      	ldr	r2, [pc, #288]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800426e:	430b      	orrs	r3, r1
 8004270:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004274:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800427c:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004280:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004284:	2300      	movs	r3, #0
 8004286:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800428a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800428e:	460b      	mov	r3, r1
 8004290:	4313      	orrs	r3, r2
 8004292:	d00b      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004294:	4b3e      	ldr	r3, [pc, #248]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004296:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800429a:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800429e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80042a2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80042a4:	4a3a      	ldr	r2, [pc, #232]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80042a6:	430b      	orrs	r3, r1
 80042a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80042ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80042b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80042b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80042ba:	2300      	movs	r3, #0
 80042bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80042be:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80042c2:	460b      	mov	r3, r1
 80042c4:	4313      	orrs	r3, r2
 80042c6:	d00b      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80042c8:	4b31      	ldr	r3, [pc, #196]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80042ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80042ce:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80042d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80042d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042d8:	4a2d      	ldr	r2, [pc, #180]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80042da:	430b      	orrs	r3, r1
 80042dc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80042e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80042e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e8:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80042ec:	673b      	str	r3, [r7, #112]	@ 0x70
 80042ee:	2300      	movs	r3, #0
 80042f0:	677b      	str	r3, [r7, #116]	@ 0x74
 80042f2:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80042f6:	460b      	mov	r3, r1
 80042f8:	4313      	orrs	r3, r2
 80042fa:	d04f      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80042fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004300:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004304:	2b80      	cmp	r3, #128	@ 0x80
 8004306:	d02d      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8004308:	2b80      	cmp	r3, #128	@ 0x80
 800430a:	d827      	bhi.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x310>
 800430c:	2b60      	cmp	r3, #96	@ 0x60
 800430e:	d02b      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8004310:	2b60      	cmp	r3, #96	@ 0x60
 8004312:	d823      	bhi.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004314:	2b40      	cmp	r3, #64	@ 0x40
 8004316:	d006      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004318:	2b40      	cmp	r3, #64	@ 0x40
 800431a:	d81f      	bhi.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x310>
 800431c:	2b00      	cmp	r3, #0
 800431e:	d009      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8004320:	2b20      	cmp	r3, #32
 8004322:	d011      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8004324:	e01a      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x310>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004326:	4b1a      	ldr	r3, [pc, #104]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800432a:	4a19      	ldr	r2, [pc, #100]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800432c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004330:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004332:	e01a      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004334:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004338:	3308      	adds	r3, #8
 800433a:	4618      	mov	r0, r3
 800433c:	f000 fbc4 	bl	8004ac8 <RCCEx_PLL2_Config>
 8004340:	4603      	mov	r3, r0
 8004342:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004346:	e010      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004348:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800434c:	332c      	adds	r3, #44	@ 0x2c
 800434e:	4618      	mov	r0, r3
 8004350:	f000 fc52 	bl	8004bf8 <RCCEx_PLL3_Config>
 8004354:	4603      	mov	r3, r0
 8004356:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800435a:	e006      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x31e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8004362:	e002      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 8004364:	bf00      	nop
 8004366:	e000      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 8004368:	bf00      	nop
    }

    if (ret == HAL_OK)
 800436a:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800436e:	2b00      	cmp	r3, #0
 8004370:	d110      	bne.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x348>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8004372:	4b07      	ldr	r3, [pc, #28]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004374:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004378:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 800437c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004380:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004384:	4a02      	ldr	r2, [pc, #8]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004386:	430b      	orrs	r3, r1
 8004388:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800438c:	e006      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x350>
 800438e:	bf00      	nop
 8004390:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004394:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8004398:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800439c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80043a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80043a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80043aa:	2300      	movs	r3, #0
 80043ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80043ae:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80043b2:	460b      	mov	r3, r1
 80043b4:	4313      	orrs	r3, r2
 80043b6:	d046      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80043b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80043bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80043c0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80043c4:	d028      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80043c6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80043ca:	d821      	bhi.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 80043cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80043d0:	d022      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80043d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80043d6:	d81b      	bhi.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 80043d8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80043dc:	d01c      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80043de:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80043e2:	d815      	bhi.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 80043e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043e8:	d008      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 80043ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043ee:	d80f      	bhi.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d011      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80043f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043f8:	d00e      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80043fa:	e009      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80043fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004400:	3308      	adds	r3, #8
 8004402:	4618      	mov	r0, r3
 8004404:	f000 fb60 	bl	8004ac8 <RCCEx_PLL2_Config>
 8004408:	4603      	mov	r3, r0
 800440a:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 800440e:	e004      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8004416:	e000      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
        break;
 8004418:	bf00      	nop
    }

    if (ret == HAL_OK)
 800441a:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800441e:	2b00      	cmp	r3, #0
 8004420:	d10d      	bne.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004422:	4bb6      	ldr	r3, [pc, #728]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004424:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004428:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800442c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004430:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004434:	4ab1      	ldr	r2, [pc, #708]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004436:	430b      	orrs	r3, r1
 8004438:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800443c:	e003      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800443e:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8004442:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8004446:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800444a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004452:	663b      	str	r3, [r7, #96]	@ 0x60
 8004454:	2300      	movs	r3, #0
 8004456:	667b      	str	r3, [r7, #100]	@ 0x64
 8004458:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800445c:	460b      	mov	r3, r1
 800445e:	4313      	orrs	r3, r2
 8004460:	d03e      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8004462:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004466:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800446a:	2b04      	cmp	r3, #4
 800446c:	d81d      	bhi.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800446e:	a201      	add	r2, pc, #4	@ (adr r2, 8004474 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8004470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004474:	080044b3 	.word	0x080044b3
 8004478:	08004489 	.word	0x08004489
 800447c:	08004497 	.word	0x08004497
 8004480:	080044b3 	.word	0x080044b3
 8004484:	080044b3 	.word	0x080044b3
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004488:	4b9c      	ldr	r3, [pc, #624]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800448a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800448c:	4a9b      	ldr	r2, [pc, #620]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800448e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004492:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8004494:	e00e      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004496:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800449a:	332c      	adds	r3, #44	@ 0x2c
 800449c:	4618      	mov	r0, r3
 800449e:	f000 fbab 	bl	8004bf8 <RCCEx_PLL3_Config>
 80044a2:	4603      	mov	r3, r0
 80044a4:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 80044a8:	e004      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 80044b0:	e000      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x468>
        break;
 80044b2:	bf00      	nop
    }
    if (ret == HAL_OK)
 80044b4:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d10d      	bne.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80044bc:	4b8f      	ldr	r3, [pc, #572]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80044be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80044c2:	f023 0107 	bic.w	r1, r3, #7
 80044c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80044ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044ce:	4a8b      	ldr	r2, [pc, #556]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80044d0:	430b      	orrs	r3, r1
 80044d2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80044d6:	e003      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x494>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d8:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80044dc:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80044e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80044e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e8:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80044ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 80044ee:	2300      	movs	r3, #0
 80044f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044f2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80044f6:	460b      	mov	r3, r1
 80044f8:	4313      	orrs	r3, r2
 80044fa:	d04a      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x546>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 80044fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004500:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004504:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004508:	d028      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x510>
 800450a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800450e:	d821      	bhi.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8004510:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004514:	d024      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004516:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800451a:	d81b      	bhi.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800451c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004520:	d00e      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8004522:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004526:	d815      	bhi.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8004528:	2b00      	cmp	r3, #0
 800452a:	d01b      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800452c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004530:	d110      	bne.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004532:	4b72      	ldr	r3, [pc, #456]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004536:	4a71      	ldr	r2, [pc, #452]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004538:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800453c:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800453e:	e012      	b.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004540:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004544:	332c      	adds	r3, #44	@ 0x2c
 8004546:	4618      	mov	r0, r3
 8004548:	f000 fb56 	bl	8004bf8 <RCCEx_PLL3_Config>
 800454c:	4603      	mov	r3, r0
 800454e:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8004552:	e008      	b.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 800455a:	e004      	b.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 800455c:	bf00      	nop
 800455e:	e002      	b.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8004560:	bf00      	nop
 8004562:	e000      	b.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8004564:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004566:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10d      	bne.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x53e>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800456e:	4b63      	ldr	r3, [pc, #396]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004570:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004574:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004578:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800457c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004580:	4a5e      	ldr	r2, [pc, #376]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004582:	430b      	orrs	r3, r1
 8004584:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004588:	e003      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x546>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800458a:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800458e:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004592:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800459a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800459e:	653b      	str	r3, [r7, #80]	@ 0x50
 80045a0:	2300      	movs	r3, #0
 80045a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80045a4:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80045a8:	460b      	mov	r3, r1
 80045aa:	4313      	orrs	r3, r2
 80045ac:	f000 80ba 	beq.w	8004724 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045b0:	2300      	movs	r3, #0
 80045b2:	f887 30d1 	strb.w	r3, [r7, #209]	@ 0xd1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045b6:	4b51      	ldr	r3, [pc, #324]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80045b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045bc:	f003 0304 	and.w	r3, r3, #4
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d113      	bne.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045c4:	4b4d      	ldr	r3, [pc, #308]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80045c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045ca:	4a4c      	ldr	r2, [pc, #304]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80045cc:	f043 0304 	orr.w	r3, r3, #4
 80045d0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80045d4:	4b49      	ldr	r3, [pc, #292]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80045d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045da:	f003 0304 	and.w	r3, r3, #4
 80045de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80045e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
      pwrclkchanged = SET;
 80045e6:	2301      	movs	r3, #1
 80045e8:	f887 30d1 	strb.w	r3, [r7, #209]	@ 0xd1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80045ec:	4b44      	ldr	r3, [pc, #272]	@ (8004700 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 80045ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045f0:	4a43      	ldr	r2, [pc, #268]	@ (8004700 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 80045f2:	f043 0301 	orr.w	r3, r3, #1
 80045f6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045f8:	f7fd fb1e 	bl	8001c38 <HAL_GetTick>
 80045fc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004600:	e00b      	b.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004602:	f7fd fb19 	bl	8001c38 <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	2b02      	cmp	r3, #2
 8004610:	d903      	bls.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        ret = HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8004618:	e005      	b.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x5da>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800461a:	4b39      	ldr	r3, [pc, #228]	@ (8004700 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 800461c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800461e:	f003 0301 	and.w	r3, r3, #1
 8004622:	2b00      	cmp	r3, #0
 8004624:	d0ed      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
      }
    }

    if (ret == HAL_OK)
 8004626:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800462a:	2b00      	cmp	r3, #0
 800462c:	d16a      	bne.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800462e:	4b33      	ldr	r3, [pc, #204]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004630:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004634:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004638:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800463c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004640:	2b00      	cmp	r3, #0
 8004642:	d023      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x640>
 8004644:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004648:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 800464c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004650:	4293      	cmp	r3, r2
 8004652:	d01b      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x640>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004654:	4b29      	ldr	r3, [pc, #164]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004656:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800465a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800465e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004662:	4b26      	ldr	r3, [pc, #152]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004664:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004668:	4a24      	ldr	r2, [pc, #144]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800466a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800466e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004672:	4b22      	ldr	r3, [pc, #136]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004674:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004678:	4a20      	ldr	r2, [pc, #128]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800467a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800467e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004682:	4a1e      	ldr	r2, [pc, #120]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004684:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004688:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800468c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004690:	f003 0301 	and.w	r3, r3, #1
 8004694:	2b00      	cmp	r3, #0
 8004696:	d019      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x680>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004698:	f7fd face 	bl	8001c38 <HAL_GetTick>
 800469c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046a0:	e00d      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046a2:	f7fd fac9 	bl	8001c38 <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80046ac:	1ad2      	subs	r2, r2, r3
 80046ae:	f241 3388 	movw	r3, #5000	@ 0x1388
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d903      	bls.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
            break;
 80046bc:	e006      	b.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x680>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046be:	4b0f      	ldr	r3, [pc, #60]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80046c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d0ea      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if (ret == HAL_OK)
 80046cc:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d10d      	bne.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80046d4:	4b09      	ldr	r3, [pc, #36]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80046d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046da:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80046de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80046e2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80046e6:	4a05      	ldr	r2, [pc, #20]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80046e8:	430b      	orrs	r3, r1
 80046ea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80046ee:	e00d      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80046f0:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80046f4:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
 80046f8:	e008      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 80046fa:	bf00      	nop
 80046fc:	46020c00 	.word	0x46020c00
 8004700:	46020800 	.word	0x46020800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004704:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8004708:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800470c:	f897 30d1 	ldrb.w	r3, [r7, #209]	@ 0xd1
 8004710:	2b01      	cmp	r3, #1
 8004712:	d107      	bne.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004714:	4bb2      	ldr	r3, [pc, #712]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004716:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800471a:	4ab1      	ldr	r2, [pc, #708]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800471c:	f023 0304 	bic.w	r3, r3, #4
 8004720:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8004724:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004730:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004732:	2300      	movs	r3, #0
 8004734:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004736:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800473a:	460b      	mov	r3, r1
 800473c:	4313      	orrs	r3, r2
 800473e:	d042      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x77a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8004740:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004744:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004748:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800474c:	d022      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x748>
 800474e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004752:	d81b      	bhi.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x740>
 8004754:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004758:	d011      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x732>
 800475a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800475e:	d815      	bhi.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x740>
 8004760:	2b00      	cmp	r3, #0
 8004762:	d019      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8004764:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004768:	d110      	bne.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x740>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800476a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800476e:	3308      	adds	r3, #8
 8004770:	4618      	mov	r0, r3
 8004772:	f000 f9a9 	bl	8004ac8 <RCCEx_PLL2_Config>
 8004776:	4603      	mov	r3, r0
 8004778:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 800477c:	e00d      	b.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800477e:	4b98      	ldr	r3, [pc, #608]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004782:	4a97      	ldr	r2, [pc, #604]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004784:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004788:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800478a:	e006      	b.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8004792:	e002      	b.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 8004794:	bf00      	nop
 8004796:	e000      	b.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 8004798:	bf00      	nop
    }
    if (ret == HAL_OK)
 800479a:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d10d      	bne.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x772>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80047a2:	4b8f      	ldr	r3, [pc, #572]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80047a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80047a8:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80047ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80047b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80047b4:	4a8a      	ldr	r2, [pc, #552]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80047b6:	430b      	orrs	r3, r1
 80047b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80047bc:	e003      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x77a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047be:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80047c2:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80047c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80047ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ce:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80047d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80047d4:	2300      	movs	r3, #0
 80047d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80047d8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80047dc:	460b      	mov	r3, r1
 80047de:	4313      	orrs	r3, r2
 80047e0:	d02d      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x7f2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80047e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80047e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047ee:	d00b      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 80047f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047f4:	d804      	bhi.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d008      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 80047fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047fe:	d007      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8004806:	e004      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8004808:	bf00      	nop
 800480a:	e002      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 800480c:	bf00      	nop
 800480e:	e000      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8004810:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004812:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8004816:	2b00      	cmp	r3, #0
 8004818:	d10d      	bne.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x7ea>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800481a:	4b71      	ldr	r3, [pc, #452]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800481c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004820:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004824:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004828:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800482c:	4a6c      	ldr	r2, [pc, #432]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800482e:	430b      	orrs	r3, r1
 8004830:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004834:	e003      	b.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004836:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800483a:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800483e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004846:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800484a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800484c:	2300      	movs	r3, #0
 800484e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004850:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004854:	460b      	mov	r3, r1
 8004856:	4313      	orrs	r3, r2
 8004858:	d00c      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x828>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800485a:	4b61      	ldr	r3, [pc, #388]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800485c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004860:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 8004864:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004868:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800486c:	4a5c      	ldr	r2, [pc, #368]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800486e:	430b      	orrs	r3, r1
 8004870:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8004874:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800487c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004880:	633b      	str	r3, [r7, #48]	@ 0x30
 8004882:	2300      	movs	r3, #0
 8004884:	637b      	str	r3, [r7, #52]	@ 0x34
 8004886:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800488a:	460b      	mov	r3, r1
 800488c:	4313      	orrs	r3, r2
 800488e:	d019      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x878>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8004890:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004894:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004898:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800489c:	d105      	bne.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800489e:	4b50      	ldr	r3, [pc, #320]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80048a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048a2:	4a4f      	ldr	r2, [pc, #316]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80048a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048a8:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80048aa:	4b4d      	ldr	r3, [pc, #308]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80048ac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80048b0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80048b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80048b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80048bc:	4a48      	ldr	r2, [pc, #288]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80048be:	430b      	orrs	r3, r1
 80048c0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80048c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80048c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048cc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80048d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048d2:	2300      	movs	r3, #0
 80048d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048d6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80048da:	460b      	mov	r3, r1
 80048dc:	4313      	orrs	r3, r2
 80048de:	d00c      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x8ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80048e0:	4b3f      	ldr	r3, [pc, #252]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80048e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80048e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80048ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80048ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80048f2:	493b      	ldr	r1, [pc, #236]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80048fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80048fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004902:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004906:	623b      	str	r3, [r7, #32]
 8004908:	2300      	movs	r3, #0
 800490a:	627b      	str	r3, [r7, #36]	@ 0x24
 800490c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004910:	460b      	mov	r3, r1
 8004912:	4313      	orrs	r3, r2
 8004914:	d00c      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x8e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8004916:	4b32      	ldr	r3, [pc, #200]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004918:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800491c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004920:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004924:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004928:	492d      	ldr	r1, [pc, #180]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800492a:	4313      	orrs	r3, r2
 800492c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004930:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004938:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800493c:	61bb      	str	r3, [r7, #24]
 800493e:	2300      	movs	r3, #0
 8004940:	61fb      	str	r3, [r7, #28]
 8004942:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004946:	460b      	mov	r3, r1
 8004948:	4313      	orrs	r3, r2
 800494a:	d00c      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x91a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800494c:	4b24      	ldr	r3, [pc, #144]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800494e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004952:	f023 0218 	bic.w	r2, r3, #24
 8004956:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800495a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800495e:	4920      	ldr	r1, [pc, #128]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004960:	4313      	orrs	r3, r2
 8004962:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004966:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800496a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800496e:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8004972:	613b      	str	r3, [r7, #16]
 8004974:	2300      	movs	r3, #0
 8004976:	617b      	str	r3, [r7, #20]
 8004978:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800497c:	460b      	mov	r3, r1
 800497e:	4313      	orrs	r3, r2
 8004980:	d034      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x9a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8004982:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004986:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800498a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800498e:	d105      	bne.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x950>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004990:	4b13      	ldr	r3, [pc, #76]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004994:	4a12      	ldr	r2, [pc, #72]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004996:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800499a:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800499c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80049a0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80049a4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80049a8:	d108      	bne.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x970>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80049aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80049ae:	3308      	adds	r3, #8
 80049b0:	4618      	mov	r0, r3
 80049b2:	f000 f889 	bl	8004ac8 <RCCEx_PLL2_Config>
 80049b6:	4603      	mov	r3, r0
 80049b8:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
    }
    if (ret == HAL_OK)
 80049bc:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d10f      	bne.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x998>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80049c4:	4b06      	ldr	r3, [pc, #24]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80049c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80049ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80049ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80049d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80049d6:	4902      	ldr	r1, [pc, #8]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80049de:	e005      	b.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 80049e0:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049e4:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80049e8:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80049ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80049f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f4:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80049f8:	60bb      	str	r3, [r7, #8]
 80049fa:	2300      	movs	r3, #0
 80049fc:	60fb      	str	r3, [r7, #12]
 80049fe:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004a02:	460b      	mov	r3, r1
 8004a04:	4313      	orrs	r3, r2
 8004a06:	d03a      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0xa32>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8004a08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a10:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a14:	d00e      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8004a16:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a1a:	d815      	bhi.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d017      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004a20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a24:	d110      	bne.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a26:	4b27      	ldr	r3, [pc, #156]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8004a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a2a:	4a26      	ldr	r2, [pc, #152]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8004a2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a30:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8004a32:	e00e      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0xa06>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004a34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a38:	3308      	adds	r3, #8
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f000 f844 	bl	8004ac8 <RCCEx_PLL2_Config>
 8004a40:	4603      	mov	r3, r0
 8004a42:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8004a46:	e004      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0xa06>
      default:
        ret = HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8004a4e:	e000      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0xa06>
        break;
 8004a50:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004a52:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10d      	bne.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0xa2a>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8004a5a:	4b1a      	ldr	r3, [pc, #104]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8004a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a60:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004a64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a6c:	4915      	ldr	r1, [pc, #84]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8004a74:	e003      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0xa32>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a76:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8004a7a:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8004a7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a86:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004a8a:	603b      	str	r3, [r7, #0]
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	607b      	str	r3, [r7, #4]
 8004a90:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004a94:	460b      	mov	r3, r1
 8004a96:	4313      	orrs	r3, r2
 8004a98:	d00c      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0xa68>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8004a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8004a9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004aa0:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8004aa4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004aa8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004aac:	4905      	ldr	r1, [pc, #20]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8004ab4:	f897 30d2 	ldrb.w	r3, [r7, #210]	@ 0xd2
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	37d8      	adds	r7, #216	@ 0xd8
 8004abc:	46bd      	mov	sp, r7
 8004abe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ac2:	bf00      	nop
 8004ac4:	46020c00 	.word	0x46020c00

08004ac8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8004ad0:	4b47      	ldr	r3, [pc, #284]	@ (8004bf0 <RCCEx_PLL2_Config+0x128>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a46      	ldr	r2, [pc, #280]	@ (8004bf0 <RCCEx_PLL2_Config+0x128>)
 8004ad6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004ada:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004adc:	f7fd f8ac 	bl	8001c38 <HAL_GetTick>
 8004ae0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004ae2:	e008      	b.n	8004af6 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004ae4:	f7fd f8a8 	bl	8001c38 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d901      	bls.n	8004af6 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e077      	b.n	8004be6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004af6:	4b3e      	ldr	r3, [pc, #248]	@ (8004bf0 <RCCEx_PLL2_Config+0x128>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1f0      	bne.n	8004ae4 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8004b02:	4b3b      	ldr	r3, [pc, #236]	@ (8004bf0 <RCCEx_PLL2_Config+0x128>)
 8004b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b06:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004b0a:	f023 0303 	bic.w	r3, r3, #3
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	6811      	ldr	r1, [r2, #0]
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	6852      	ldr	r2, [r2, #4]
 8004b16:	3a01      	subs	r2, #1
 8004b18:	0212      	lsls	r2, r2, #8
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	4934      	ldr	r1, [pc, #208]	@ (8004bf0 <RCCEx_PLL2_Config+0x128>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8004b22:	4b33      	ldr	r3, [pc, #204]	@ (8004bf0 <RCCEx_PLL2_Config+0x128>)
 8004b24:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b26:	4b33      	ldr	r3, [pc, #204]	@ (8004bf4 <RCCEx_PLL2_Config+0x12c>)
 8004b28:	4013      	ands	r3, r2
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	6892      	ldr	r2, [r2, #8]
 8004b2e:	3a01      	subs	r2, #1
 8004b30:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	68d2      	ldr	r2, [r2, #12]
 8004b38:	3a01      	subs	r2, #1
 8004b3a:	0252      	lsls	r2, r2, #9
 8004b3c:	b292      	uxth	r2, r2
 8004b3e:	4311      	orrs	r1, r2
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	6912      	ldr	r2, [r2, #16]
 8004b44:	3a01      	subs	r2, #1
 8004b46:	0412      	lsls	r2, r2, #16
 8004b48:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8004b4c:	4311      	orrs	r1, r2
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	6952      	ldr	r2, [r2, #20]
 8004b52:	3a01      	subs	r2, #1
 8004b54:	0612      	lsls	r2, r2, #24
 8004b56:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	4924      	ldr	r1, [pc, #144]	@ (8004bf0 <RCCEx_PLL2_Config+0x128>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8004b62:	4b23      	ldr	r3, [pc, #140]	@ (8004bf0 <RCCEx_PLL2_Config+0x128>)
 8004b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b66:	f023 020c 	bic.w	r2, r3, #12
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	4920      	ldr	r1, [pc, #128]	@ (8004bf0 <RCCEx_PLL2_Config+0x128>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8004b74:	4b1e      	ldr	r3, [pc, #120]	@ (8004bf0 <RCCEx_PLL2_Config+0x128>)
 8004b76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a1b      	ldr	r3, [r3, #32]
 8004b7c:	491c      	ldr	r1, [pc, #112]	@ (8004bf0 <RCCEx_PLL2_Config+0x128>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8004b82:	4b1b      	ldr	r3, [pc, #108]	@ (8004bf0 <RCCEx_PLL2_Config+0x128>)
 8004b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b86:	4a1a      	ldr	r2, [pc, #104]	@ (8004bf0 <RCCEx_PLL2_Config+0x128>)
 8004b88:	f023 0310 	bic.w	r3, r3, #16
 8004b8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004b8e:	4b18      	ldr	r3, [pc, #96]	@ (8004bf0 <RCCEx_PLL2_Config+0x128>)
 8004b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b96:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	69d2      	ldr	r2, [r2, #28]
 8004b9e:	00d2      	lsls	r2, r2, #3
 8004ba0:	4913      	ldr	r1, [pc, #76]	@ (8004bf0 <RCCEx_PLL2_Config+0x128>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8004ba6:	4b12      	ldr	r3, [pc, #72]	@ (8004bf0 <RCCEx_PLL2_Config+0x128>)
 8004ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004baa:	4a11      	ldr	r2, [pc, #68]	@ (8004bf0 <RCCEx_PLL2_Config+0x128>)
 8004bac:	f043 0310 	orr.w	r3, r3, #16
 8004bb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8004bb2:	4b0f      	ldr	r3, [pc, #60]	@ (8004bf0 <RCCEx_PLL2_Config+0x128>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a0e      	ldr	r2, [pc, #56]	@ (8004bf0 <RCCEx_PLL2_Config+0x128>)
 8004bb8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004bbc:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004bbe:	f7fd f83b 	bl	8001c38 <HAL_GetTick>
 8004bc2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004bc4:	e008      	b.n	8004bd8 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004bc6:	f7fd f837 	bl	8001c38 <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d901      	bls.n	8004bd8 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e006      	b.n	8004be6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004bd8:	4b05      	ldr	r3, [pc, #20]	@ (8004bf0 <RCCEx_PLL2_Config+0x128>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d0f0      	beq.n	8004bc6 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8004be4:	2300      	movs	r3, #0

}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3710      	adds	r7, #16
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	46020c00 	.word	0x46020c00
 8004bf4:	80800000 	.word	0x80800000

08004bf8 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8004c00:	4b47      	ldr	r3, [pc, #284]	@ (8004d20 <RCCEx_PLL3_Config+0x128>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a46      	ldr	r2, [pc, #280]	@ (8004d20 <RCCEx_PLL3_Config+0x128>)
 8004c06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c0a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004c0c:	f7fd f814 	bl	8001c38 <HAL_GetTick>
 8004c10:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004c12:	e008      	b.n	8004c26 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004c14:	f7fd f810 	bl	8001c38 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d901      	bls.n	8004c26 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e077      	b.n	8004d16 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004c26:	4b3e      	ldr	r3, [pc, #248]	@ (8004d20 <RCCEx_PLL3_Config+0x128>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d1f0      	bne.n	8004c14 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8004c32:	4b3b      	ldr	r3, [pc, #236]	@ (8004d20 <RCCEx_PLL3_Config+0x128>)
 8004c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c36:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004c3a:	f023 0303 	bic.w	r3, r3, #3
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	6811      	ldr	r1, [r2, #0]
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	6852      	ldr	r2, [r2, #4]
 8004c46:	3a01      	subs	r2, #1
 8004c48:	0212      	lsls	r2, r2, #8
 8004c4a:	430a      	orrs	r2, r1
 8004c4c:	4934      	ldr	r1, [pc, #208]	@ (8004d20 <RCCEx_PLL3_Config+0x128>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	630b      	str	r3, [r1, #48]	@ 0x30
 8004c52:	4b33      	ldr	r3, [pc, #204]	@ (8004d20 <RCCEx_PLL3_Config+0x128>)
 8004c54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c56:	4b33      	ldr	r3, [pc, #204]	@ (8004d24 <RCCEx_PLL3_Config+0x12c>)
 8004c58:	4013      	ands	r3, r2
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	6892      	ldr	r2, [r2, #8]
 8004c5e:	3a01      	subs	r2, #1
 8004c60:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	68d2      	ldr	r2, [r2, #12]
 8004c68:	3a01      	subs	r2, #1
 8004c6a:	0252      	lsls	r2, r2, #9
 8004c6c:	b292      	uxth	r2, r2
 8004c6e:	4311      	orrs	r1, r2
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	6912      	ldr	r2, [r2, #16]
 8004c74:	3a01      	subs	r2, #1
 8004c76:	0412      	lsls	r2, r2, #16
 8004c78:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8004c7c:	4311      	orrs	r1, r2
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	6952      	ldr	r2, [r2, #20]
 8004c82:	3a01      	subs	r2, #1
 8004c84:	0612      	lsls	r2, r2, #24
 8004c86:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004c8a:	430a      	orrs	r2, r1
 8004c8c:	4924      	ldr	r1, [pc, #144]	@ (8004d20 <RCCEx_PLL3_Config+0x128>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8004c92:	4b23      	ldr	r3, [pc, #140]	@ (8004d20 <RCCEx_PLL3_Config+0x128>)
 8004c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c96:	f023 020c 	bic.w	r2, r3, #12
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	699b      	ldr	r3, [r3, #24]
 8004c9e:	4920      	ldr	r1, [pc, #128]	@ (8004d20 <RCCEx_PLL3_Config+0x128>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8004ca4:	4b1e      	ldr	r3, [pc, #120]	@ (8004d20 <RCCEx_PLL3_Config+0x128>)
 8004ca6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a1b      	ldr	r3, [r3, #32]
 8004cac:	491c      	ldr	r1, [pc, #112]	@ (8004d20 <RCCEx_PLL3_Config+0x128>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8004cb2:	4b1b      	ldr	r3, [pc, #108]	@ (8004d20 <RCCEx_PLL3_Config+0x128>)
 8004cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cb6:	4a1a      	ldr	r2, [pc, #104]	@ (8004d20 <RCCEx_PLL3_Config+0x128>)
 8004cb8:	f023 0310 	bic.w	r3, r3, #16
 8004cbc:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004cbe:	4b18      	ldr	r3, [pc, #96]	@ (8004d20 <RCCEx_PLL3_Config+0x128>)
 8004cc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cc2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004cc6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	69d2      	ldr	r2, [r2, #28]
 8004cce:	00d2      	lsls	r2, r2, #3
 8004cd0:	4913      	ldr	r1, [pc, #76]	@ (8004d20 <RCCEx_PLL3_Config+0x128>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8004cd6:	4b12      	ldr	r3, [pc, #72]	@ (8004d20 <RCCEx_PLL3_Config+0x128>)
 8004cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cda:	4a11      	ldr	r2, [pc, #68]	@ (8004d20 <RCCEx_PLL3_Config+0x128>)
 8004cdc:	f043 0310 	orr.w	r3, r3, #16
 8004ce0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8004ce2:	4b0f      	ldr	r3, [pc, #60]	@ (8004d20 <RCCEx_PLL3_Config+0x128>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a0e      	ldr	r2, [pc, #56]	@ (8004d20 <RCCEx_PLL3_Config+0x128>)
 8004ce8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cec:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004cee:	f7fc ffa3 	bl	8001c38 <HAL_GetTick>
 8004cf2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004cf4:	e008      	b.n	8004d08 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004cf6:	f7fc ff9f 	bl	8001c38 <HAL_GetTick>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d901      	bls.n	8004d08 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	e006      	b.n	8004d16 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004d08:	4b05      	ldr	r3, [pc, #20]	@ (8004d20 <RCCEx_PLL3_Config+0x128>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d0f0      	beq.n	8004cf6 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	46020c00 	.word	0x46020c00
 8004d24:	80800000 	.word	0x80800000

08004d28 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d071      	beq.n	8004e1e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d106      	bne.n	8004d54 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f7fc fcce 	bl	80016f0 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2202      	movs	r2, #2
 8004d58:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004d5c:	4b32      	ldr	r3, [pc, #200]	@ (8004e28 <HAL_RTC_Init+0x100>)
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	f003 0310 	and.w	r3, r3, #16
 8004d64:	2b10      	cmp	r3, #16
 8004d66:	d051      	beq.n	8004e0c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d68:	4b2f      	ldr	r3, [pc, #188]	@ (8004e28 <HAL_RTC_Init+0x100>)
 8004d6a:	22ca      	movs	r2, #202	@ 0xca
 8004d6c:	625a      	str	r2, [r3, #36]	@ 0x24
 8004d6e:	4b2e      	ldr	r3, [pc, #184]	@ (8004e28 <HAL_RTC_Init+0x100>)
 8004d70:	2253      	movs	r2, #83	@ 0x53
 8004d72:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f000 fc9f 	bl	80056b8 <RTC_EnterInitMode>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8004d7e:	7bfb      	ldrb	r3, [r7, #15]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d13f      	bne.n	8004e04 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8004d84:	4b28      	ldr	r3, [pc, #160]	@ (8004e28 <HAL_RTC_Init+0x100>)
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	4a27      	ldr	r2, [pc, #156]	@ (8004e28 <HAL_RTC_Init+0x100>)
 8004d8a:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8004d8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d92:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8004d94:	4b24      	ldr	r3, [pc, #144]	@ (8004e28 <HAL_RTC_Init+0x100>)
 8004d96:	699a      	ldr	r2, [r3, #24]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6859      	ldr	r1, [r3, #4]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	4319      	orrs	r1, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	430b      	orrs	r3, r1
 8004da8:	491f      	ldr	r1, [pc, #124]	@ (8004e28 <HAL_RTC_Init+0x100>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	68da      	ldr	r2, [r3, #12]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	041b      	lsls	r3, r3, #16
 8004db8:	491b      	ldr	r1, [pc, #108]	@ (8004e28 <HAL_RTC_Init+0x100>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8004dbe:	4b1a      	ldr	r3, [pc, #104]	@ (8004e28 <HAL_RTC_Init+0x100>)
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dce:	430b      	orrs	r3, r1
 8004dd0:	4915      	ldr	r1, [pc, #84]	@ (8004e28 <HAL_RTC_Init+0x100>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 fcaa 	bl	8005730 <RTC_ExitInitMode>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8004de0:	7bfb      	ldrb	r3, [r7, #15]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d10e      	bne.n	8004e04 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8004de6:	4b10      	ldr	r3, [pc, #64]	@ (8004e28 <HAL_RTC_Init+0x100>)
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a19      	ldr	r1, [r3, #32]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	69db      	ldr	r3, [r3, #28]
 8004df6:	4319      	orrs	r1, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	695b      	ldr	r3, [r3, #20]
 8004dfc:	430b      	orrs	r3, r1
 8004dfe:	490a      	ldr	r1, [pc, #40]	@ (8004e28 <HAL_RTC_Init+0x100>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e04:	4b08      	ldr	r3, [pc, #32]	@ (8004e28 <HAL_RTC_Init+0x100>)
 8004e06:	22ff      	movs	r2, #255	@ 0xff
 8004e08:	625a      	str	r2, [r3, #36]	@ 0x24
 8004e0a:	e001      	b.n	8004e10 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004e10:	7bfb      	ldrb	r3, [r7, #15]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d103      	bne.n	8004e1e <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 8004e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3710      	adds	r7, #16
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	46007800 	.word	0x46007800

08004e2c <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004e2c:	b590      	push	{r4, r7, lr}
 8004e2e:	b087      	sub	sp, #28
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d101      	bne.n	8004e46 <HAL_RTC_SetTime+0x1a>
 8004e42:	2302      	movs	r3, #2
 8004e44:	e088      	b.n	8004f58 <HAL_RTC_SetTime+0x12c>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2202      	movs	r2, #2
 8004e52:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e56:	4b42      	ldr	r3, [pc, #264]	@ (8004f60 <HAL_RTC_SetTime+0x134>)
 8004e58:	22ca      	movs	r2, #202	@ 0xca
 8004e5a:	625a      	str	r2, [r3, #36]	@ 0x24
 8004e5c:	4b40      	ldr	r3, [pc, #256]	@ (8004f60 <HAL_RTC_SetTime+0x134>)
 8004e5e:	2253      	movs	r2, #83	@ 0x53
 8004e60:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004e62:	68f8      	ldr	r0, [r7, #12]
 8004e64:	f000 fc28 	bl	80056b8 <RTC_EnterInitMode>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004e6c:	7cfb      	ldrb	r3, [r7, #19]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d163      	bne.n	8004f3a <HAL_RTC_SetTime+0x10e>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8004e72:	4b3b      	ldr	r3, [pc, #236]	@ (8004f60 <HAL_RTC_SetTime+0x134>)
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e7e:	d057      	beq.n	8004f30 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d125      	bne.n	8004ed2 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8004e86:	4b36      	ldr	r3, [pc, #216]	@ (8004f60 <HAL_RTC_SetTime+0x134>)
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d102      	bne.n	8004e98 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	2200      	movs	r2, #0
 8004e96:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f000 fc85 	bl	80057ac <RTC_ByteToBcd2>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	785b      	ldrb	r3, [r3, #1]
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f000 fc7e 	bl	80057ac <RTC_ByteToBcd2>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004eb4:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	789b      	ldrb	r3, [r3, #2]
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f000 fc76 	bl	80057ac <RTC_ByteToBcd2>
 8004ec0:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004ec2:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	78db      	ldrb	r3, [r3, #3]
 8004eca:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	617b      	str	r3, [r7, #20]
 8004ed0:	e017      	b.n	8004f02 <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8004ed2:	4b23      	ldr	r3, [pc, #140]	@ (8004f60 <HAL_RTC_SetTime+0x134>)
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d102      	bne.n	8004ee4 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	785b      	ldrb	r3, [r3, #1]
 8004eee:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004ef0:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004ef2:	68ba      	ldr	r2, [r7, #8]
 8004ef4:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004ef6:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	78db      	ldrb	r3, [r3, #3]
 8004efc:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004efe:	4313      	orrs	r3, r2
 8004f00:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8004f02:	4a17      	ldr	r2, [pc, #92]	@ (8004f60 <HAL_RTC_SetTime+0x134>)
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8004f0a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004f0e:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8004f10:	4b13      	ldr	r3, [pc, #76]	@ (8004f60 <HAL_RTC_SetTime+0x134>)
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	4a12      	ldr	r2, [pc, #72]	@ (8004f60 <HAL_RTC_SetTime+0x134>)
 8004f16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f1a:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8004f1c:	4b10      	ldr	r3, [pc, #64]	@ (8004f60 <HAL_RTC_SetTime+0x134>)
 8004f1e:	699a      	ldr	r2, [r3, #24]
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	68d9      	ldr	r1, [r3, #12]
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	430b      	orrs	r3, r1
 8004f2a:	490d      	ldr	r1, [pc, #52]	@ (8004f60 <HAL_RTC_SetTime+0x134>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	618b      	str	r3, [r1, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f000 fbfd 	bl	8005730 <RTC_ExitInitMode>
 8004f36:	4603      	mov	r3, r0
 8004f38:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f3a:	4b09      	ldr	r3, [pc, #36]	@ (8004f60 <HAL_RTC_SetTime+0x134>)
 8004f3c:	22ff      	movs	r2, #255	@ 0xff
 8004f3e:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8004f40:	7cfb      	ldrb	r3, [r7, #19]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d103      	bne.n	8004f4e <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 8004f56:	7cfb      	ldrb	r3, [r7, #19]
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	371c      	adds	r7, #28
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd90      	pop	{r4, r7, pc}
 8004f60:	46007800 	.word	0x46007800

08004f64 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(const RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b086      	sub	sp, #24
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = READ_REG(RTC->SSR);
 8004f70:	4b34      	ldr	r3, [pc, #208]	@ (8005044 <HAL_RTC_GetTime+0xe0>)
 8004f72:	689a      	ldr	r2, [r3, #8]
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	605a      	str	r2, [r3, #4]


  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8004f78:	4b32      	ldr	r3, [pc, #200]	@ (8005044 <HAL_RTC_GetTime+0xe0>)
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f84:	d04a      	beq.n	800501c <HAL_RTC_GetTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field */
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 8004f86:	4b2f      	ldr	r3, [pc, #188]	@ (8005044 <HAL_RTC_GetTime+0xe0>)
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 8004f92:	4b2c      	ldr	r3, [pc, #176]	@ (8005044 <HAL_RTC_GetTime+0xe0>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8004f9a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004f9e:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	0c1b      	lsrs	r3, r3, #16
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004faa:	b2da      	uxtb	r2, r3
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	0a1b      	lsrs	r3, r3, #8
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004fba:	b2da      	uxtb	r2, r3
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004fc8:	b2da      	uxtb	r2, r3
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	0d9b      	lsrs	r3, r3, #22
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	f003 0301 	and.w	r3, r3, #1
 8004fd8:	b2da      	uxtb	r2, r3
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d12a      	bne.n	800503a <HAL_RTC_GetTime+0xd6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f000 fbff 	bl	80057ec <RTC_Bcd2ToByte>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	785b      	ldrb	r3, [r3, #1]
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f000 fbf6 	bl	80057ec <RTC_Bcd2ToByte>
 8005000:	4603      	mov	r3, r0
 8005002:	461a      	mov	r2, r3
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	789b      	ldrb	r3, [r3, #2]
 800500c:	4618      	mov	r0, r3
 800500e:	f000 fbed 	bl	80057ec <RTC_Bcd2ToByte>
 8005012:	4603      	mov	r3, r0
 8005014:	461a      	mov	r2, r3
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	709a      	strb	r2, [r3, #2]
 800501a:	e00e      	b.n	800503a <HAL_RTC_GetTime+0xd6>
    }
  }
  else
  {
    /* Initialize structure fields */
    sTime->Hours = 0U;
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	2200      	movs	r2, #0
 8005020:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = 0U;
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	2200      	movs	r2, #0
 8005026:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = 0U;
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	2200      	movs	r2, #0
 800502c:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = 0U;
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	2200      	movs	r2, #0
 8005032:	70da      	strb	r2, [r3, #3]
    sTime->SecondFraction = 0U;
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	2200      	movs	r2, #0
 8005038:	609a      	str	r2, [r3, #8]
  }

  return HAL_OK;
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	3718      	adds	r7, #24
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	46007800 	.word	0x46007800

08005048 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005048:	b590      	push	{r4, r7, lr}
 800504a:	b087      	sub	sp, #28
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800505a:	2b01      	cmp	r3, #1
 800505c:	d101      	bne.n	8005062 <HAL_RTC_SetDate+0x1a>
 800505e:	2302      	movs	r3, #2
 8005060:	e071      	b.n	8005146 <HAL_RTC_SetDate+0xfe>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2201      	movs	r2, #1
 8005066:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2202      	movs	r2, #2
 800506e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d10e      	bne.n	8005096 <HAL_RTC_SetDate+0x4e>
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	785b      	ldrb	r3, [r3, #1]
 800507c:	f003 0310 	and.w	r3, r3, #16
 8005080:	2b00      	cmp	r3, #0
 8005082:	d008      	beq.n	8005096 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	785b      	ldrb	r3, [r3, #1]
 8005088:	f023 0310 	bic.w	r3, r3, #16
 800508c:	b2db      	uxtb	r3, r3
 800508e:	330a      	adds	r3, #10
 8005090:	b2da      	uxtb	r2, r3
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d11c      	bne.n	80050d6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	78db      	ldrb	r3, [r3, #3]
 80050a0:	4618      	mov	r0, r3
 80050a2:	f000 fb83 	bl	80057ac <RTC_ByteToBcd2>
 80050a6:	4603      	mov	r3, r0
 80050a8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	785b      	ldrb	r3, [r3, #1]
 80050ae:	4618      	mov	r0, r3
 80050b0:	f000 fb7c 	bl	80057ac <RTC_ByteToBcd2>
 80050b4:	4603      	mov	r3, r0
 80050b6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80050b8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	789b      	ldrb	r3, [r3, #2]
 80050be:	4618      	mov	r0, r3
 80050c0:	f000 fb74 	bl	80057ac <RTC_ByteToBcd2>
 80050c4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80050c6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80050d0:	4313      	orrs	r3, r2
 80050d2:	617b      	str	r3, [r7, #20]
 80050d4:	e00e      	b.n	80050f4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	78db      	ldrb	r3, [r3, #3]
 80050da:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	785b      	ldrb	r3, [r3, #1]
 80050e0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80050e2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80050e4:	68ba      	ldr	r2, [r7, #8]
 80050e6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80050e8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80050f0:	4313      	orrs	r3, r2
 80050f2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80050f4:	4b16      	ldr	r3, [pc, #88]	@ (8005150 <HAL_RTC_SetDate+0x108>)
 80050f6:	22ca      	movs	r2, #202	@ 0xca
 80050f8:	625a      	str	r2, [r3, #36]	@ 0x24
 80050fa:	4b15      	ldr	r3, [pc, #84]	@ (8005150 <HAL_RTC_SetDate+0x108>)
 80050fc:	2253      	movs	r2, #83	@ 0x53
 80050fe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	f000 fad9 	bl	80056b8 <RTC_EnterInitMode>
 8005106:	4603      	mov	r3, r0
 8005108:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800510a:	7cfb      	ldrb	r3, [r7, #19]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d10b      	bne.n	8005128 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8005110:	4a0f      	ldr	r2, [pc, #60]	@ (8005150 <HAL_RTC_SetDate+0x108>)
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005118:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800511c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800511e:	68f8      	ldr	r0, [r7, #12]
 8005120:	f000 fb06 	bl	8005730 <RTC_ExitInitMode>
 8005124:	4603      	mov	r3, r0
 8005126:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005128:	4b09      	ldr	r3, [pc, #36]	@ (8005150 <HAL_RTC_SetDate+0x108>)
 800512a:	22ff      	movs	r2, #255	@ 0xff
 800512c:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800512e:	7cfb      	ldrb	r3, [r7, #19]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d103      	bne.n	800513c <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 8005144:	7cfb      	ldrb	r3, [r7, #19]
}
 8005146:	4618      	mov	r0, r3
 8005148:	371c      	adds	r7, #28
 800514a:	46bd      	mov	sp, r7
 800514c:	bd90      	pop	{r4, r7, pc}
 800514e:	bf00      	nop
 8005150:	46007800 	.word	0x46007800

08005154 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(const RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b086      	sub	sp, #24
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 8005160:	4b22      	ldr	r3, [pc, #136]	@ (80051ec <HAL_RTC_GetDate+0x98>)
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005168:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800516c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	0c1b      	lsrs	r3, r3, #16
 8005172:	b2da      	uxtb	r2, r3
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	0a1b      	lsrs	r3, r3, #8
 800517c:	b2db      	uxtb	r3, r3
 800517e:	f003 031f 	and.w	r3, r3, #31
 8005182:	b2da      	uxtb	r2, r3
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	b2db      	uxtb	r3, r3
 800518c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005190:	b2da      	uxtb	r2, r3
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	0b5b      	lsrs	r3, r3, #13
 800519a:	b2db      	uxtb	r3, r3
 800519c:	f003 0307 	and.w	r3, r3, #7
 80051a0:	b2da      	uxtb	r2, r3
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d11a      	bne.n	80051e2 <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	78db      	ldrb	r3, [r3, #3]
 80051b0:	4618      	mov	r0, r3
 80051b2:	f000 fb1b 	bl	80057ec <RTC_Bcd2ToByte>
 80051b6:	4603      	mov	r3, r0
 80051b8:	461a      	mov	r2, r3
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	785b      	ldrb	r3, [r3, #1]
 80051c2:	4618      	mov	r0, r3
 80051c4:	f000 fb12 	bl	80057ec <RTC_Bcd2ToByte>
 80051c8:	4603      	mov	r3, r0
 80051ca:	461a      	mov	r2, r3
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	789b      	ldrb	r3, [r3, #2]
 80051d4:	4618      	mov	r0, r3
 80051d6:	f000 fb09 	bl	80057ec <RTC_Bcd2ToByte>
 80051da:	4603      	mov	r3, r0
 80051dc:	461a      	mov	r2, r3
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3718      	adds	r7, #24
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	46007800 	.word	0x46007800

080051f0 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80051f0:	b590      	push	{r4, r7, lr}
 80051f2:	b087      	sub	sp, #28
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80051fc:	2300      	movs	r3, #0
 80051fe:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005206:	2b01      	cmp	r3, #1
 8005208:	d101      	bne.n	800520e <HAL_RTC_SetAlarm_IT+0x1e>
 800520a:	2302      	movs	r3, #2
 800520c:	e0ea      	b.n	80053e4 <HAL_RTC_SetAlarm_IT+0x1f4>
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2201      	movs	r2, #1
 8005212:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2202      	movs	r2, #2
 800521a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
                 (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif /* USE_FULL_ASSERT */

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 800521e:	4b73      	ldr	r3, [pc, #460]	@ (80053ec <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005226:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800522e:	d05c      	beq.n	80052ea <HAL_RTC_SetAlarm_IT+0xfa>
  {
    if (Format == RTC_FORMAT_BIN)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d136      	bne.n	80052a4 <HAL_RTC_SetAlarm_IT+0xb4>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8005236:	4b6d      	ldr	r3, [pc, #436]	@ (80053ec <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800523e:	2b00      	cmp	r3, #0
 8005240:	d102      	bne.n	8005248 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	2200      	movs	r2, #0
 8005246:	70da      	strb	r2, [r3, #3]
      }
      else
      {
        assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
      }
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	4618      	mov	r0, r3
 800524e:	f000 faad 	bl	80057ac <RTC_ByteToBcd2>
 8005252:	4603      	mov	r3, r0
 8005254:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	785b      	ldrb	r3, [r3, #1]
 800525a:	4618      	mov	r0, r3
 800525c:	f000 faa6 	bl	80057ac <RTC_ByteToBcd2>
 8005260:	4603      	mov	r3, r0
 8005262:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005264:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	789b      	ldrb	r3, [r3, #2]
 800526a:	4618      	mov	r0, r3
 800526c:	f000 fa9e 	bl	80057ac <RTC_ByteToBcd2>
 8005270:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005272:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	78db      	ldrb	r3, [r3, #3]
 800527a:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800527c:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005286:	4618      	mov	r0, r3
 8005288:	f000 fa90 	bl	80057ac <RTC_ByteToBcd2>
 800528c:	4603      	mov	r3, r0
 800528e:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005290:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005298:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800529e:	4313      	orrs	r3, r2
 80052a0:	617b      	str	r3, [r7, #20]
 80052a2:	e022      	b.n	80052ea <HAL_RTC_SetAlarm_IT+0xfa>
    }
    else /* Format BCD */
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80052a4:	4b51      	ldr	r3, [pc, #324]	@ (80053ec <HAL_RTC_SetAlarm_IT+0x1fc>)
 80052a6:	699b      	ldr	r3, [r3, #24]
 80052a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d102      	bne.n	80052b6 <HAL_RTC_SetAlarm_IT+0xc6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	2200      	movs	r2, #0
 80052b4:	70da      	strb	r2, [r3, #3]
      {
        assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
      }

#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	785b      	ldrb	r3, [r3, #1]
 80052c0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80052c2:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80052c4:	68ba      	ldr	r2, [r7, #8]
 80052c6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80052c8:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	78db      	ldrb	r3, [r3, #3]
 80052ce:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80052d0:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80052d8:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80052da:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80052e0:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80052e6:	4313      	orrs	r3, r2
 80052e8:	617b      	str	r3, [r7, #20]
    }
  }


  /* Configure the Alarm registers */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052f2:	d137      	bne.n	8005364 <HAL_RTC_SetAlarm_IT+0x174>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80052f4:	4b3d      	ldr	r3, [pc, #244]	@ (80053ec <HAL_RTC_SetAlarm_IT+0x1fc>)
 80052f6:	699b      	ldr	r3, [r3, #24]
 80052f8:	4a3c      	ldr	r2, [pc, #240]	@ (80053ec <HAL_RTC_SetAlarm_IT+0x1fc>)
 80052fa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80052fe:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8005300:	4b3a      	ldr	r3, [pc, #232]	@ (80053ec <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005302:	2201      	movs	r2, #1
 8005304:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800530c:	d107      	bne.n	800531e <HAL_RTC_SetAlarm_IT+0x12e>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	699a      	ldr	r2, [r3, #24]
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	69db      	ldr	r3, [r3, #28]
 8005316:	4935      	ldr	r1, [pc, #212]	@ (80053ec <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005318:	4313      	orrs	r3, r2
 800531a:	644b      	str	r3, [r1, #68]	@ 0x44
 800531c:	e006      	b.n	800532c <HAL_RTC_SetAlarm_IT+0x13c>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 800531e:	4a33      	ldr	r2, [pc, #204]	@ (80053ec <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	6413      	str	r3, [r2, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8005324:	4a31      	ldr	r2, [pc, #196]	@ (80053ec <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	6453      	str	r3, [r2, #68]	@ 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 800532c:	4a2f      	ldr	r2, [pc, #188]	@ (80053ec <HAL_RTC_SetAlarm_IT+0x1fc>)
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	6713      	str	r3, [r2, #112]	@ 0x70

    if (sAlarm->FlagAutoClr == ALARM_FLAG_AUTOCLR_ENABLE)
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005338:	2b01      	cmp	r3, #1
 800533a:	d106      	bne.n	800534a <HAL_RTC_SetAlarm_IT+0x15a>
    {
      /* Configure the  Alarm A output clear */
      SET_BIT(RTC->CR, RTC_CR_ALRAFCLR);
 800533c:	4b2b      	ldr	r3, [pc, #172]	@ (80053ec <HAL_RTC_SetAlarm_IT+0x1fc>)
 800533e:	699b      	ldr	r3, [r3, #24]
 8005340:	4a2a      	ldr	r2, [pc, #168]	@ (80053ec <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005342:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005346:	6193      	str	r3, [r2, #24]
 8005348:	e005      	b.n	8005356 <HAL_RTC_SetAlarm_IT+0x166>
    }
    else
    {
      /* Disable the  Alarm A output clear*/
      CLEAR_BIT(RTC->CR, RTC_CR_ALRAFCLR);
 800534a:	4b28      	ldr	r3, [pc, #160]	@ (80053ec <HAL_RTC_SetAlarm_IT+0x1fc>)
 800534c:	699b      	ldr	r3, [r3, #24]
 800534e:	4a27      	ldr	r2, [pc, #156]	@ (80053ec <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005350:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8005354:	6193      	str	r3, [r2, #24]
    }

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8005356:	4b25      	ldr	r3, [pc, #148]	@ (80053ec <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005358:	699b      	ldr	r3, [r3, #24]
 800535a:	4a24      	ldr	r2, [pc, #144]	@ (80053ec <HAL_RTC_SetAlarm_IT+0x1fc>)
 800535c:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 8005360:	6193      	str	r3, [r2, #24]
 8005362:	e036      	b.n	80053d2 <HAL_RTC_SetAlarm_IT+0x1e2>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8005364:	4b21      	ldr	r3, [pc, #132]	@ (80053ec <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005366:	699b      	ldr	r3, [r3, #24]
 8005368:	4a20      	ldr	r2, [pc, #128]	@ (80053ec <HAL_RTC_SetAlarm_IT+0x1fc>)
 800536a:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 800536e:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8005370:	4b1e      	ldr	r3, [pc, #120]	@ (80053ec <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005372:	2202      	movs	r2, #2
 8005374:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800537c:	d107      	bne.n	800538e <HAL_RTC_SetAlarm_IT+0x19e>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	699a      	ldr	r2, [r3, #24]
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	69db      	ldr	r3, [r3, #28]
 8005386:	4919      	ldr	r1, [pc, #100]	@ (80053ec <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005388:	4313      	orrs	r3, r2
 800538a:	64cb      	str	r3, [r1, #76]	@ 0x4c
 800538c:	e006      	b.n	800539c <HAL_RTC_SetAlarm_IT+0x1ac>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 800538e:	4a17      	ldr	r2, [pc, #92]	@ (80053ec <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	6493      	str	r3, [r2, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8005394:	4a15      	ldr	r2, [pc, #84]	@ (80053ec <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	64d3      	str	r3, [r2, #76]	@ 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 800539c:	4a13      	ldr	r2, [pc, #76]	@ (80053ec <HAL_RTC_SetAlarm_IT+0x1fc>)
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	6753      	str	r3, [r2, #116]	@ 0x74

    if (sAlarm->FlagAutoClr == ALARM_FLAG_AUTOCLR_ENABLE)
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d106      	bne.n	80053ba <HAL_RTC_SetAlarm_IT+0x1ca>
    {
      /* Configure the  Alarm B Output clear */
      SET_BIT(RTC->CR, RTC_CR_ALRBFCLR);
 80053ac:	4b0f      	ldr	r3, [pc, #60]	@ (80053ec <HAL_RTC_SetAlarm_IT+0x1fc>)
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	4a0e      	ldr	r2, [pc, #56]	@ (80053ec <HAL_RTC_SetAlarm_IT+0x1fc>)
 80053b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053b6:	6193      	str	r3, [r2, #24]
 80053b8:	e005      	b.n	80053c6 <HAL_RTC_SetAlarm_IT+0x1d6>
    }
    else
    {
      /* Disable the  Alarm B Output clear */
      CLEAR_BIT(RTC->CR, RTC_CR_ALRBFCLR);
 80053ba:	4b0c      	ldr	r3, [pc, #48]	@ (80053ec <HAL_RTC_SetAlarm_IT+0x1fc>)
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	4a0b      	ldr	r2, [pc, #44]	@ (80053ec <HAL_RTC_SetAlarm_IT+0x1fc>)
 80053c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053c4:	6193      	str	r3, [r2, #24]
    }

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80053c6:	4b09      	ldr	r3, [pc, #36]	@ (80053ec <HAL_RTC_SetAlarm_IT+0x1fc>)
 80053c8:	699b      	ldr	r3, [r3, #24]
 80053ca:	4a08      	ldr	r2, [pc, #32]	@ (80053ec <HAL_RTC_SetAlarm_IT+0x1fc>)
 80053cc:	f443 5308 	orr.w	r3, r3, #8704	@ 0x2200
 80053d0:	6193      	str	r3, [r2, #24]
  }


  hrtc->State = HAL_RTC_STATE_READY;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2201      	movs	r2, #1
 80053d6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80053e2:	2300      	movs	r3, #0
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	371c      	adds	r7, #28
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd90      	pop	{r4, r7, pc}
 80053ec:	46007800 	.word	0x46007800

080053f0 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005400:	2b01      	cmp	r3, #1
 8005402:	d101      	bne.n	8005408 <HAL_RTC_DeactivateAlarm+0x18>
 8005404:	2302      	movs	r3, #2
 8005406:	e02d      	b.n	8005464 <HAL_RTC_DeactivateAlarm+0x74>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2202      	movs	r2, #2
 8005414:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d


  /* In case of interrupt mode is used, the interrupt source must disabled */
  if (Alarm == RTC_ALARM_A)
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800541e:	d10c      	bne.n	800543a <HAL_RTC_DeactivateAlarm+0x4a>
  {
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8005420:	4b13      	ldr	r3, [pc, #76]	@ (8005470 <HAL_RTC_DeactivateAlarm+0x80>)
 8005422:	699b      	ldr	r3, [r3, #24]
 8005424:	4a12      	ldr	r2, [pc, #72]	@ (8005470 <HAL_RTC_DeactivateAlarm+0x80>)
 8005426:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800542a:	6193      	str	r3, [r2, #24]
    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 800542c:	4b10      	ldr	r3, [pc, #64]	@ (8005470 <HAL_RTC_DeactivateAlarm+0x80>)
 800542e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005430:	4a0f      	ldr	r2, [pc, #60]	@ (8005470 <HAL_RTC_DeactivateAlarm+0x80>)
 8005432:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005436:	6453      	str	r3, [r2, #68]	@ 0x44
 8005438:	e00b      	b.n	8005452 <HAL_RTC_DeactivateAlarm+0x62>
  }
  else
  {
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800543a:	4b0d      	ldr	r3, [pc, #52]	@ (8005470 <HAL_RTC_DeactivateAlarm+0x80>)
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	4a0c      	ldr	r2, [pc, #48]	@ (8005470 <HAL_RTC_DeactivateAlarm+0x80>)
 8005440:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8005444:	6193      	str	r3, [r2, #24]
    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8005446:	4b0a      	ldr	r3, [pc, #40]	@ (8005470 <HAL_RTC_DeactivateAlarm+0x80>)
 8005448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800544a:	4a09      	ldr	r2, [pc, #36]	@ (8005470 <HAL_RTC_DeactivateAlarm+0x80>)
 800544c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005450:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }


  hrtc->State = HAL_RTC_STATE_READY;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2201      	movs	r2, #1
 8005456:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	370c      	adds	r7, #12
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr
 8005470:	46007800 	.word	0x46007800

08005474 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(const RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm,
                                   uint32_t Format)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b086      	sub	sp, #24
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	607a      	str	r2, [r7, #4]
 8005480:	603b      	str	r3, [r7, #0]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if (Alarm == RTC_ALARM_A)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005488:	d141      	bne.n	800550e <HAL_RTC_GetAlarm+0x9a>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005490:	62da      	str	r2, [r3, #44]	@ 0x2c

    tmpreg = READ_REG(RTC->ALRMAR);
 8005492:	4b56      	ldr	r3, [pc, #344]	@ (80055ec <HAL_RTC_GetAlarm+0x178>)
 8005494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005496:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)(READ_REG(RTC->ALRMASSR) & RTC_ALRMASSR_SS);
 8005498:	4b54      	ldr	r3, [pc, #336]	@ (80055ec <HAL_RTC_GetAlarm+0x178>)
 800549a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800549c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80054a0:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	0c1b      	lsrs	r3, r3, #16
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80054ac:	b2da      	uxtb	r2, r3
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	0a1b      	lsrs	r3, r3, #8
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054bc:	b2da      	uxtb	r2, r3
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054ca:	b2da      	uxtb	r2, r3
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	0d9b      	lsrs	r3, r3, #22
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	f003 0301 	and.w	r3, r3, #1
 80054da:	b2da      	uxtb	r2, r3
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	693a      	ldr	r2, [r7, #16]
 80054e4:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	0e1b      	lsrs	r3, r3, #24
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80054f0:	b2da      	uxtb	r2, r3
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	621a      	str	r2, [r3, #32]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	f003 3280 	and.w	r2, r3, #2155905152	@ 0x80808080
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	615a      	str	r2, [r3, #20]
 800550c:	e040      	b.n	8005590 <HAL_RTC_GetAlarm+0x11c>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005514:	62da      	str	r2, [r3, #44]	@ 0x2c

    tmpreg = READ_REG(RTC->ALRMBR);
 8005516:	4b35      	ldr	r3, [pc, #212]	@ (80055ec <HAL_RTC_GetAlarm+0x178>)
 8005518:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800551a:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)(READ_REG(RTC->ALRMBSSR) & RTC_ALRMBSSR_SS);
 800551c:	4b33      	ldr	r3, [pc, #204]	@ (80055ec <HAL_RTC_GetAlarm+0x178>)
 800551e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005520:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005524:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	0c1b      	lsrs	r3, r3, #16
 800552a:	b2db      	uxtb	r3, r3
 800552c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005530:	b2da      	uxtb	r2, r3
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	0a1b      	lsrs	r3, r3, #8
 800553a:	b2db      	uxtb	r3, r3
 800553c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005540:	b2da      	uxtb	r2, r3
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	b2db      	uxtb	r3, r3
 800554a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800554e:	b2da      	uxtb	r2, r3
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	0d9b      	lsrs	r3, r3, #22
 8005558:	b2db      	uxtb	r3, r3
 800555a:	f003 0301 	and.w	r3, r3, #1
 800555e:	b2da      	uxtb	r2, r3
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	693a      	ldr	r2, [r7, #16]
 8005568:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	0e1b      	lsrs	r3, r3, #24
 800556e:	b2db      	uxtb	r3, r3
 8005570:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005574:	b2da      	uxtb	r2, r3
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	621a      	str	r2, [r3, #32]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	f003 3280 	and.w	r2, r3, #2155905152	@ 0x80808080
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	615a      	str	r2, [r3, #20]
  }

  if (Format == RTC_FORMAT_BIN)
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d125      	bne.n	80055e2 <HAL_RTC_GetAlarm+0x16e>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	4618      	mov	r0, r3
 800559c:	f000 f926 	bl	80057ec <RTC_Bcd2ToByte>
 80055a0:	4603      	mov	r3, r0
 80055a2:	461a      	mov	r2, r3
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	785b      	ldrb	r3, [r3, #1]
 80055ac:	4618      	mov	r0, r3
 80055ae:	f000 f91d 	bl	80057ec <RTC_Bcd2ToByte>
 80055b2:	4603      	mov	r3, r0
 80055b4:	461a      	mov	r2, r3
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	789b      	ldrb	r3, [r3, #2]
 80055be:	4618      	mov	r0, r3
 80055c0:	f000 f914 	bl	80057ec <RTC_Bcd2ToByte>
 80055c4:	4603      	mov	r3, r0
 80055c6:	461a      	mov	r2, r3
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80055d2:	4618      	mov	r0, r3
 80055d4:	f000 f90a 	bl	80057ec <RTC_Bcd2ToByte>
 80055d8:	4603      	mov	r3, r0
 80055da:	461a      	mov	r2, r3
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 80055e2:	2300      	movs	r3, #0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3718      	adds	r7, #24
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	46007800 	.word	0x46007800

080055f0 <HAL_RTC_AlarmIRQHandler>:
  * @note   Alarm non-secure is available in non-secure driver.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  /* Get interrupt status */
  uint32_t tmp = READ_REG(RTC->MISR);
 80055f8:	4b10      	ldr	r3, [pc, #64]	@ (800563c <HAL_RTC_AlarmIRQHandler+0x4c>)
 80055fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055fc:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f003 0301 	and.w	r3, r3, #1
 8005604:	2b00      	cmp	r3, #0
 8005606:	d005      	beq.n	8005614 <HAL_RTC_AlarmIRQHandler+0x24>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8005608:	4b0c      	ldr	r3, [pc, #48]	@ (800563c <HAL_RTC_AlarmIRQHandler+0x4c>)
 800560a:	2201      	movs	r2, #1
 800560c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 f816 	bl	8005640 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f003 0302 	and.w	r3, r3, #2
 800561a:	2b00      	cmp	r3, #0
 800561c:	d005      	beq.n	800562a <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800561e:	4b07      	ldr	r3, [pc, #28]	@ (800563c <HAL_RTC_AlarmIRQHandler+0x4c>)
 8005620:	2202      	movs	r2, #2
 8005622:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f000 f92b 	bl	8005880 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2201      	movs	r2, #1
 800562e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8005632:	bf00      	nop
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	46007800 	.word	0x46007800

08005640 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A secure secure callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the secure secure callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8005648:	bf00      	nop
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800565c:	4b15      	ldr	r3, [pc, #84]	@ (80056b4 <HAL_RTC_WaitForSynchro+0x60>)
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	4a14      	ldr	r2, [pc, #80]	@ (80056b4 <HAL_RTC_WaitForSynchro+0x60>)
 8005662:	f023 0320 	bic.w	r3, r3, #32
 8005666:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8005668:	f7fc fae6 	bl	8001c38 <HAL_GetTick>
 800566c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800566e:	e013      	b.n	8005698 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005670:	f7fc fae2 	bl	8001c38 <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800567e:	d90b      	bls.n	8005698 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8005680:	4b0c      	ldr	r3, [pc, #48]	@ (80056b4 <HAL_RTC_WaitForSynchro+0x60>)
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	f003 0320 	and.w	r3, r3, #32
 8005688:	2b00      	cmp	r3, #0
 800568a:	d10c      	bne.n	80056a6 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2203      	movs	r2, #3
 8005690:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e008      	b.n	80056aa <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8005698:	4b06      	ldr	r3, [pc, #24]	@ (80056b4 <HAL_RTC_WaitForSynchro+0x60>)
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	f003 0320 	and.w	r3, r3, #32
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d0e5      	beq.n	8005670 <HAL_RTC_WaitForSynchro+0x1c>
 80056a4:	e000      	b.n	80056a8 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 80056a6:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3710      	adds	r7, #16
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	46007800 	.word	0x46007800

080056b8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056c0:	2300      	movs	r3, #0
 80056c2:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80056c4:	4b19      	ldr	r3, [pc, #100]	@ (800572c <RTC_EnterInitMode+0x74>)
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d128      	bne.n	8005722 <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80056d0:	4b16      	ldr	r3, [pc, #88]	@ (800572c <RTC_EnterInitMode+0x74>)
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	4a15      	ldr	r2, [pc, #84]	@ (800572c <RTC_EnterInitMode+0x74>)
 80056d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056da:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80056dc:	f7fc faac 	bl	8001c38 <HAL_GetTick>
 80056e0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80056e2:	e013      	b.n	800570c <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80056e4:	f7fc faa8 	bl	8001c38 <HAL_GetTick>
 80056e8:	4602      	mov	r2, r0
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80056f2:	d90b      	bls.n	800570c <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80056f4:	4b0d      	ldr	r3, [pc, #52]	@ (800572c <RTC_EnterInitMode+0x74>)
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d10f      	bne.n	8005720 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2203      	movs	r2, #3
 8005708:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800570c:	4b07      	ldr	r3, [pc, #28]	@ (800572c <RTC_EnterInitMode+0x74>)
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005714:	2b00      	cmp	r3, #0
 8005716:	d104      	bne.n	8005722 <RTC_EnterInitMode+0x6a>
 8005718:	7bfb      	ldrb	r3, [r7, #15]
 800571a:	2b03      	cmp	r3, #3
 800571c:	d1e2      	bne.n	80056e4 <RTC_EnterInitMode+0x2c>
 800571e:	e000      	b.n	8005722 <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 8005720:	bf00      	nop
        }
      }
    }
  }

  return status;
 8005722:	7bfb      	ldrb	r3, [r7, #15]
}
 8005724:	4618      	mov	r0, r3
 8005726:	3710      	adds	r7, #16
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}
 800572c:	46007800 	.word	0x46007800

08005730 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005738:	2300      	movs	r3, #0
 800573a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800573c:	4b1a      	ldr	r3, [pc, #104]	@ (80057a8 <RTC_ExitInitMode+0x78>)
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	4a19      	ldr	r2, [pc, #100]	@ (80057a8 <RTC_ExitInitMode+0x78>)
 8005742:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005746:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005748:	4b17      	ldr	r3, [pc, #92]	@ (80057a8 <RTC_ExitInitMode+0x78>)
 800574a:	699b      	ldr	r3, [r3, #24]
 800574c:	f003 0320 	and.w	r3, r3, #32
 8005750:	2b00      	cmp	r3, #0
 8005752:	d10c      	bne.n	800576e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f7ff ff7d 	bl	8005654 <HAL_RTC_WaitForSynchro>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d01e      	beq.n	800579e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2203      	movs	r2, #3
 8005764:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	73fb      	strb	r3, [r7, #15]
 800576c:	e017      	b.n	800579e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800576e:	4b0e      	ldr	r3, [pc, #56]	@ (80057a8 <RTC_ExitInitMode+0x78>)
 8005770:	699b      	ldr	r3, [r3, #24]
 8005772:	4a0d      	ldr	r2, [pc, #52]	@ (80057a8 <RTC_ExitInitMode+0x78>)
 8005774:	f023 0320 	bic.w	r3, r3, #32
 8005778:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f7ff ff6a 	bl	8005654 <HAL_RTC_WaitForSynchro>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d005      	beq.n	8005792 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2203      	movs	r2, #3
 800578a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005792:	4b05      	ldr	r3, [pc, #20]	@ (80057a8 <RTC_ExitInitMode+0x78>)
 8005794:	699b      	ldr	r3, [r3, #24]
 8005796:	4a04      	ldr	r2, [pc, #16]	@ (80057a8 <RTC_ExitInitMode+0x78>)
 8005798:	f043 0320 	orr.w	r3, r3, #32
 800579c:	6193      	str	r3, [r2, #24]
  }
  return status;
 800579e:	7bfb      	ldrb	r3, [r7, #15]
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3710      	adds	r7, #16
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	46007800 	.word	0x46007800

080057ac <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b085      	sub	sp, #20
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	4603      	mov	r3, r0
 80057b4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80057b6:	2300      	movs	r3, #0
 80057b8:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 80057ba:	79fb      	ldrb	r3, [r7, #7]
 80057bc:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 80057be:	e005      	b.n	80057cc <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	3301      	adds	r3, #1
 80057c4:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 80057c6:	7afb      	ldrb	r3, [r7, #11]
 80057c8:	3b0a      	subs	r3, #10
 80057ca:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 80057cc:	7afb      	ldrb	r3, [r7, #11]
 80057ce:	2b09      	cmp	r3, #9
 80057d0:	d8f6      	bhi.n	80057c0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	011b      	lsls	r3, r3, #4
 80057d8:	b2da      	uxtb	r2, r3
 80057da:	7afb      	ldrb	r3, [r7, #11]
 80057dc:	4313      	orrs	r3, r2
 80057de:	b2db      	uxtb	r3, r3
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3714      	adds	r7, #20
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b085      	sub	sp, #20
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	4603      	mov	r3, r0
 80057f4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 80057f6:	79fb      	ldrb	r3, [r7, #7]
 80057f8:	091b      	lsrs	r3, r3, #4
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	461a      	mov	r2, r3
 80057fe:	4613      	mov	r3, r2
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	4413      	add	r3, r2
 8005804:	005b      	lsls	r3, r3, #1
 8005806:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	b2da      	uxtb	r2, r3
 800580c:	79fb      	ldrb	r3, [r7, #7]
 800580e:	f003 030f 	and.w	r3, r3, #15
 8005812:	b2db      	uxtb	r3, r3
 8005814:	4413      	add	r3, r2
 8005816:	b2db      	uxtb	r3, r3
}
 8005818:	4618      	mov	r0, r3
 800581a:	3714      	adds	r7, #20
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005832:	2b01      	cmp	r3, #1
 8005834:	d101      	bne.n	800583a <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8005836:	2302      	movs	r3, #2
 8005838:	e019      	b.n	800586e <HAL_RTCEx_DeactivateWakeUpTimer+0x4a>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2201      	movs	r2, #1
 800583e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2202      	movs	r2, #2
 8005846:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d


  /* Disable the Wakeup Timer */
  /* In case of interrupt mode is used, the interrupt source must disabled */
  CLEAR_BIT(RTC->CR, (RTC_CR_WUTE | RTC_CR_WUTIE));
 800584a:	4b0c      	ldr	r3, [pc, #48]	@ (800587c <HAL_RTCEx_DeactivateWakeUpTimer+0x58>)
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	4a0b      	ldr	r2, [pc, #44]	@ (800587c <HAL_RTCEx_DeactivateWakeUpTimer+0x58>)
 8005850:	f423 4388 	bic.w	r3, r3, #17408	@ 0x4400
 8005854:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005856:	4b09      	ldr	r3, [pc, #36]	@ (800587c <HAL_RTCEx_DeactivateWakeUpTimer+0x58>)
 8005858:	22ff      	movs	r2, #255	@ 0xff
 800585a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	370c      	adds	r7, #12
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	46007800 	.word	0x46007800

08005880 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005888:	bf00      	nop
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	4910      	ldr	r1, [pc, #64]	@ (80058e8 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80058a8:	4313      	orrs	r3, r2
 80058aa:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	689a      	ldr	r2, [r3, #8]
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	431a      	orrs	r2, r3
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	699b      	ldr	r3, [r3, #24]
 80058ba:	490c      	ldr	r1, [pc, #48]	@ (80058ec <HAL_RTCEx_PrivilegeModeSet+0x58>)
 80058bc:	4313      	orrs	r3, r2
 80058be:	624b      	str	r3, [r1, #36]	@ 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 80058c0:	4b0a      	ldr	r3, [pc, #40]	@ (80058ec <HAL_RTCEx_PrivilegeModeSet+0x58>)
 80058c2:	6a1b      	ldr	r3, [r3, #32]
 80058c4:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	6919      	ldr	r1, [r3, #16]
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	695b      	ldr	r3, [r3, #20]
 80058d0:	041b      	lsls	r3, r3, #16
 80058d2:	430b      	orrs	r3, r1
 80058d4:	4905      	ldr	r1, [pc, #20]	@ (80058ec <HAL_RTCEx_PrivilegeModeSet+0x58>)
 80058d6:	4313      	orrs	r3, r2
 80058d8:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr
 80058e8:	46007800 	.word	0x46007800
 80058ec:	46007c00 	.word	0x46007c00

080058f0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d101      	bne.n	8005902 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e0fb      	b.n	8005afa <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a7f      	ldr	r2, [pc, #508]	@ (8005b04 <HAL_SPI_Init+0x214>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d004      	beq.n	8005916 <HAL_SPI_Init+0x26>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a7d      	ldr	r2, [pc, #500]	@ (8005b08 <HAL_SPI_Init+0x218>)
 8005912:	4293      	cmp	r3, r2
 8005914:	e000      	b.n	8005918 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8005916:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a78      	ldr	r2, [pc, #480]	@ (8005b04 <HAL_SPI_Init+0x214>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d004      	beq.n	8005932 <HAL_SPI_Init+0x42>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a76      	ldr	r2, [pc, #472]	@ (8005b08 <HAL_SPI_Init+0x218>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d105      	bne.n	800593e <HAL_SPI_Init+0x4e>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	2b0f      	cmp	r3, #15
 8005938:	d901      	bls.n	800593e <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e0dd      	b.n	8005afa <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 fd7a 	bl	8006438 <SPI_GetPacketSize>
 8005944:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a6e      	ldr	r2, [pc, #440]	@ (8005b04 <HAL_SPI_Init+0x214>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d004      	beq.n	800595a <HAL_SPI_Init+0x6a>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a6c      	ldr	r2, [pc, #432]	@ (8005b08 <HAL_SPI_Init+0x218>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d102      	bne.n	8005960 <HAL_SPI_Init+0x70>
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2b08      	cmp	r3, #8
 800595e:	d816      	bhi.n	800598e <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005964:	4a69      	ldr	r2, [pc, #420]	@ (8005b0c <HAL_SPI_Init+0x21c>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d00e      	beq.n	8005988 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a68      	ldr	r2, [pc, #416]	@ (8005b10 <HAL_SPI_Init+0x220>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d009      	beq.n	8005988 <HAL_SPI_Init+0x98>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a66      	ldr	r2, [pc, #408]	@ (8005b14 <HAL_SPI_Init+0x224>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d004      	beq.n	8005988 <HAL_SPI_Init+0x98>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a65      	ldr	r2, [pc, #404]	@ (8005b18 <HAL_SPI_Init+0x228>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d104      	bne.n	8005992 <HAL_SPI_Init+0xa2>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2b10      	cmp	r3, #16
 800598c:	d901      	bls.n	8005992 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	e0b3      	b.n	8005afa <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8005998:	b2db      	uxtb	r3, r3
 800599a:	2b00      	cmp	r3, #0
 800599c:	d106      	bne.n	80059ac <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f7fb feee 	bl	8001788 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2202      	movs	r2, #2
 80059b0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f022 0201 	bic.w	r2, r2, #1
 80059c2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80059ce:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	699b      	ldr	r3, [r3, #24]
 80059d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80059d8:	d119      	bne.n	8005a0e <HAL_SPI_Init+0x11e>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80059e2:	d103      	bne.n	80059ec <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d008      	beq.n	80059fe <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d10c      	bne.n	8005a0e <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80059f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059fc:	d107      	bne.n	8005a0e <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005a0c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00f      	beq.n	8005a3a <HAL_SPI_Init+0x14a>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	2b06      	cmp	r3, #6
 8005a20:	d90b      	bls.n	8005a3a <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	430a      	orrs	r2, r1
 8005a36:	601a      	str	r2, [r3, #0]
 8005a38:	e007      	b.n	8005a4a <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005a48:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	69da      	ldr	r2, [r3, #28]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a52:	431a      	orrs	r2, r3
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	431a      	orrs	r2, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a5c:	ea42 0103 	orr.w	r1, r2, r3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	68da      	ldr	r2, [r3, #12]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	430a      	orrs	r2, r1
 8005a6a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a74:	431a      	orrs	r2, r3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a7a:	431a      	orrs	r2, r3
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	699b      	ldr	r3, [r3, #24]
 8005a80:	431a      	orrs	r2, r3
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	431a      	orrs	r2, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	695b      	ldr	r3, [r3, #20]
 8005a8c:	431a      	orrs	r2, r3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a1b      	ldr	r3, [r3, #32]
 8005a92:	431a      	orrs	r2, r3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	431a      	orrs	r2, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a9e:	431a      	orrs	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	431a      	orrs	r2, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005aaa:	431a      	orrs	r2, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ab0:	431a      	orrs	r2, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ab6:	ea42 0103 	orr.w	r1, r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	430a      	orrs	r2, r1
 8005ac4:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00a      	beq.n	8005ae8 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	430a      	orrs	r2, r1
 8005ae6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3710      	adds	r7, #16
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	46002000 	.word	0x46002000
 8005b08:	56002000 	.word	0x56002000
 8005b0c:	40013000 	.word	0x40013000
 8005b10:	50013000 	.word	0x50013000
 8005b14:	40003800 	.word	0x40003800
 8005b18:	50003800 	.word	0x50003800

08005b1c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b088      	sub	sp, #32
 8005b20:	af02      	add	r7, sp, #8
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	603b      	str	r3, [r7, #0]
 8005b28:	4613      	mov	r3, r2
 8005b2a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	3320      	adds	r3, #32
 8005b32:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b34:	f7fc f880 	bl	8001c38 <HAL_GetTick>
 8005b38:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d001      	beq.n	8005b4a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8005b46:	2302      	movs	r3, #2
 8005b48:	e1f3      	b.n	8005f32 <HAL_SPI_Transmit+0x416>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d002      	beq.n	8005b56 <HAL_SPI_Transmit+0x3a>
 8005b50:	88fb      	ldrh	r3, [r7, #6]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d101      	bne.n	8005b5a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e1eb      	b.n	8005f32 <HAL_SPI_Transmit+0x416>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d101      	bne.n	8005b68 <HAL_SPI_Transmit+0x4c>
 8005b64:	2302      	movs	r3, #2
 8005b66:	e1e4      	b.n	8005f32 <HAL_SPI_Transmit+0x416>
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2203      	movs	r2, #3
 8005b74:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	68ba      	ldr	r2, [r7, #8]
 8005b84:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	88fa      	ldrh	r2, [r7, #6]
 8005b8a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	88fa      	ldrh	r2, [r7, #6]
 8005b92:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8005bc0:	d108      	bne.n	8005bd4 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005bd0:	601a      	str	r2, [r3, #0]
 8005bd2:	e009      	b.n	8005be8 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8005be6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	0c1b      	lsrs	r3, r3, #16
 8005bf0:	041b      	lsls	r3, r3, #16
 8005bf2:	88f9      	ldrh	r1, [r7, #6]
 8005bf4:	68fa      	ldr	r2, [r7, #12]
 8005bf6:	6812      	ldr	r2, [r2, #0]
 8005bf8:	430b      	orrs	r3, r1
 8005bfa:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f042 0201 	orr.w	r2, r2, #1
 8005c0a:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	69db      	ldr	r3, [r3, #28]
 8005c12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d10c      	bne.n	8005c34 <HAL_SPI_Transmit+0x118>
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c22:	d107      	bne.n	8005c34 <HAL_SPI_Transmit+0x118>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c32:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	2b0f      	cmp	r3, #15
 8005c3a:	d95b      	bls.n	8005cf4 <HAL_SPI_Transmit+0x1d8>
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a8f      	ldr	r2, [pc, #572]	@ (8005e80 <HAL_SPI_Transmit+0x364>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d04f      	beq.n	8005ce6 <HAL_SPI_Transmit+0x1ca>
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a8e      	ldr	r2, [pc, #568]	@ (8005e84 <HAL_SPI_Transmit+0x368>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d04a      	beq.n	8005ce6 <HAL_SPI_Transmit+0x1ca>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a8c      	ldr	r2, [pc, #560]	@ (8005e88 <HAL_SPI_Transmit+0x36c>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d045      	beq.n	8005ce6 <HAL_SPI_Transmit+0x1ca>
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a8b      	ldr	r2, [pc, #556]	@ (8005e8c <HAL_SPI_Transmit+0x370>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d147      	bne.n	8005cf4 <HAL_SPI_Transmit+0x1d8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005c64:	e03f      	b.n	8005ce6 <HAL_SPI_Transmit+0x1ca>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	695b      	ldr	r3, [r3, #20]
 8005c6c:	f003 0302 	and.w	r3, r3, #2
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	d114      	bne.n	8005c9e <HAL_SPI_Transmit+0x182>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	6812      	ldr	r2, [r2, #0]
 8005c7e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c84:	1d1a      	adds	r2, r3, #4
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	3b01      	subs	r3, #1
 8005c94:	b29a      	uxth	r2, r3
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005c9c:	e023      	b.n	8005ce6 <HAL_SPI_Transmit+0x1ca>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c9e:	f7fb ffcb 	bl	8001c38 <HAL_GetTick>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	683a      	ldr	r2, [r7, #0]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d803      	bhi.n	8005cb6 <HAL_SPI_Transmit+0x19a>
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb4:	d102      	bne.n	8005cbc <HAL_SPI_Transmit+0x1a0>
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d114      	bne.n	8005ce6 <HAL_SPI_Transmit+0x1ca>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005cbc:	68f8      	ldr	r0, [r7, #12]
 8005cbe:	f000 faed 	bl	800629c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005cc8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e125      	b.n	8005f32 <HAL_SPI_Transmit+0x416>
    while (hspi->TxXferCount > 0UL)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d1b9      	bne.n	8005c66 <HAL_SPI_Transmit+0x14a>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8005cf2:	e0f8      	b.n	8005ee6 <HAL_SPI_Transmit+0x3ca>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	2b07      	cmp	r3, #7
 8005cfa:	f240 80ed 	bls.w	8005ed8 <HAL_SPI_Transmit+0x3bc>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005cfe:	e05d      	b.n	8005dbc <HAL_SPI_Transmit+0x2a0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	695b      	ldr	r3, [r3, #20]
 8005d06:	f003 0302 	and.w	r3, r3, #2
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d132      	bne.n	8005d74 <HAL_SPI_Transmit+0x258>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d918      	bls.n	8005d4c <HAL_SPI_Transmit+0x230>
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d014      	beq.n	8005d4c <HAL_SPI_Transmit+0x230>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	6812      	ldr	r2, [r2, #0]
 8005d2c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d32:	1d1a      	adds	r2, r3, #4
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	3b02      	subs	r3, #2
 8005d42:	b29a      	uxth	r2, r3
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005d4a:	e037      	b.n	8005dbc <HAL_SPI_Transmit+0x2a0>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d50:	881a      	ldrh	r2, [r3, #0]
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d5a:	1c9a      	adds	r2, r3, #2
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	3b01      	subs	r3, #1
 8005d6a:	b29a      	uxth	r2, r3
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005d72:	e023      	b.n	8005dbc <HAL_SPI_Transmit+0x2a0>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d74:	f7fb ff60 	bl	8001c38 <HAL_GetTick>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	683a      	ldr	r2, [r7, #0]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d803      	bhi.n	8005d8c <HAL_SPI_Transmit+0x270>
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d8a:	d102      	bne.n	8005d92 <HAL_SPI_Transmit+0x276>
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d114      	bne.n	8005dbc <HAL_SPI_Transmit+0x2a0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005d92:	68f8      	ldr	r0, [r7, #12]
 8005d94:	f000 fa82 	bl	800629c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005d9e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8005db8:	2303      	movs	r3, #3
 8005dba:	e0ba      	b.n	8005f32 <HAL_SPI_Transmit+0x416>
    while (hspi->TxXferCount > 0UL)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d19b      	bne.n	8005d00 <HAL_SPI_Transmit+0x1e4>
 8005dc8:	e08d      	b.n	8005ee6 <HAL_SPI_Transmit+0x3ca>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	695b      	ldr	r3, [r3, #20]
 8005dd0:	f003 0302 	and.w	r3, r3, #2
 8005dd4:	2b02      	cmp	r3, #2
 8005dd6:	d15b      	bne.n	8005e90 <HAL_SPI_Transmit+0x374>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	2b03      	cmp	r3, #3
 8005de2:	d918      	bls.n	8005e16 <HAL_SPI_Transmit+0x2fa>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005de8:	2b40      	cmp	r3, #64	@ 0x40
 8005dea:	d914      	bls.n	8005e16 <HAL_SPI_Transmit+0x2fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	6812      	ldr	r2, [r2, #0]
 8005df6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005dfc:	1d1a      	adds	r2, r3, #4
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	3b04      	subs	r3, #4
 8005e0c:	b29a      	uxth	r2, r3
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005e14:	e060      	b.n	8005ed8 <HAL_SPI_Transmit+0x3bc>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d917      	bls.n	8005e52 <HAL_SPI_Transmit+0x336>
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d013      	beq.n	8005e52 <HAL_SPI_Transmit+0x336>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e2e:	881a      	ldrh	r2, [r3, #0]
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e38:	1c9a      	adds	r2, r3, #2
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	3b02      	subs	r3, #2
 8005e48:	b29a      	uxth	r2, r3
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005e50:	e042      	b.n	8005ed8 <HAL_SPI_Transmit+0x3bc>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	3320      	adds	r3, #32
 8005e5c:	7812      	ldrb	r2, [r2, #0]
 8005e5e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e64:	1c5a      	adds	r2, r3, #1
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	3b01      	subs	r3, #1
 8005e74:	b29a      	uxth	r2, r3
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005e7c:	e02c      	b.n	8005ed8 <HAL_SPI_Transmit+0x3bc>
 8005e7e:	bf00      	nop
 8005e80:	40013000 	.word	0x40013000
 8005e84:	50013000 	.word	0x50013000
 8005e88:	40003800 	.word	0x40003800
 8005e8c:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e90:	f7fb fed2 	bl	8001c38 <HAL_GetTick>
 8005e94:	4602      	mov	r2, r0
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	683a      	ldr	r2, [r7, #0]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d803      	bhi.n	8005ea8 <HAL_SPI_Transmit+0x38c>
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea6:	d102      	bne.n	8005eae <HAL_SPI_Transmit+0x392>
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d114      	bne.n	8005ed8 <HAL_SPI_Transmit+0x3bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005eae:	68f8      	ldr	r0, [r7, #12]
 8005eb0:	f000 f9f4 	bl	800629c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005eba:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	e02c      	b.n	8005f32 <HAL_SPI_Transmit+0x416>
    while (hspi->TxXferCount > 0UL)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f47f af72 	bne.w	8005dca <HAL_SPI_Transmit+0x2ae>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	9300      	str	r3, [sp, #0]
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	2200      	movs	r2, #0
 8005eee:	2108      	movs	r1, #8
 8005ef0:	68f8      	ldr	r0, [r7, #12]
 8005ef2:	f000 fa73 	bl	80063dc <SPI_WaitOnFlagUntilTimeout>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d007      	beq.n	8005f0c <HAL_SPI_Transmit+0x3f0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f02:	f043 0220 	orr.w	r2, r3, #32
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005f0c:	68f8      	ldr	r0, [r7, #12]
 8005f0e:	f000 f9c5 	bl	800629c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2201      	movs	r2, #1
 8005f16:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d001      	beq.n	8005f30 <HAL_SPI_Transmit+0x414>
  {
    return HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e000      	b.n	8005f32 <HAL_SPI_Transmit+0x416>
  }
  else
  {
    return HAL_OK;
 8005f30:	2300      	movs	r3, #0
  }
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3718      	adds	r7, #24
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop

08005f3c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b086      	sub	sp, #24
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	603b      	str	r3, [r7, #0]
 8005f48:	4613      	mov	r3, r2
 8005f4a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	3330      	adds	r3, #48	@ 0x30
 8005f52:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f54:	f7fb fe70 	bl	8001c38 <HAL_GetTick>
 8005f58:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d001      	beq.n	8005f6a <HAL_SPI_Receive+0x2e>
  {
    return HAL_BUSY;
 8005f66:	2302      	movs	r3, #2
 8005f68:	e17e      	b.n	8006268 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d002      	beq.n	8005f76 <HAL_SPI_Receive+0x3a>
 8005f70:	88fb      	ldrh	r3, [r7, #6]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d101      	bne.n	8005f7a <HAL_SPI_Receive+0x3e>
  {
    return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e176      	b.n	8006268 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d101      	bne.n	8005f88 <HAL_SPI_Receive+0x4c>
 8005f84:	2302      	movs	r3, #2
 8005f86:	e16f      	b.n	8006268 <HAL_SPI_Receive+0x32c>
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2204      	movs	r2, #4
 8005f94:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	68ba      	ldr	r2, [r7, #8]
 8005fa4:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = Size;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	88fa      	ldrh	r2, [r7, #6]
 8005faa:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = Size;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	88fa      	ldrh	r2, [r7, #6]
 8005fb2:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8005fe0:	d108      	bne.n	8005ff4 <HAL_SPI_Receive+0xb8>
  {
    SPI_1LINE_RX(hspi);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005ff0:	601a      	str	r2, [r3, #0]
 8005ff2:	e009      	b.n	8006008 <HAL_SPI_Receive+0xcc>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8006006:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	0c1b      	lsrs	r3, r3, #16
 8006010:	041b      	lsls	r3, r3, #16
 8006012:	88f9      	ldrh	r1, [r7, #6]
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	6812      	ldr	r2, [r2, #0]
 8006018:	430b      	orrs	r3, r1
 800601a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f042 0201 	orr.w	r2, r2, #1
 800602a:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	69db      	ldr	r3, [r3, #28]
 8006032:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006036:	2b00      	cmp	r3, #0
 8006038:	d10c      	bne.n	8006054 <HAL_SPI_Receive+0x118>
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006042:	d107      	bne.n	8006054 <HAL_SPI_Receive+0x118>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006052:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	2b0f      	cmp	r3, #15
 800605a:	d95c      	bls.n	8006116 <HAL_SPI_Receive+0x1da>
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a83      	ldr	r2, [pc, #524]	@ (8006270 <HAL_SPI_Receive+0x334>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d050      	beq.n	8006108 <HAL_SPI_Receive+0x1cc>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a82      	ldr	r2, [pc, #520]	@ (8006274 <HAL_SPI_Receive+0x338>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d04b      	beq.n	8006108 <HAL_SPI_Receive+0x1cc>
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a80      	ldr	r2, [pc, #512]	@ (8006278 <HAL_SPI_Receive+0x33c>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d046      	beq.n	8006108 <HAL_SPI_Receive+0x1cc>
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a7f      	ldr	r2, [pc, #508]	@ (800627c <HAL_SPI_Receive+0x340>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d148      	bne.n	8006116 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006084:	e040      	b.n	8006108 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	695a      	ldr	r2, [r3, #20]
 800608c:	f248 0308 	movw	r3, #32776	@ 0x8008
 8006090:	4013      	ands	r3, r2
 8006092:	2b00      	cmp	r3, #0
 8006094:	d014      	beq.n	80060c0 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800609e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80060a0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060a6:	1d1a      	adds	r2, r3, #4
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	3b01      	subs	r3, #1
 80060b6:	b29a      	uxth	r2, r3
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 80060be:	e023      	b.n	8006108 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060c0:	f7fb fdba 	bl	8001c38 <HAL_GetTick>
 80060c4:	4602      	mov	r2, r0
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	1ad3      	subs	r3, r2, r3
 80060ca:	683a      	ldr	r2, [r7, #0]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d803      	bhi.n	80060d8 <HAL_SPI_Receive+0x19c>
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d6:	d102      	bne.n	80060de <HAL_SPI_Receive+0x1a2>
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d114      	bne.n	8006108 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80060de:	68f8      	ldr	r0, [r7, #12]
 80060e0:	f000 f8dc 	bl	800629c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80060ea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2200      	movs	r2, #0
 8006100:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8006104:	2303      	movs	r3, #3
 8006106:	e0af      	b.n	8006268 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800610e:	b29b      	uxth	r3, r3
 8006110:	2b00      	cmp	r3, #0
 8006112:	d1b8      	bne.n	8006086 <HAL_SPI_Receive+0x14a>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8006114:	e095      	b.n	8006242 <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	2b07      	cmp	r3, #7
 800611c:	f240 808b 	bls.w	8006236 <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006120:	e03f      	b.n	80061a2 <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	695b      	ldr	r3, [r3, #20]
 8006128:	f003 0301 	and.w	r3, r3, #1
 800612c:	2b01      	cmp	r3, #1
 800612e:	d114      	bne.n	800615a <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006134:	697a      	ldr	r2, [r7, #20]
 8006136:	8812      	ldrh	r2, [r2, #0]
 8006138:	b292      	uxth	r2, r2
 800613a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006140:	1c9a      	adds	r2, r3, #2
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800614c:	b29b      	uxth	r3, r3
 800614e:	3b01      	subs	r3, #1
 8006150:	b29a      	uxth	r2, r3
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8006158:	e023      	b.n	80061a2 <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800615a:	f7fb fd6d 	bl	8001c38 <HAL_GetTick>
 800615e:	4602      	mov	r2, r0
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	683a      	ldr	r2, [r7, #0]
 8006166:	429a      	cmp	r2, r3
 8006168:	d803      	bhi.n	8006172 <HAL_SPI_Receive+0x236>
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006170:	d102      	bne.n	8006178 <HAL_SPI_Receive+0x23c>
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d114      	bne.n	80061a2 <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006178:	68f8      	ldr	r0, [r7, #12]
 800617a:	f000 f88f 	bl	800629c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006184:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2201      	movs	r2, #1
 8006192:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2200      	movs	r2, #0
 800619a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e062      	b.n	8006268 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d1b9      	bne.n	8006122 <HAL_SPI_Receive+0x1e6>
 80061ae:	e048      	b.n	8006242 <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	695b      	ldr	r3, [r3, #20]
 80061b6:	f003 0301 	and.w	r3, r3, #1
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d117      	bne.n	80061ee <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061ca:	7812      	ldrb	r2, [r2, #0]
 80061cc:	b2d2      	uxtb	r2, r2
 80061ce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061d4:	1c5a      	adds	r2, r3, #1
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	3b01      	subs	r3, #1
 80061e4:	b29a      	uxth	r2, r3
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 80061ec:	e023      	b.n	8006236 <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061ee:	f7fb fd23 	bl	8001c38 <HAL_GetTick>
 80061f2:	4602      	mov	r2, r0
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	1ad3      	subs	r3, r2, r3
 80061f8:	683a      	ldr	r2, [r7, #0]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d803      	bhi.n	8006206 <HAL_SPI_Receive+0x2ca>
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006204:	d102      	bne.n	800620c <HAL_SPI_Receive+0x2d0>
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d114      	bne.n	8006236 <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800620c:	68f8      	ldr	r0, [r7, #12]
 800620e:	f000 f845 	bl	800629c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006218:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2201      	movs	r2, #1
 8006226:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2200      	movs	r2, #0
 800622e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8006232:	2303      	movs	r3, #3
 8006234:	e018      	b.n	8006268 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800623c:	b29b      	uxth	r3, r3
 800623e:	2b00      	cmp	r3, #0
 8006240:	d1b6      	bne.n	80061b0 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006242:	68f8      	ldr	r0, [r7, #12]
 8006244:	f000 f82a 	bl	800629c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2200      	movs	r2, #0
 8006254:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800625e:	2b00      	cmp	r3, #0
 8006260:	d001      	beq.n	8006266 <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e000      	b.n	8006268 <HAL_SPI_Receive+0x32c>
  }
  else
  {
    return HAL_OK;
 8006266:	2300      	movs	r3, #0
  }
}
 8006268:	4618      	mov	r0, r3
 800626a:	3718      	adds	r7, #24
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}
 8006270:	40013000 	.word	0x40013000
 8006274:	50013000 	.word	0x50013000
 8006278:	40003800 	.word	0x40003800
 800627c:	50003800 	.word	0x50003800

08006280 <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006280:	b480      	push	{r7}
 8006282:	b083      	sub	sp, #12
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800628e:	b2db      	uxtb	r3, r3
}
 8006290:	4618      	mov	r0, r3
 8006292:	370c      	adds	r7, #12
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800629c:	b480      	push	{r7}
 800629e:	b085      	sub	sp, #20
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	695b      	ldr	r3, [r3, #20]
 80062aa:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	699a      	ldr	r2, [r3, #24]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f042 0208 	orr.w	r2, r2, #8
 80062ba:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	699a      	ldr	r2, [r3, #24]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f042 0210 	orr.w	r2, r2, #16
 80062ca:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f022 0201 	bic.w	r2, r2, #1
 80062da:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	6812      	ldr	r2, [r2, #0]
 80062e6:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 80062ea:	f023 0303 	bic.w	r3, r3, #3
 80062ee:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	689a      	ldr	r2, [r3, #8]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80062fe:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8006306:	b2db      	uxtb	r3, r3
 8006308:	2b04      	cmp	r3, #4
 800630a:	d014      	beq.n	8006336 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f003 0320 	and.w	r3, r3, #32
 8006312:	2b00      	cmp	r3, #0
 8006314:	d00f      	beq.n	8006336 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800631c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	699a      	ldr	r2, [r3, #24]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f042 0220 	orr.w	r2, r2, #32
 8006334:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800633c:	b2db      	uxtb	r3, r3
 800633e:	2b03      	cmp	r3, #3
 8006340:	d014      	beq.n	800636c <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006348:	2b00      	cmp	r3, #0
 800634a:	d00f      	beq.n	800636c <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006352:	f043 0204 	orr.w	r2, r3, #4
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	699a      	ldr	r2, [r3, #24]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800636a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006372:	2b00      	cmp	r3, #0
 8006374:	d00f      	beq.n	8006396 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800637c:	f043 0201 	orr.w	r2, r3, #1
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	699a      	ldr	r2, [r3, #24]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006394:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800639c:	2b00      	cmp	r3, #0
 800639e:	d00f      	beq.n	80063c0 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80063a6:	f043 0208 	orr.w	r2, r3, #8
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	699a      	ldr	r2, [r3, #24]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80063be:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 80063d0:	bf00      	nop
 80063d2:	3714      	adds	r7, #20
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	603b      	str	r3, [r7, #0]
 80063e8:	4613      	mov	r3, r2
 80063ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80063ec:	e010      	b.n	8006410 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063ee:	f7fb fc23 	bl	8001c38 <HAL_GetTick>
 80063f2:	4602      	mov	r2, r0
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	1ad3      	subs	r3, r2, r3
 80063f8:	683a      	ldr	r2, [r7, #0]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d803      	bhi.n	8006406 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006404:	d102      	bne.n	800640c <SPI_WaitOnFlagUntilTimeout+0x30>
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d101      	bne.n	8006410 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800640c:	2303      	movs	r3, #3
 800640e:	e00f      	b.n	8006430 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	695a      	ldr	r2, [r3, #20]
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	4013      	ands	r3, r2
 800641a:	68ba      	ldr	r2, [r7, #8]
 800641c:	429a      	cmp	r2, r3
 800641e:	bf0c      	ite	eq
 8006420:	2301      	moveq	r3, #1
 8006422:	2300      	movne	r3, #0
 8006424:	b2db      	uxtb	r3, r3
 8006426:	461a      	mov	r2, r3
 8006428:	79fb      	ldrb	r3, [r7, #7]
 800642a:	429a      	cmp	r2, r3
 800642c:	d0df      	beq.n	80063ee <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800642e:	2300      	movs	r3, #0
}
 8006430:	4618      	mov	r0, r3
 8006432:	3710      	adds	r7, #16
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8006438:	b480      	push	{r7}
 800643a:	b085      	sub	sp, #20
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006444:	095b      	lsrs	r3, r3, #5
 8006446:	3301      	adds	r3, #1
 8006448:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	3301      	adds	r3, #1
 8006450:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	3307      	adds	r3, #7
 8006456:	08db      	lsrs	r3, r3, #3
 8006458:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	68fa      	ldr	r2, [r7, #12]
 800645e:	fb02 f303 	mul.w	r3, r2, r3
}
 8006462:	4618      	mov	r0, r3
 8006464:	3714      	adds	r7, #20
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr

0800646e <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800646e:	b480      	push	{r7}
 8006470:	b083      	sub	sp, #12
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
 8006476:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800647e:	b2db      	uxtb	r3, r3
 8006480:	2b01      	cmp	r3, #1
 8006482:	d12e      	bne.n	80064e2 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800648a:	2b01      	cmp	r3, #1
 800648c:	d101      	bne.n	8006492 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800648e:	2302      	movs	r3, #2
 8006490:	e028      	b.n	80064e4 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2201      	movs	r2, #1
 8006496:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2202      	movs	r2, #2
 800649e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f022 0201 	bic.w	r2, r2, #1
 80064b0:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80064be:	ea42 0103 	orr.w	r1, r2, r3
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	689a      	ldr	r2, [r3, #8]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	430a      	orrs	r2, r1
 80064cc:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2201      	movs	r2, #1
 80064d2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80064de:	2300      	movs	r3, #0
 80064e0:	e000      	b.n	80064e4 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
  }
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	370c      	adds	r7, #12
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <BoardInitPeriph>:
//{
//    SystemWakeupTimeCalibrated = true;
//}

void BoardInitPeriph( void )
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b082      	sub	sp, #8
 80064f4:	af02      	add	r7, sp, #8
    /* Init the GPIO extender pins */
#if ( USE_POTENTIOMETER == 0 )
    GpioInit( &Led1, LED_1, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
#endif
    GpioInit( &Led2, LED_2, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
 80064f6:	2301      	movs	r3, #1
 80064f8:	9301      	str	r3, [sp, #4]
 80064fa:	2300      	movs	r3, #0
 80064fc:	9300      	str	r3, [sp, #0]
 80064fe:	2300      	movs	r3, #0
 8006500:	2201      	movs	r2, #1
 8006502:	2100      	movs	r1, #0
 8006504:	4812      	ldr	r0, [pc, #72]	@ (8006550 <BoardInitPeriph+0x60>)
 8006506:	f000 fb5f 	bl	8006bc8 <GpioInit>
    GpioInit( &Led3, LED_3, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
 800650a:	2301      	movs	r3, #1
 800650c:	9301      	str	r3, [sp, #4]
 800650e:	2300      	movs	r3, #0
 8006510:	9300      	str	r3, [sp, #0]
 8006512:	2300      	movs	r3, #0
 8006514:	2201      	movs	r2, #1
 8006516:	2101      	movs	r1, #1
 8006518:	480e      	ldr	r0, [pc, #56]	@ (8006554 <BoardInitPeriph+0x64>)
 800651a:	f000 fb55 	bl	8006bc8 <GpioInit>
    GpioInit( &Led4, LED_4, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
 800651e:	2301      	movs	r3, #1
 8006520:	9301      	str	r3, [sp, #4]
 8006522:	2300      	movs	r3, #0
 8006524:	9300      	str	r3, [sp, #0]
 8006526:	2300      	movs	r3, #0
 8006528:	2201      	movs	r2, #1
 800652a:	2108      	movs	r1, #8
 800652c:	480a      	ldr	r0, [pc, #40]	@ (8006558 <BoardInitPeriph+0x68>)
 800652e:	f000 fb4b 	bl	8006bc8 <GpioInit>

    // Switch LED 1, 2, 3, 4 OFF
#if ( USE_POTENTIOMETER == 0 )
    GpioWrite( &Led1, 0 );
#endif
    GpioWrite( &Led2, 0 );
 8006532:	2100      	movs	r1, #0
 8006534:	4806      	ldr	r0, [pc, #24]	@ (8006550 <BoardInitPeriph+0x60>)
 8006536:	f000 fb86 	bl	8006c46 <GpioWrite>
    GpioWrite( &Led3, 0 );
 800653a:	2100      	movs	r1, #0
 800653c:	4805      	ldr	r0, [pc, #20]	@ (8006554 <BoardInitPeriph+0x64>)
 800653e:	f000 fb82 	bl	8006c46 <GpioWrite>
    GpioWrite( &Led4, 0 );
 8006542:	2100      	movs	r1, #0
 8006544:	4804      	ldr	r0, [pc, #16]	@ (8006558 <BoardInitPeriph+0x68>)
 8006546:	f000 fb7e 	bl	8006c46 <GpioWrite>
}
 800654a:	bf00      	nop
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}
 8006550:	20000234 	.word	0x20000234
 8006554:	20000240 	.word	0x20000240
 8006558:	2000024c 	.word	0x2000024c

0800655c <BoardInitMcu>:

void BoardInitMcu( void )
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b082      	sub	sp, #8
 8006560:	af02      	add	r7, sp, #8
    if( McuInitialized == false )
 8006562:	4b10      	ldr	r3, [pc, #64]	@ (80065a4 <BoardInitMcu+0x48>)
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	f083 0301 	eor.w	r3, r3, #1
 800656a:	b2db      	uxtb	r3, r3
 800656c:	2b00      	cmp	r3, #0
 800656e:	d001      	beq.n	8006574 <BoardInitMcu+0x18>
#endif
//        HAL_Init( );

//        SystemClockConfig( );

        RtcInit( );
 8006570:	f000 fb7e 	bl	8006c70 <RtcInit>
//        SystemClockReConfig( );
    }

//    AdcInit( &Adc, POTI );

    SpiInit( &SX1276.Spi, RADIO_MOSI, RADIO_MISO, RADIO_SCLK, NC );
 8006574:	f04f 33ff 	mov.w	r3, #4294967295
 8006578:	9300      	str	r3, [sp, #0]
 800657a:	2305      	movs	r3, #5
 800657c:	2206      	movs	r2, #6
 800657e:	2107      	movs	r1, #7
 8006580:	4809      	ldr	r0, [pc, #36]	@ (80065a8 <BoardInitMcu+0x4c>)
 8006582:	f001 f845 	bl	8007610 <SpiInit>
    SX1276IoInit( );
 8006586:	f001 f935 	bl	80077f4 <SX1276IoInit>

    if( McuInitialized == false )
 800658a:	4b06      	ldr	r3, [pc, #24]	@ (80065a4 <BoardInitMcu+0x48>)
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	f083 0301 	eor.w	r3, r3, #1
 8006592:	b2db      	uxtb	r3, r3
 8006594:	2b00      	cmp	r3, #0
 8006596:	d002      	beq.n	800659e <BoardInitMcu+0x42>
    {
        McuInitialized = true;
 8006598:	4b02      	ldr	r3, [pc, #8]	@ (80065a4 <BoardInitMcu+0x48>)
 800659a:	2201      	movs	r2, #1
 800659c:	701a      	strb	r2, [r3, #0]
//        if( GetBoardPowerSource( ) == BATTERY_POWER )
//        {
//            CalibrateSystemWakeupTime( );
//        }
    }
}
 800659e:	bf00      	nop
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	20000258 	.word	0x20000258
 80065a8:	20000478 	.word	0x20000478

080065ac <DelayMs>:
{
    DelayMs( s * 1000.0f );
}

void DelayMs( uint32_t ms )
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
    HAL_Delay( ms );
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f7fb fb4b 	bl	8001c50 <HAL_Delay>
}
 80065ba:	bf00      	nop
 80065bc:	3708      	adds	r7, #8
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
	...

080065c4 <GpioMcuInit>:
#include "gpio-board.h"

static GpioIrqHandler *GpioIrq[16];

void GpioMcuInit( Gpio_t *obj, PinNames pin, PinModes mode, PinConfigs config, PinTypes type, uint32_t value )
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b08c      	sub	sp, #48	@ 0x30
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	4608      	mov	r0, r1
 80065ce:	4611      	mov	r1, r2
 80065d0:	461a      	mov	r2, r3
 80065d2:	4603      	mov	r3, r0
 80065d4:	70fb      	strb	r3, [r7, #3]
 80065d6:	460b      	mov	r3, r1
 80065d8:	70bb      	strb	r3, [r7, #2]
 80065da:	4613      	mov	r3, r2
 80065dc:	707b      	strb	r3, [r7, #1]
    GPIO_InitTypeDef GPIO_InitStructure;

    if( pin == NC )
 80065de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80065e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065e6:	f000 80c3 	beq.w	8006770 <GpioMcuInit+0x1ac>
    {
        return;
    }
    obj->pin = pin;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	78fa      	ldrb	r2, [r7, #3]
 80065ee:	701a      	strb	r2, [r3, #0]
    obj->pinIndex = ( 0x01 << ( obj->pin & 0x0F ) );
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f993 3000 	ldrsb.w	r3, [r3]
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	f003 030f 	and.w	r3, r3, #15
 80065fc:	2201      	movs	r2, #1
 80065fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006602:	b29a      	uxth	r2, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	805a      	strh	r2, [r3, #2]

    if( ( obj->pin & 0xF0 ) == 0x00 )
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f993 3000 	ldrsb.w	r3, [r3]
 800660e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d112      	bne.n	800663c <GpioMcuInit+0x78>
    {
        obj->port = GPIOA;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4a57      	ldr	r2, [pc, #348]	@ (8006778 <GpioMcuInit+0x1b4>)
 800661a:	605a      	str	r2, [r3, #4]
        __HAL_RCC_GPIOA_CLK_ENABLE( );
 800661c:	4b57      	ldr	r3, [pc, #348]	@ (800677c <GpioMcuInit+0x1b8>)
 800661e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006622:	4a56      	ldr	r2, [pc, #344]	@ (800677c <GpioMcuInit+0x1b8>)
 8006624:	f043 0301 	orr.w	r3, r3, #1
 8006628:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800662c:	4b53      	ldr	r3, [pc, #332]	@ (800677c <GpioMcuInit+0x1b8>)
 800662e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006632:	f003 0301 	and.w	r3, r3, #1
 8006636:	61bb      	str	r3, [r7, #24]
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	e05f      	b.n	80066fc <GpioMcuInit+0x138>
    }
    else if( ( obj->pin & 0xF0 ) == 0x10 )
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f993 3000 	ldrsb.w	r3, [r3]
 8006642:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006646:	2b10      	cmp	r3, #16
 8006648:	d112      	bne.n	8006670 <GpioMcuInit+0xac>
    {
        obj->port = GPIOB;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4a4c      	ldr	r2, [pc, #304]	@ (8006780 <GpioMcuInit+0x1bc>)
 800664e:	605a      	str	r2, [r3, #4]
        __HAL_RCC_GPIOB_CLK_ENABLE( );
 8006650:	4b4a      	ldr	r3, [pc, #296]	@ (800677c <GpioMcuInit+0x1b8>)
 8006652:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006656:	4a49      	ldr	r2, [pc, #292]	@ (800677c <GpioMcuInit+0x1b8>)
 8006658:	f043 0302 	orr.w	r3, r3, #2
 800665c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8006660:	4b46      	ldr	r3, [pc, #280]	@ (800677c <GpioMcuInit+0x1b8>)
 8006662:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006666:	f003 0302 	and.w	r3, r3, #2
 800666a:	617b      	str	r3, [r7, #20]
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	e045      	b.n	80066fc <GpioMcuInit+0x138>
    }
    else if( ( obj->pin & 0xF0 ) == 0x20 )
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f993 3000 	ldrsb.w	r3, [r3]
 8006676:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800667a:	2b20      	cmp	r3, #32
 800667c:	d112      	bne.n	80066a4 <GpioMcuInit+0xe0>
    {
        obj->port = GPIOC;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a40      	ldr	r2, [pc, #256]	@ (8006784 <GpioMcuInit+0x1c0>)
 8006682:	605a      	str	r2, [r3, #4]
        __HAL_RCC_GPIOC_CLK_ENABLE( );
 8006684:	4b3d      	ldr	r3, [pc, #244]	@ (800677c <GpioMcuInit+0x1b8>)
 8006686:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800668a:	4a3c      	ldr	r2, [pc, #240]	@ (800677c <GpioMcuInit+0x1b8>)
 800668c:	f043 0304 	orr.w	r3, r3, #4
 8006690:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8006694:	4b39      	ldr	r3, [pc, #228]	@ (800677c <GpioMcuInit+0x1b8>)
 8006696:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800669a:	f003 0304 	and.w	r3, r3, #4
 800669e:	613b      	str	r3, [r7, #16]
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	e02b      	b.n	80066fc <GpioMcuInit+0x138>
    }
    else if( ( obj->pin & 0xF0 ) == 0x30 )
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f993 3000 	ldrsb.w	r3, [r3]
 80066aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80066ae:	2b30      	cmp	r3, #48	@ 0x30
 80066b0:	d112      	bne.n	80066d8 <GpioMcuInit+0x114>
    {
        obj->port = GPIOD;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a34      	ldr	r2, [pc, #208]	@ (8006788 <GpioMcuInit+0x1c4>)
 80066b6:	605a      	str	r2, [r3, #4]
        __HAL_RCC_GPIOD_CLK_ENABLE( );
 80066b8:	4b30      	ldr	r3, [pc, #192]	@ (800677c <GpioMcuInit+0x1b8>)
 80066ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80066be:	4a2f      	ldr	r2, [pc, #188]	@ (800677c <GpioMcuInit+0x1b8>)
 80066c0:	f043 0308 	orr.w	r3, r3, #8
 80066c4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80066c8:	4b2c      	ldr	r3, [pc, #176]	@ (800677c <GpioMcuInit+0x1b8>)
 80066ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80066ce:	f003 0308 	and.w	r3, r3, #8
 80066d2:	60fb      	str	r3, [r7, #12]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	e011      	b.n	80066fc <GpioMcuInit+0x138>
    }
    else
    {
        obj->port = GPIOH;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a2c      	ldr	r2, [pc, #176]	@ (800678c <GpioMcuInit+0x1c8>)
 80066dc:	605a      	str	r2, [r3, #4]
        __HAL_RCC_GPIOH_CLK_ENABLE( );
 80066de:	4b27      	ldr	r3, [pc, #156]	@ (800677c <GpioMcuInit+0x1b8>)
 80066e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80066e4:	4a25      	ldr	r2, [pc, #148]	@ (800677c <GpioMcuInit+0x1b8>)
 80066e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066ea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80066ee:	4b23      	ldr	r3, [pc, #140]	@ (800677c <GpioMcuInit+0x1b8>)
 80066f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80066f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066f8:	60bb      	str	r3, [r7, #8]
 80066fa:	68bb      	ldr	r3, [r7, #8]
    }

    GPIO_InitStructure.Pin =  obj->pinIndex ;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	885b      	ldrh	r3, [r3, #2]
 8006700:	61fb      	str	r3, [r7, #28]
    GPIO_InitStructure.Pull = type;
 8006702:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8006706:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8006708:	2302      	movs	r3, #2
 800670a:	62bb      	str	r3, [r7, #40]	@ 0x28

    if( mode == PIN_INPUT )
 800670c:	78bb      	ldrb	r3, [r7, #2]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d102      	bne.n	8006718 <GpioMcuInit+0x154>
    {
        GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8006712:	2300      	movs	r3, #0
 8006714:	623b      	str	r3, [r7, #32]
 8006716:	e01b      	b.n	8006750 <GpioMcuInit+0x18c>
    }
    else if( mode == PIN_ANALOGIC )
 8006718:	78bb      	ldrb	r3, [r7, #2]
 800671a:	2b03      	cmp	r3, #3
 800671c:	d102      	bne.n	8006724 <GpioMcuInit+0x160>
    {
        GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 800671e:	2303      	movs	r3, #3
 8006720:	623b      	str	r3, [r7, #32]
 8006722:	e015      	b.n	8006750 <GpioMcuInit+0x18c>
    }
    else if( mode == PIN_ALTERNATE_FCT )
 8006724:	78bb      	ldrb	r3, [r7, #2]
 8006726:	2b02      	cmp	r3, #2
 8006728:	d10a      	bne.n	8006740 <GpioMcuInit+0x17c>
    {
        if( config == PIN_OPEN_DRAIN )
 800672a:	787b      	ldrb	r3, [r7, #1]
 800672c:	2b01      	cmp	r3, #1
 800672e:	d102      	bne.n	8006736 <GpioMcuInit+0x172>
        {
            GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8006730:	2312      	movs	r3, #18
 8006732:	623b      	str	r3, [r7, #32]
 8006734:	e001      	b.n	800673a <GpioMcuInit+0x176>
        }
        else
        {
            GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8006736:	2302      	movs	r3, #2
 8006738:	623b      	str	r3, [r7, #32]
        }
        GPIO_InitStructure.Alternate = value;
 800673a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800673c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800673e:	e007      	b.n	8006750 <GpioMcuInit+0x18c>
    }
    else // mode ouptut
    {
        if( config == PIN_OPEN_DRAIN )
 8006740:	787b      	ldrb	r3, [r7, #1]
 8006742:	2b01      	cmp	r3, #1
 8006744:	d102      	bne.n	800674c <GpioMcuInit+0x188>
        {
            GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 8006746:	2311      	movs	r3, #17
 8006748:	623b      	str	r3, [r7, #32]
 800674a:	e001      	b.n	8006750 <GpioMcuInit+0x18c>
        }
        else
        {
            GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800674c:	2301      	movs	r3, #1
 800674e:	623b      	str	r3, [r7, #32]
        }
    }

    HAL_GPIO_Init( obj->port, &GPIO_InitStructure );
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	f107 021c 	add.w	r2, r7, #28
 8006758:	4611      	mov	r1, r2
 800675a:	4618      	mov	r0, r3
 800675c:	f7fb fef0 	bl	8002540 <HAL_GPIO_Init>

    // Sets initial output value
    if( mode == PIN_OUTPUT )
 8006760:	78bb      	ldrb	r3, [r7, #2]
 8006762:	2b01      	cmp	r3, #1
 8006764:	d105      	bne.n	8006772 <GpioMcuInit+0x1ae>
    {
        GpioMcuWrite( obj, value );
 8006766:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 f953 	bl	8006a14 <GpioMcuWrite>
 800676e:	e000      	b.n	8006772 <GpioMcuInit+0x1ae>
        return;
 8006770:	bf00      	nop
    }
}
 8006772:	3730      	adds	r7, #48	@ 0x30
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	42020000 	.word	0x42020000
 800677c:	46020c00 	.word	0x46020c00
 8006780:	42020400 	.word	0x42020400
 8006784:	42020800 	.word	0x42020800
 8006788:	42020c00 	.word	0x42020c00
 800678c:	42021c00 	.word	0x42021c00

08006790 <GpioMcuSetInterrupt>:

void GpioMcuSetInterrupt( Gpio_t *obj, IrqModes irqMode, IrqPriorities irqPriority, GpioIrqHandler *irqHandler )
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b08c      	sub	sp, #48	@ 0x30
 8006794:	af00      	add	r7, sp, #0
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	607b      	str	r3, [r7, #4]
 800679a:	460b      	mov	r3, r1
 800679c:	72fb      	strb	r3, [r7, #11]
 800679e:	4613      	mov	r3, r2
 80067a0:	72bb      	strb	r3, [r7, #10]
    uint32_t priority = 0;
 80067a2:	2300      	movs	r3, #0
 80067a4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    IRQn_Type IRQnb = EXTI0_IRQn;
 80067a6:	230b      	movs	r3, #11
 80067a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    GPIO_InitTypeDef   GPIO_InitStructure;

    if( irqHandler == NULL )
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	f000 8123 	beq.w	80069fa <GpioMcuSetInterrupt+0x26a>
    {
        return;
    }

    GPIO_InitStructure.Pin =  obj->pinIndex;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	885b      	ldrh	r3, [r3, #2]
 80067b8:	617b      	str	r3, [r7, #20]

    if( irqMode == IRQ_RISING_EDGE )
 80067ba:	7afb      	ldrb	r3, [r7, #11]
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d102      	bne.n	80067c6 <GpioMcuSetInterrupt+0x36>
    {
        GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 80067c0:	4b90      	ldr	r3, [pc, #576]	@ (8006a04 <GpioMcuSetInterrupt+0x274>)
 80067c2:	61bb      	str	r3, [r7, #24]
 80067c4:	e007      	b.n	80067d6 <GpioMcuSetInterrupt+0x46>
    }
    else if( irqMode == IRQ_FALLING_EDGE )
 80067c6:	7afb      	ldrb	r3, [r7, #11]
 80067c8:	2b02      	cmp	r3, #2
 80067ca:	d102      	bne.n	80067d2 <GpioMcuSetInterrupt+0x42>
    {
        GPIO_InitStructure.Mode = GPIO_MODE_IT_FALLING;
 80067cc:	4b8e      	ldr	r3, [pc, #568]	@ (8006a08 <GpioMcuSetInterrupt+0x278>)
 80067ce:	61bb      	str	r3, [r7, #24]
 80067d0:	e001      	b.n	80067d6 <GpioMcuSetInterrupt+0x46>
    }
    else
    {
        GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING_FALLING;
 80067d2:	4b8e      	ldr	r3, [pc, #568]	@ (8006a0c <GpioMcuSetInterrupt+0x27c>)
 80067d4:	61bb      	str	r3, [r7, #24]
    }

    GPIO_InitStructure.Pull = GPIO_NOPULL;
 80067d6:	2300      	movs	r3, #0
 80067d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80067da:	2302      	movs	r3, #2
 80067dc:	623b      	str	r3, [r7, #32]

    HAL_GPIO_Init( obj->port, &GPIO_InitStructure );
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	f107 0214 	add.w	r2, r7, #20
 80067e6:	4611      	mov	r1, r2
 80067e8:	4618      	mov	r0, r3
 80067ea:	f7fb fea9 	bl	8002540 <HAL_GPIO_Init>

    switch( irqPriority )
 80067ee:	7abb      	ldrb	r3, [r7, #10]
 80067f0:	2b03      	cmp	r3, #3
 80067f2:	d00f      	beq.n	8006814 <GpioMcuSetInterrupt+0x84>
 80067f4:	2b03      	cmp	r3, #3
 80067f6:	dc10      	bgt.n	800681a <GpioMcuSetInterrupt+0x8a>
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	dc02      	bgt.n	8006802 <GpioMcuSetInterrupt+0x72>
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	da03      	bge.n	8006808 <GpioMcuSetInterrupt+0x78>
 8006800:	e00b      	b.n	800681a <GpioMcuSetInterrupt+0x8a>
 8006802:	2b02      	cmp	r3, #2
 8006804:	d003      	beq.n	800680e <GpioMcuSetInterrupt+0x7e>
 8006806:	e008      	b.n	800681a <GpioMcuSetInterrupt+0x8a>
    {
    case IRQ_VERY_LOW_PRIORITY:
    case IRQ_LOW_PRIORITY:
        priority = 3;
 8006808:	2303      	movs	r3, #3
 800680a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800680c:	e008      	b.n	8006820 <GpioMcuSetInterrupt+0x90>
    case IRQ_MEDIUM_PRIORITY:
        priority = 2;
 800680e:	2302      	movs	r3, #2
 8006810:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006812:	e005      	b.n	8006820 <GpioMcuSetInterrupt+0x90>
    case IRQ_HIGH_PRIORITY:
        priority = 1;
 8006814:	2301      	movs	r3, #1
 8006816:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006818:	e002      	b.n	8006820 <GpioMcuSetInterrupt+0x90>
    case IRQ_VERY_HIGH_PRIORITY:
    default:
        priority = 0;
 800681a:	2300      	movs	r3, #0
 800681c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800681e:	bf00      	nop
    }

    switch( obj->pinIndex )		// PK: definicja EXTI rozszerzona do pełnych 16 przerwań
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	885b      	ldrh	r3, [r3, #2]
 8006824:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006828:	f000 80cb 	beq.w	80069c2 <GpioMcuSetInterrupt+0x232>
 800682c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006830:	f300 80cb 	bgt.w	80069ca <GpioMcuSetInterrupt+0x23a>
 8006834:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006838:	f000 80bf 	beq.w	80069ba <GpioMcuSetInterrupt+0x22a>
 800683c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006840:	f300 80c3 	bgt.w	80069ca <GpioMcuSetInterrupt+0x23a>
 8006844:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006848:	f000 80b3 	beq.w	80069b2 <GpioMcuSetInterrupt+0x222>
 800684c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006850:	f300 80bb 	bgt.w	80069ca <GpioMcuSetInterrupt+0x23a>
 8006854:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006858:	f000 80a7 	beq.w	80069aa <GpioMcuSetInterrupt+0x21a>
 800685c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006860:	f300 80b3 	bgt.w	80069ca <GpioMcuSetInterrupt+0x23a>
 8006864:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006868:	f000 809b 	beq.w	80069a2 <GpioMcuSetInterrupt+0x212>
 800686c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006870:	f300 80ab 	bgt.w	80069ca <GpioMcuSetInterrupt+0x23a>
 8006874:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006878:	f000 808f 	beq.w	800699a <GpioMcuSetInterrupt+0x20a>
 800687c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006880:	f300 80a3 	bgt.w	80069ca <GpioMcuSetInterrupt+0x23a>
 8006884:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006888:	f000 8083 	beq.w	8006992 <GpioMcuSetInterrupt+0x202>
 800688c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006890:	f300 809b 	bgt.w	80069ca <GpioMcuSetInterrupt+0x23a>
 8006894:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006898:	d077      	beq.n	800698a <GpioMcuSetInterrupt+0x1fa>
 800689a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800689e:	f300 8094 	bgt.w	80069ca <GpioMcuSetInterrupt+0x23a>
 80068a2:	2b80      	cmp	r3, #128	@ 0x80
 80068a4:	d06d      	beq.n	8006982 <GpioMcuSetInterrupt+0x1f2>
 80068a6:	2b80      	cmp	r3, #128	@ 0x80
 80068a8:	f300 808f 	bgt.w	80069ca <GpioMcuSetInterrupt+0x23a>
 80068ac:	2b20      	cmp	r3, #32
 80068ae:	dc49      	bgt.n	8006944 <GpioMcuSetInterrupt+0x1b4>
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	f340 808a 	ble.w	80069ca <GpioMcuSetInterrupt+0x23a>
 80068b6:	3b01      	subs	r3, #1
 80068b8:	2b1f      	cmp	r3, #31
 80068ba:	f200 8086 	bhi.w	80069ca <GpioMcuSetInterrupt+0x23a>
 80068be:	a201      	add	r2, pc, #4	@ (adr r2, 80068c4 <GpioMcuSetInterrupt+0x134>)
 80068c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c4:	0800694b 	.word	0x0800694b
 80068c8:	08006953 	.word	0x08006953
 80068cc:	080069cb 	.word	0x080069cb
 80068d0:	0800695b 	.word	0x0800695b
 80068d4:	080069cb 	.word	0x080069cb
 80068d8:	080069cb 	.word	0x080069cb
 80068dc:	080069cb 	.word	0x080069cb
 80068e0:	08006963 	.word	0x08006963
 80068e4:	080069cb 	.word	0x080069cb
 80068e8:	080069cb 	.word	0x080069cb
 80068ec:	080069cb 	.word	0x080069cb
 80068f0:	080069cb 	.word	0x080069cb
 80068f4:	080069cb 	.word	0x080069cb
 80068f8:	080069cb 	.word	0x080069cb
 80068fc:	080069cb 	.word	0x080069cb
 8006900:	0800696b 	.word	0x0800696b
 8006904:	080069cb 	.word	0x080069cb
 8006908:	080069cb 	.word	0x080069cb
 800690c:	080069cb 	.word	0x080069cb
 8006910:	080069cb 	.word	0x080069cb
 8006914:	080069cb 	.word	0x080069cb
 8006918:	080069cb 	.word	0x080069cb
 800691c:	080069cb 	.word	0x080069cb
 8006920:	080069cb 	.word	0x080069cb
 8006924:	080069cb 	.word	0x080069cb
 8006928:	080069cb 	.word	0x080069cb
 800692c:	080069cb 	.word	0x080069cb
 8006930:	080069cb 	.word	0x080069cb
 8006934:	080069cb 	.word	0x080069cb
 8006938:	080069cb 	.word	0x080069cb
 800693c:	080069cb 	.word	0x080069cb
 8006940:	08006973 	.word	0x08006973
 8006944:	2b40      	cmp	r3, #64	@ 0x40
 8006946:	d018      	beq.n	800697a <GpioMcuSetInterrupt+0x1ea>
        break;
    case GPIO_PIN_15:
        IRQnb = EXTI15_IRQn;
        break;
    default:
        break;
 8006948:	e03f      	b.n	80069ca <GpioMcuSetInterrupt+0x23a>
        IRQnb = EXTI0_IRQn;
 800694a:	230b      	movs	r3, #11
 800694c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 8006950:	e03c      	b.n	80069cc <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI1_IRQn;
 8006952:	230c      	movs	r3, #12
 8006954:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 8006958:	e038      	b.n	80069cc <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI2_IRQn;
 800695a:	230d      	movs	r3, #13
 800695c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 8006960:	e034      	b.n	80069cc <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI3_IRQn;
 8006962:	230e      	movs	r3, #14
 8006964:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 8006968:	e030      	b.n	80069cc <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI4_IRQn;
 800696a:	230f      	movs	r3, #15
 800696c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 8006970:	e02c      	b.n	80069cc <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI5_IRQn;
 8006972:	2310      	movs	r3, #16
 8006974:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 8006978:	e028      	b.n	80069cc <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI6_IRQn;
 800697a:	2311      	movs	r3, #17
 800697c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 8006980:	e024      	b.n	80069cc <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI7_IRQn;
 8006982:	2312      	movs	r3, #18
 8006984:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 8006988:	e020      	b.n	80069cc <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI8_IRQn;
 800698a:	2313      	movs	r3, #19
 800698c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 8006990:	e01c      	b.n	80069cc <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI9_IRQn;
 8006992:	2314      	movs	r3, #20
 8006994:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 8006998:	e018      	b.n	80069cc <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI10_IRQn;
 800699a:	2315      	movs	r3, #21
 800699c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 80069a0:	e014      	b.n	80069cc <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI11_IRQn;
 80069a2:	2316      	movs	r3, #22
 80069a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 80069a8:	e010      	b.n	80069cc <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI12_IRQn;
 80069aa:	2317      	movs	r3, #23
 80069ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 80069b0:	e00c      	b.n	80069cc <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI13_IRQn;
 80069b2:	2318      	movs	r3, #24
 80069b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 80069b8:	e008      	b.n	80069cc <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI14_IRQn;
 80069ba:	2319      	movs	r3, #25
 80069bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 80069c0:	e004      	b.n	80069cc <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI15_IRQn;
 80069c2:	231a      	movs	r3, #26
 80069c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 80069c8:	e000      	b.n	80069cc <GpioMcuSetInterrupt+0x23c>
        break;
 80069ca:	bf00      	nop
    }
    //watch

    GpioIrq[(obj->pin ) & 0x0F] = irqHandler;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f993 3000 	ldrsb.w	r3, [r3]
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	f003 030f 	and.w	r3, r3, #15
 80069d8:	490d      	ldr	r1, [pc, #52]	@ (8006a10 <GpioMcuSetInterrupt+0x280>)
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    HAL_NVIC_SetPriority( IRQnb , priority, 0 );
 80069e0:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80069e4:	2200      	movs	r2, #0
 80069e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069e8:	4618      	mov	r0, r3
 80069ea:	f7fb fa0d 	bl	8001e08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ( IRQnb );
 80069ee:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80069f2:	4618      	mov	r0, r3
 80069f4:	f7fb fa22 	bl	8001e3c <HAL_NVIC_EnableIRQ>
 80069f8:	e000      	b.n	80069fc <GpioMcuSetInterrupt+0x26c>
        return;
 80069fa:	bf00      	nop
}
 80069fc:	3730      	adds	r7, #48	@ 0x30
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	bf00      	nop
 8006a04:	10110000 	.word	0x10110000
 8006a08:	10210000 	.word	0x10210000
 8006a0c:	10310000 	.word	0x10310000
 8006a10:	2000025c 	.word	0x2000025c

08006a14 <GpioMcuWrite>:
    GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init( obj->port, &GPIO_InitStructure );
}

void GpioMcuWrite( Gpio_t *obj, uint32_t value )
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b082      	sub	sp, #8
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
    if( ( obj == NULL ) || ( obj->port == NULL ) )
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2b00      	cmp	r3, #0
    {
        assert_param( FAIL );
    }
    // Check if pin is not connected
    if( obj->pin == NC )
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f993 3000 	ldrsb.w	r3, [r3]
 8006a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a2c:	d009      	beq.n	8006a42 <GpioMcuWrite+0x2e>
    {
        return;
    }
    HAL_GPIO_WritePin( obj->port, obj->pinIndex , ( GPIO_PinState )value );
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6858      	ldr	r0, [r3, #4]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	885b      	ldrh	r3, [r3, #2]
 8006a36:	683a      	ldr	r2, [r7, #0]
 8006a38:	b2d2      	uxtb	r2, r2
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	f7fb ff70 	bl	8002920 <HAL_GPIO_WritePin>
 8006a40:	e000      	b.n	8006a44 <GpioMcuWrite+0x30>
        return;
 8006a42:	bf00      	nop
}
 8006a44:	3708      	adds	r7, #8
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}

08006a4a <EXTI0_IRQHandler>:
    }
    return HAL_GPIO_ReadPin( obj->port, obj->pinIndex );
}

void EXTI0_IRQHandler( void )
{
 8006a4a:	b580      	push	{r7, lr}
 8006a4c:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 8006a4e:	f000 f9ed 	bl	8006e2c <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_0 );
 8006a52:	2001      	movs	r0, #1
 8006a54:	f7fb ff7c 	bl	8002950 <HAL_GPIO_EXTI_IRQHandler>
}
 8006a58:	bf00      	nop
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler( void )
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 8006a60:	f000 f9e4 	bl	8006e2c <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_1 );
 8006a64:	2002      	movs	r0, #2
 8006a66:	f7fb ff73 	bl	8002950 <HAL_GPIO_EXTI_IRQHandler>
}
 8006a6a:	bf00      	nop
 8006a6c:	bd80      	pop	{r7, pc}

08006a6e <EXTI2_IRQHandler>:

void EXTI2_IRQHandler( void )
{
 8006a6e:	b580      	push	{r7, lr}
 8006a70:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 8006a72:	f000 f9db 	bl	8006e2c <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_2 );
 8006a76:	2004      	movs	r0, #4
 8006a78:	f7fb ff6a 	bl	8002950 <HAL_GPIO_EXTI_IRQHandler>
}
 8006a7c:	bf00      	nop
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler( void )
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 8006a84:	f000 f9d2 	bl	8006e2c <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_3 );
 8006a88:	2008      	movs	r0, #8
 8006a8a:	f7fb ff61 	bl	8002950 <HAL_GPIO_EXTI_IRQHandler>
}
 8006a8e:	bf00      	nop
 8006a90:	bd80      	pop	{r7, pc}

08006a92 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler( void )
{
 8006a92:	b580      	push	{r7, lr}
 8006a94:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 8006a96:	f000 f9c9 	bl	8006e2c <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_4 );
 8006a9a:	2010      	movs	r0, #16
 8006a9c:	f7fb ff58 	bl	8002950 <HAL_GPIO_EXTI_IRQHandler>
}
 8006aa0:	bf00      	nop
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <EXTI5_IRQHandler>:

void EXTI5_IRQHandler( void )
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 8006aa8:	f000 f9c0 	bl	8006e2c <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_5 );
 8006aac:	2020      	movs	r0, #32
 8006aae:	f7fb ff4f 	bl	8002950 <HAL_GPIO_EXTI_IRQHandler>
}
 8006ab2:	bf00      	nop
 8006ab4:	bd80      	pop	{r7, pc}

08006ab6 <EXTI6_IRQHandler>:

void EXTI6_IRQHandler( void )
{
 8006ab6:	b580      	push	{r7, lr}
 8006ab8:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 8006aba:	f000 f9b7 	bl	8006e2c <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_6 );
 8006abe:	2040      	movs	r0, #64	@ 0x40
 8006ac0:	f7fb ff46 	bl	8002950 <HAL_GPIO_EXTI_IRQHandler>
}
 8006ac4:	bf00      	nop
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <EXTI7_IRQHandler>:

void EXTI7_IRQHandler( void )
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 8006acc:	f000 f9ae 	bl	8006e2c <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_7 );
 8006ad0:	2080      	movs	r0, #128	@ 0x80
 8006ad2:	f7fb ff3d 	bl	8002950 <HAL_GPIO_EXTI_IRQHandler>
}
 8006ad6:	bf00      	nop
 8006ad8:	bd80      	pop	{r7, pc}

08006ada <EXTI8_IRQHandler>:

void EXTI8_IRQHandler( void )
{
 8006ada:	b580      	push	{r7, lr}
 8006adc:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 8006ade:	f000 f9a5 	bl	8006e2c <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_8 );
 8006ae2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8006ae6:	f7fb ff33 	bl	8002950 <HAL_GPIO_EXTI_IRQHandler>
}
 8006aea:	bf00      	nop
 8006aec:	bd80      	pop	{r7, pc}

08006aee <EXTI9_IRQHandler>:

void EXTI9_IRQHandler( void )
{
 8006aee:	b580      	push	{r7, lr}
 8006af0:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 8006af2:	f000 f99b 	bl	8006e2c <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_9 );
 8006af6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8006afa:	f7fb ff29 	bl	8002950 <HAL_GPIO_EXTI_IRQHandler>
}
 8006afe:	bf00      	nop
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <EXTI10_IRQHandler>:

void EXTI10_IRQHandler( void )
{
 8006b02:	b580      	push	{r7, lr}
 8006b04:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 8006b06:	f000 f991 	bl	8006e2c <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_10 );
 8006b0a:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8006b0e:	f7fb ff1f 	bl	8002950 <HAL_GPIO_EXTI_IRQHandler>
}
 8006b12:	bf00      	nop
 8006b14:	bd80      	pop	{r7, pc}

08006b16 <EXTI11_IRQHandler>:

void EXTI11_IRQHandler( void )
{
 8006b16:	b580      	push	{r7, lr}
 8006b18:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 8006b1a:	f000 f987 	bl	8006e2c <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_11 );
 8006b1e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8006b22:	f7fb ff15 	bl	8002950 <HAL_GPIO_EXTI_IRQHandler>
}
 8006b26:	bf00      	nop
 8006b28:	bd80      	pop	{r7, pc}

08006b2a <EXTI12_IRQHandler>:

void EXTI12_IRQHandler( void )
{
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 8006b2e:	f000 f97d 	bl	8006e2c <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_12 );
 8006b32:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8006b36:	f7fb ff0b 	bl	8002950 <HAL_GPIO_EXTI_IRQHandler>
}
 8006b3a:	bf00      	nop
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <EXTI13_IRQHandler>:

void EXTI13_IRQHandler( void )
{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 8006b42:	f000 f973 	bl	8006e2c <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_13 );
 8006b46:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8006b4a:	f7fb ff01 	bl	8002950 <HAL_GPIO_EXTI_IRQHandler>
}
 8006b4e:	bf00      	nop
 8006b50:	bd80      	pop	{r7, pc}

08006b52 <EXTI14_IRQHandler>:

void EXTI14_IRQHandler( void )
{
 8006b52:	b580      	push	{r7, lr}
 8006b54:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 8006b56:	f000 f969 	bl	8006e2c <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_14 );
 8006b5a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8006b5e:	f7fb fef7 	bl	8002950 <HAL_GPIO_EXTI_IRQHandler>
}
 8006b62:	bf00      	nop
 8006b64:	bd80      	pop	{r7, pc}

08006b66 <EXTI15_IRQHandler>:

void EXTI15_IRQHandler( void )
{
 8006b66:	b580      	push	{r7, lr}
 8006b68:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 8006b6a:	f000 f95f 	bl	8006e2c <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_15 );
 8006b6e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8006b72:	f7fb feed 	bl	8002950 <HAL_GPIO_EXTI_IRQHandler>
}
 8006b76:	bf00      	nop
 8006b78:	bd80      	pop	{r7, pc}
	...

08006b7c <HAL_GPIO_EXTI_Rising_Callback>:
}
*/

//void HAL_GPIO_EXTI_Callback( uint16_t gpioPin )       // PK: dla L476
void HAL_GPIO_EXTI_Rising_Callback( uint16_t gpioPin )  // PK: dla U545
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	4603      	mov	r3, r0
 8006b84:	80fb      	strh	r3, [r7, #6]
    uint8_t callbackIndex = 0;
 8006b86:	2300      	movs	r3, #0
 8006b88:	73fb      	strb	r3, [r7, #15]

    if( gpioPin > 0 )
 8006b8a:	88fb      	ldrh	r3, [r7, #6]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d009      	beq.n	8006ba4 <HAL_GPIO_EXTI_Rising_Callback+0x28>
    {
        while( gpioPin != 0x01 )
 8006b90:	e005      	b.n	8006b9e <HAL_GPIO_EXTI_Rising_Callback+0x22>
        {
            gpioPin = gpioPin >> 1;
 8006b92:	88fb      	ldrh	r3, [r7, #6]
 8006b94:	085b      	lsrs	r3, r3, #1
 8006b96:	80fb      	strh	r3, [r7, #6]
            callbackIndex++;
 8006b98:	7bfb      	ldrb	r3, [r7, #15]
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	73fb      	strb	r3, [r7, #15]
        while( gpioPin != 0x01 )
 8006b9e:	88fb      	ldrh	r3, [r7, #6]
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d1f6      	bne.n	8006b92 <HAL_GPIO_EXTI_Rising_Callback+0x16>
        }
    }

    if( GpioIrq[callbackIndex] != NULL )
 8006ba4:	7bfb      	ldrb	r3, [r7, #15]
 8006ba6:	4a07      	ldr	r2, [pc, #28]	@ (8006bc4 <HAL_GPIO_EXTI_Rising_Callback+0x48>)
 8006ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d004      	beq.n	8006bba <HAL_GPIO_EXTI_Rising_Callback+0x3e>
    {
        GpioIrq[callbackIndex]( );
 8006bb0:	7bfb      	ldrb	r3, [r7, #15]
 8006bb2:	4a04      	ldr	r2, [pc, #16]	@ (8006bc4 <HAL_GPIO_EXTI_Rising_Callback+0x48>)
 8006bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bb8:	4798      	blx	r3
    }
}
 8006bba:	bf00      	nop
 8006bbc:	3710      	adds	r7, #16
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
 8006bc2:	bf00      	nop
 8006bc4:	2000025c 	.word	0x2000025c

08006bc8 <GpioInit>:
#if defined( BOARD_IOE_EXT )
#include "gpio-ioe.h"
#endif

void GpioInit( Gpio_t *obj, PinNames pin, PinModes mode,  PinConfigs config, PinTypes type, uint32_t value )
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af02      	add	r7, sp, #8
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	4608      	mov	r0, r1
 8006bd2:	4611      	mov	r1, r2
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	70fb      	strb	r3, [r7, #3]
 8006bda:	460b      	mov	r3, r1
 8006bdc:	70bb      	strb	r3, [r7, #2]
 8006bde:	4613      	mov	r3, r2
 8006be0:	707b      	strb	r3, [r7, #1]
    if( ( uint32_t )( pin >> 4 ) <= 6 )
 8006be2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006be6:	111b      	asrs	r3, r3, #4
 8006be8:	b25b      	sxtb	r3, r3
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	2b06      	cmp	r3, #6
 8006bee:	d80b      	bhi.n	8006c08 <GpioInit+0x40>
    {
        GpioMcuInit( obj, pin, mode, config, type, value );
 8006bf0:	7878      	ldrb	r0, [r7, #1]
 8006bf2:	78ba      	ldrb	r2, [r7, #2]
 8006bf4:	f997 1003 	ldrsb.w	r1, [r7, #3]
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	9301      	str	r3, [sp, #4]
 8006bfc:	7c3b      	ldrb	r3, [r7, #16]
 8006bfe:	9300      	str	r3, [sp, #0]
 8006c00:	4603      	mov	r3, r0
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f7ff fcde 	bl	80065c4 <GpioMcuInit>
#if defined( BOARD_IOE_EXT )
        // IOExt Pin
        GpioIoeInit( obj, pin, mode, config, type, value );
#endif
    }
}
 8006c08:	bf00      	nop
 8006c0a:	3708      	adds	r7, #8
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <GpioSetInterrupt>:

void GpioSetInterrupt( Gpio_t *obj, IrqModes irqMode, IrqPriorities irqPriority, GpioIrqHandler *irqHandler )
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	607b      	str	r3, [r7, #4]
 8006c1a:	460b      	mov	r3, r1
 8006c1c:	72fb      	strb	r3, [r7, #11]
 8006c1e:	4613      	mov	r3, r2
 8006c20:	72bb      	strb	r3, [r7, #10]
    if( ( uint32_t )( obj->pin >> 4 ) <= 6 )
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f993 3000 	ldrsb.w	r3, [r3]
 8006c28:	111b      	asrs	r3, r3, #4
 8006c2a:	b25b      	sxtb	r3, r3
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	2b06      	cmp	r3, #6
 8006c30:	d805      	bhi.n	8006c3e <GpioSetInterrupt+0x2e>
    {
        GpioMcuSetInterrupt( obj, irqMode, irqPriority, irqHandler );
 8006c32:	7aba      	ldrb	r2, [r7, #10]
 8006c34:	7af9      	ldrb	r1, [r7, #11]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	68f8      	ldr	r0, [r7, #12]
 8006c3a:	f7ff fda9 	bl	8006790 <GpioMcuSetInterrupt>
#if defined( BOARD_IOE_EXT )
        // IOExt Pin
        GpioIoeSetInterrupt( obj, irqMode, irqPriority, irqHandler );
#endif
    }
}
 8006c3e:	bf00      	nop
 8006c40:	3710      	adds	r7, #16
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}

08006c46 <GpioWrite>:
#endif
    }
}

void GpioWrite( Gpio_t *obj, uint32_t value )
{
 8006c46:	b580      	push	{r7, lr}
 8006c48:	b082      	sub	sp, #8
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
 8006c4e:	6039      	str	r1, [r7, #0]
    if( ( uint32_t )( obj->pin >> 4 ) <= 6 )
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f993 3000 	ldrsb.w	r3, [r3]
 8006c56:	111b      	asrs	r3, r3, #4
 8006c58:	b25b      	sxtb	r3, r3
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	2b06      	cmp	r3, #6
 8006c5e:	d803      	bhi.n	8006c68 <GpioWrite+0x22>
    {
        GpioMcuWrite( obj, value );
 8006c60:	6839      	ldr	r1, [r7, #0]
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f7ff fed6 	bl	8006a14 <GpioMcuWrite>
#if defined( BOARD_IOE_EXT )
        // IOExt Pin
        GpioIoeWrite( obj, value );
#endif
    }
}
 8006c68:	bf00      	nop
 8006c6a:	3708      	adds	r7, #8
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <RtcInit>:
 * \param[IN] year Calendar current year
 */
static void RtcCheckCalendarRollOver( uint8_t year );

void RtcInit( void )
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b088      	sub	sp, #32
 8006c74:	af00      	add	r7, sp, #0
    RtcCalendar_t rtcInit;

    if( RtcInitalized == false )
 8006c76:	4b2c      	ldr	r3, [pc, #176]	@ (8006d28 <RtcInit+0xb8>)
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	f083 0301 	eor.w	r3, r3, #1
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d04d      	beq.n	8006d20 <RtcInit+0xb0>
    {
        __HAL_RCC_RTC_ENABLE( );
 8006c84:	4b29      	ldr	r3, [pc, #164]	@ (8006d2c <RtcInit+0xbc>)
 8006c86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c8a:	4a28      	ldr	r2, [pc, #160]	@ (8006d2c <RtcInit+0xbc>)
 8006c8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c90:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        RtcHandle.Instance = RTC;
 8006c94:	4b26      	ldr	r3, [pc, #152]	@ (8006d30 <RtcInit+0xc0>)
 8006c96:	4a27      	ldr	r2, [pc, #156]	@ (8006d34 <RtcInit+0xc4>)
 8006c98:	601a      	str	r2, [r3, #0]
        RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 8006c9a:	4b25      	ldr	r3, [pc, #148]	@ (8006d30 <RtcInit+0xc0>)
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	605a      	str	r2, [r3, #4]

        RtcHandle.Init.AsynchPrediv = 128; // 4; //128;     // changed from 3 - PK
 8006ca0:	4b23      	ldr	r3, [pc, #140]	@ (8006d30 <RtcInit+0xc0>)
 8006ca2:	2280      	movs	r2, #128	@ 0x80
 8006ca4:	609a      	str	r2, [r3, #8]
        RtcHandle.Init.SynchPrediv = 25; //4; //256*64;      // changed from 3 - PK
 8006ca6:	4b22      	ldr	r3, [pc, #136]	@ (8006d30 <RtcInit+0xc0>)
 8006ca8:	2219      	movs	r2, #25
 8006caa:	60da      	str	r2, [r3, #12]

        RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 8006cac:	4b20      	ldr	r3, [pc, #128]	@ (8006d30 <RtcInit+0xc0>)
 8006cae:	2200      	movs	r2, #0
 8006cb0:	611a      	str	r2, [r3, #16]
        RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8006cb2:	4b1f      	ldr	r3, [pc, #124]	@ (8006d30 <RtcInit+0xc0>)
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	619a      	str	r2, [r3, #24]
        RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8006cb8:	4b1d      	ldr	r3, [pc, #116]	@ (8006d30 <RtcInit+0xc0>)
 8006cba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006cbe:	61da      	str	r2, [r3, #28]
        HAL_RTC_Init( &RtcHandle );
 8006cc0:	481b      	ldr	r0, [pc, #108]	@ (8006d30 <RtcInit+0xc0>)
 8006cc2:	f7fe f831 	bl	8004d28 <HAL_RTC_Init>

        // Set Date: Friday 1st of January 2000
        rtcInit.CalendarDate.Year = 0;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	727b      	strb	r3, [r7, #9]
        rtcInit.CalendarDate.Month = 1;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	71fb      	strb	r3, [r7, #7]
        rtcInit.CalendarDate.Date = 1;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	723b      	strb	r3, [r7, #8]
        rtcInit.CalendarDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8006cd2:	2306      	movs	r3, #6
 8006cd4:	71bb      	strb	r3, [r7, #6]
        HAL_RTC_SetDate( &RtcHandle, &rtcInit.CalendarDate, RTC_FORMAT_BIN );
 8006cd6:	1d3b      	adds	r3, r7, #4
 8006cd8:	3302      	adds	r3, #2
 8006cda:	2200      	movs	r2, #0
 8006cdc:	4619      	mov	r1, r3
 8006cde:	4814      	ldr	r0, [pc, #80]	@ (8006d30 <RtcInit+0xc0>)
 8006ce0:	f7fe f9b2 	bl	8005048 <HAL_RTC_SetDate>

        // Set Time: 00:00:00
        rtcInit.CalendarTime.Hours = 0;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	733b      	strb	r3, [r7, #12]
        rtcInit.CalendarTime.Minutes = 0;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	737b      	strb	r3, [r7, #13]
        rtcInit.CalendarTime.Seconds = 0;
 8006cec:	2300      	movs	r3, #0
 8006cee:	73bb      	strb	r3, [r7, #14]
        rtcInit.CalendarTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	73fb      	strb	r3, [r7, #15]
        rtcInit.CalendarTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	61bb      	str	r3, [r7, #24]
        rtcInit.CalendarTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	61fb      	str	r3, [r7, #28]
        HAL_RTC_SetTime( &RtcHandle, &rtcInit.CalendarTime, RTC_FORMAT_BIN );
 8006cfc:	1d3b      	adds	r3, r7, #4
 8006cfe:	3308      	adds	r3, #8
 8006d00:	2200      	movs	r2, #0
 8006d02:	4619      	mov	r1, r3
 8006d04:	480a      	ldr	r0, [pc, #40]	@ (8006d30 <RtcInit+0xc0>)
 8006d06:	f7fe f891 	bl	8004e2c <HAL_RTC_SetTime>

        HAL_NVIC_SetPriority( RTC_IRQn, 4, 0 );
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	2104      	movs	r1, #4
 8006d0e:	2002      	movs	r0, #2
 8006d10:	f7fb f87a 	bl	8001e08 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ( RTC_IRQn );
 8006d14:	2002      	movs	r0, #2
 8006d16:	f7fb f891 	bl	8001e3c <HAL_NVIC_EnableIRQ>
        RtcInitalized = true;
 8006d1a:	4b03      	ldr	r3, [pc, #12]	@ (8006d28 <RtcInit+0xb8>)
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	701a      	strb	r2, [r3, #0]
    }
}
 8006d20:	bf00      	nop
 8006d22:	3720      	adds	r7, #32
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	200002f0 	.word	0x200002f0
 8006d2c:	46020c00 	.word	0x46020c00
 8006d30:	200002c0 	.word	0x200002c0
 8006d34:	46007800 	.word	0x46007800

08006d38 <RtcSetTimeout>:

void RtcSetTimeout( uint32_t timeout )
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
    RtcStartWakeUpAlarm( timeout );
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f000 f8e1 	bl	8006f08 <RtcStartWakeUpAlarm>
}
 8006d46:	bf00      	nop
 8006d48:	3708      	adds	r7, #8
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
	...

08006d50 <RtcGetAdjustedTimeoutValue>:

TimerTime_t RtcGetAdjustedTimeoutValue( uint32_t timeout )
{
 8006d50:	b480      	push	{r7}
 8006d52:	b083      	sub	sp, #12
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
    if( timeout > McuWakeUpTime )
 8006d58:	4b16      	ldr	r3, [pc, #88]	@ (8006db4 <RtcGetAdjustedTimeoutValue+0x64>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d90c      	bls.n	8006d7c <RtcGetAdjustedTimeoutValue+0x2c>
    {   // we have waken up from a GPIO and we have lost "McuWakeUpTime" that we need to compensate on next event
        if( NonScheduledWakeUp == true )
 8006d62:	4b15      	ldr	r3, [pc, #84]	@ (8006db8 <RtcGetAdjustedTimeoutValue+0x68>)
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d007      	beq.n	8006d7c <RtcGetAdjustedTimeoutValue+0x2c>
        {
            NonScheduledWakeUp = false;
 8006d6c:	4b12      	ldr	r3, [pc, #72]	@ (8006db8 <RtcGetAdjustedTimeoutValue+0x68>)
 8006d6e:	2200      	movs	r2, #0
 8006d70:	701a      	strb	r2, [r3, #0]
            timeout -= McuWakeUpTime;
 8006d72:	4b10      	ldr	r3, [pc, #64]	@ (8006db4 <RtcGetAdjustedTimeoutValue+0x64>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	1ad3      	subs	r3, r2, r3
 8006d7a:	607b      	str	r3, [r7, #4]
        }
    }
    
    if( timeout > McuWakeUpTime )
 8006d7c:	4b0d      	ldr	r3, [pc, #52]	@ (8006db4 <RtcGetAdjustedTimeoutValue+0x64>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d90e      	bls.n	8006da4 <RtcGetAdjustedTimeoutValue+0x54>
    {   // we don't go in Low Power mode for delay below 50ms (needed for LEDs)        
        if( timeout < 50 ) // 50 ms
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2b31      	cmp	r3, #49	@ 0x31
 8006d8a:	d803      	bhi.n	8006d94 <RtcGetAdjustedTimeoutValue+0x44>
        {
            RtcTimerEventAllowsLowPower = false;
 8006d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8006dbc <RtcGetAdjustedTimeoutValue+0x6c>)
 8006d8e:	2200      	movs	r2, #0
 8006d90:	701a      	strb	r2, [r3, #0]
 8006d92:	e007      	b.n	8006da4 <RtcGetAdjustedTimeoutValue+0x54>
        }
        else
        {
            RtcTimerEventAllowsLowPower = true;
 8006d94:	4b09      	ldr	r3, [pc, #36]	@ (8006dbc <RtcGetAdjustedTimeoutValue+0x6c>)
 8006d96:	2201      	movs	r2, #1
 8006d98:	701a      	strb	r2, [r3, #0]
            timeout -= McuWakeUpTime;
 8006d9a:	4b06      	ldr	r3, [pc, #24]	@ (8006db4 <RtcGetAdjustedTimeoutValue+0x64>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	1ad3      	subs	r3, r2, r3
 8006da2:	607b      	str	r3, [r7, #4]
        }
    }

    return  timeout;
 8006da4:	687b      	ldr	r3, [r7, #4]
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	370c      	adds	r7, #12
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop
 8006db4:	200002f4 	.word	0x200002f4
 8006db8:	2000029f 	.word	0x2000029f
 8006dbc:	200002bc 	.word	0x200002bc

08006dc0 <RtcGetElapsedAlarmTime>:
{
    return( RtcConvertCalendarTickToTimerTime( NULL ) );
}

TimerTime_t RtcGetElapsedAlarmTime( void )
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b082      	sub	sp, #8
 8006dc4:	af00      	add	r7, sp, #0
    TimerTime_t currentTime = 0;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	607b      	str	r3, [r7, #4]
    TimerTime_t contextTime = 0;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	603b      	str	r3, [r7, #0]

    currentTime = RtcConvertCalendarTickToTimerTime( NULL );
 8006dce:	2000      	movs	r0, #0
 8006dd0:	f000 faba 	bl	8007348 <RtcConvertCalendarTickToTimerTime>
 8006dd4:	6078      	str	r0, [r7, #4]
    contextTime = RtcConvertCalendarTickToTimerTime( &RtcCalendarContext );
 8006dd6:	480a      	ldr	r0, [pc, #40]	@ (8006e00 <RtcGetElapsedAlarmTime+0x40>)
 8006dd8:	f000 fab6 	bl	8007348 <RtcConvertCalendarTickToTimerTime>
 8006ddc:	6038      	str	r0, [r7, #0]

    if( currentTime < contextTime )
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d204      	bcs.n	8006df0 <RtcGetElapsedAlarmTime+0x30>
    {
        return( currentTime + ( 0xFFFFFFFF - contextTime ) );
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	1ad3      	subs	r3, r2, r3
 8006dec:	3b01      	subs	r3, #1
 8006dee:	e002      	b.n	8006df6 <RtcGetElapsedAlarmTime+0x36>
    }
    else
    {
        return( currentTime - contextTime );
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	1ad3      	subs	r3, r2, r3
    }
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3708      	adds	r7, #8
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	200002a0 	.word	0x200002a0

08006e04 <BlockLowPowerDuringTask>:
        return( elapsedTime - eventInTime );
    }
}

void BlockLowPowerDuringTask ( bool status )
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b082      	sub	sp, #8
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	71fb      	strb	r3, [r7, #7]
    if( status == true )
 8006e0e:	79fb      	ldrb	r3, [r7, #7]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d001      	beq.n	8006e18 <BlockLowPowerDuringTask+0x14>
    {
        RtcRecoverMcuStatus( );
 8006e14:	f000 f80a 	bl	8006e2c <RtcRecoverMcuStatus>
    }
    LowPowerDisableDuringTask = status;
 8006e18:	4a03      	ldr	r2, [pc, #12]	@ (8006e28 <BlockLowPowerDuringTask+0x24>)
 8006e1a:	79fb      	ldrb	r3, [r7, #7]
 8006e1c:	7013      	strb	r3, [r2, #0]
}
 8006e1e:	bf00      	nop
 8006e20:	3708      	adds	r7, #8
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	200002bd 	.word	0x200002bd

08006e2c <RtcRecoverMcuStatus>:
//        HAL_PWR_EnterSTOPMode( PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI );
    }
}

void RtcRecoverMcuStatus( void )
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	af00      	add	r7, sp, #0
//    {
//        BoardInitMcu( );
//    }


}
 8006e30:	bf00      	nop
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr
	...

08006e3c <RtcComputeWakeUpTime>:

static void RtcComputeWakeUpTime( void )
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b096      	sub	sp, #88	@ 0x58
 8006e40:	af00      	add	r7, sp, #0
    uint32_t start = 0;
 8006e42:	2300      	movs	r3, #0
 8006e44:	657b      	str	r3, [r7, #84]	@ 0x54
    uint32_t stop = 0;
 8006e46:	2300      	movs	r3, #0
 8006e48:	653b      	str	r3, [r7, #80]	@ 0x50
    RTC_AlarmTypeDef  alarmRtc;
    RtcCalendar_t now;

    if( WakeUpTimeInitialized == false )
 8006e4a:	4b2b      	ldr	r3, [pc, #172]	@ (8006ef8 <RtcComputeWakeUpTime+0xbc>)
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	f083 0301 	eor.w	r3, r3, #1
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d04b      	beq.n	8006ef0 <RtcComputeWakeUpTime+0xb4>
    {
        now = RtcGetCalendar( );
 8006e58:	1d3b      	adds	r3, r7, #4
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f000 fb8e 	bl	800757c <RtcGetCalendar>
        HAL_RTC_GetAlarm( &RtcHandle, &alarmRtc, RTC_ALARM_A, RTC_FORMAT_BIN );
 8006e60:	f107 0120 	add.w	r1, r7, #32
 8006e64:	2300      	movs	r3, #0
 8006e66:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006e6a:	4824      	ldr	r0, [pc, #144]	@ (8006efc <RtcComputeWakeUpTime+0xc0>)
 8006e6c:	f7fe fb02 	bl	8005474 <HAL_RTC_GetAlarm>

        start = alarmRtc.AlarmTime.Seconds + ( SecondsInMinute * alarmRtc.AlarmTime.Minutes ) + ( SecondsInHour * alarmRtc.AlarmTime.Hours );
 8006e70:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8006e74:	461a      	mov	r2, r3
 8006e76:	233c      	movs	r3, #60	@ 0x3c
 8006e78:	f897 1021 	ldrb.w	r1, [r7, #33]	@ 0x21
 8006e7c:	fb01 f303 	mul.w	r3, r1, r3
 8006e80:	441a      	add	r2, r3
 8006e82:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8006e86:	f897 1020 	ldrb.w	r1, [r7, #32]
 8006e8a:	fb01 f303 	mul.w	r3, r1, r3
 8006e8e:	4413      	add	r3, r2
 8006e90:	657b      	str	r3, [r7, #84]	@ 0x54
        stop = now.CalendarTime.Seconds + ( SecondsInMinute * now.CalendarTime.Minutes ) + ( SecondsInHour * now.CalendarTime.Hours );
 8006e92:	7bbb      	ldrb	r3, [r7, #14]
 8006e94:	461a      	mov	r2, r3
 8006e96:	233c      	movs	r3, #60	@ 0x3c
 8006e98:	7b79      	ldrb	r1, [r7, #13]
 8006e9a:	fb01 f303 	mul.w	r3, r1, r3
 8006e9e:	441a      	add	r2, r3
 8006ea0:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8006ea4:	7b39      	ldrb	r1, [r7, #12]
 8006ea6:	fb01 f303 	mul.w	r3, r1, r3
 8006eaa:	4413      	add	r3, r2
 8006eac:	653b      	str	r3, [r7, #80]	@ 0x50

        McuWakeUpTime = ceil ( ( stop - start ) * RTC_ALARM_TICK_DURATION );
 8006eae:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006eb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006eb2:	1ad3      	subs	r3, r2, r3
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f7f9 fb29 	bl	800050c <__aeabi_ui2d>
 8006eba:	f04f 0200 	mov.w	r2, #0
 8006ebe:	4b10      	ldr	r3, [pc, #64]	@ (8006f00 <RtcComputeWakeUpTime+0xc4>)
 8006ec0:	f7f9 fb9e 	bl	8000600 <__aeabi_dmul>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	460b      	mov	r3, r1
 8006ec8:	ec43 2b17 	vmov	d7, r2, r3
 8006ecc:	eeb0 0a47 	vmov.f32	s0, s14
 8006ed0:	eef0 0a67 	vmov.f32	s1, s15
 8006ed4:	f004 fbd0 	bl	800b678 <ceil>
 8006ed8:	ec53 2b10 	vmov	r2, r3, d0
 8006edc:	4610      	mov	r0, r2
 8006ede:	4619      	mov	r1, r3
 8006ee0:	f7f9 fe50 	bl	8000b84 <__aeabi_d2uiz>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	4a07      	ldr	r2, [pc, #28]	@ (8006f04 <RtcComputeWakeUpTime+0xc8>)
 8006ee8:	6013      	str	r3, [r2, #0]

        WakeUpTimeInitialized = true;
 8006eea:	4b03      	ldr	r3, [pc, #12]	@ (8006ef8 <RtcComputeWakeUpTime+0xbc>)
 8006eec:	2201      	movs	r2, #1
 8006eee:	701a      	strb	r2, [r3, #0]
    }
}
 8006ef0:	bf00      	nop
 8006ef2:	3758      	adds	r7, #88	@ 0x58
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}
 8006ef8:	200002f1 	.word	0x200002f1
 8006efc:	200002c0 	.word	0x200002c0
 8006f00:	3fdf4000 	.word	0x3fdf4000
 8006f04:	200002f4 	.word	0x200002f4

08006f08 <RtcStartWakeUpAlarm>:

static void RtcStartWakeUpAlarm( uint32_t timeoutValue )
{
 8006f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f0a:	b0a3      	sub	sp, #140	@ 0x8c
 8006f0c:	af06      	add	r7, sp, #24
 8006f0e:	6078      	str	r0, [r7, #4]
    RtcCalendar_t now;
    RtcCalendar_t alarmTimer;
    RTC_AlarmTypeDef alarmStructure;

    HAL_RTC_DeactivateAlarm( &RtcHandle, RTC_ALARM_A );
 8006f10:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006f14:	4822      	ldr	r0, [pc, #136]	@ (8006fa0 <RtcStartWakeUpAlarm+0x98>)
 8006f16:	f7fe fa6b 	bl	80053f0 <HAL_RTC_DeactivateAlarm>
    HAL_RTCEx_DeactivateWakeUpTimer( &RtcHandle );
 8006f1a:	4821      	ldr	r0, [pc, #132]	@ (8006fa0 <RtcStartWakeUpAlarm+0x98>)
 8006f1c:	f7fe fc82 	bl	8005824 <HAL_RTCEx_DeactivateWakeUpTimer>

    // Load the RTC calendar
    now = RtcGetCalendar( );
 8006f20:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8006f24:	4618      	mov	r0, r3
 8006f26:	f000 fb29 	bl	800757c <RtcGetCalendar>

    // Save the calendar into RtcCalendarContext to be able to calculate the elapsed time
    RtcCalendarContext = now;
 8006f2a:	4b1e      	ldr	r3, [pc, #120]	@ (8006fa4 <RtcStartWakeUpAlarm+0x9c>)
 8006f2c:	461d      	mov	r5, r3
 8006f2e:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8006f32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006f34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006f36:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8006f3a:	e885 0007 	stmia.w	r5, {r0, r1, r2}

    // timeoutValue is in ms 
    alarmTimer = RtcComputeTimerTimeToAlarmTick( timeoutValue, now );
 8006f3e:	f107 0638 	add.w	r6, r7, #56	@ 0x38
 8006f42:	466d      	mov	r5, sp
 8006f44:	f107 045c 	add.w	r4, r7, #92	@ 0x5c
 8006f48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006f4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006f4c:	6823      	ldr	r3, [r4, #0]
 8006f4e:	602b      	str	r3, [r5, #0]
 8006f50:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8006f54:	cb0c      	ldmia	r3, {r2, r3}
 8006f56:	6879      	ldr	r1, [r7, #4]
 8006f58:	4630      	mov	r0, r6
 8006f5a:	f000 f825 	bl	8006fa8 <RtcComputeTimerTimeToAlarmTick>

    alarmStructure.Alarm = RTC_ALARM_A;
 8006f5e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006f62:	637b      	str	r3, [r7, #52]	@ 0x34
    alarmStructure.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8006f64:	2300      	movs	r3, #0
 8006f66:	62bb      	str	r3, [r7, #40]	@ 0x28
    alarmStructure.AlarmMask = RTC_ALARMMASK_NONE;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	61fb      	str	r3, [r7, #28]
    alarmStructure.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	72fb      	strb	r3, [r7, #11]
    
    alarmStructure.AlarmTime.Seconds = alarmTimer.CalendarTime.Seconds;
 8006f70:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8006f74:	72bb      	strb	r3, [r7, #10]
    alarmStructure.AlarmTime.Minutes = alarmTimer.CalendarTime.Minutes;
 8006f76:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8006f7a:	727b      	strb	r3, [r7, #9]
    alarmStructure.AlarmTime.Hours = alarmTimer.CalendarTime.Hours;
 8006f7c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8006f80:	723b      	strb	r3, [r7, #8]
    alarmStructure.AlarmDateWeekDay = alarmTimer.CalendarDate.Date;
 8006f82:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8006f86:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

    if( HAL_RTC_SetAlarm_IT( &RtcHandle, &alarmStructure, RTC_FORMAT_BIN ) != HAL_OK )
 8006f8a:	f107 0308 	add.w	r3, r7, #8
 8006f8e:	2200      	movs	r2, #0
 8006f90:	4619      	mov	r1, r3
 8006f92:	4803      	ldr	r0, [pc, #12]	@ (8006fa0 <RtcStartWakeUpAlarm+0x98>)
 8006f94:	f7fe f92c 	bl	80051f0 <HAL_RTC_SetAlarm_IT>
    {
        assert_param( FAIL );
    }
}
 8006f98:	bf00      	nop
 8006f9a:	3774      	adds	r7, #116	@ 0x74
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fa0:	200002c0 	.word	0x200002c0
 8006fa4:	200002a0 	.word	0x200002a0

08006fa8 <RtcComputeTimerTimeToAlarmTick>:

static RtcCalendar_t RtcComputeTimerTimeToAlarmTick( TimerTime_t timeCounter, RtcCalendar_t now )
{
 8006fa8:	b082      	sub	sp, #8
 8006faa:	b5b0      	push	{r4, r5, r7, lr}
 8006fac:	b092      	sub	sp, #72	@ 0x48
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
 8006fb2:	6039      	str	r1, [r7, #0]
 8006fb4:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8006fb8:	e881 000c 	stmia.w	r1, {r2, r3}
    RtcCalendar_t calendar = now;
 8006fbc:	f107 040c 	add.w	r4, r7, #12
 8006fc0:	f107 0558 	add.w	r5, r7, #88	@ 0x58
 8006fc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006fc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fc8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006fcc:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    uint16_t seconds = now.CalendarTime.Seconds;
 8006fd0:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 8006fd4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    uint16_t minutes = now.CalendarTime.Minutes;
 8006fd8:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 8006fdc:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    uint16_t hours = now.CalendarTime.Hours;
 8006fe0:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 8006fe4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    uint16_t days = now.CalendarDate.Date;
 8006fe8:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8006fec:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    double timeoutValueTemp = 0.0;
 8006ff0:	f04f 0200 	mov.w	r2, #0
 8006ff4:	f04f 0300 	mov.w	r3, #0
 8006ff8:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    double timeoutValue = 0.0;
 8006ffc:	f04f 0200 	mov.w	r2, #0
 8007000:	f04f 0300 	mov.w	r3, #0
 8007004:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double error = 0.0;
 8007008:	f04f 0200 	mov.w	r2, #0
 800700c:	f04f 0300 	mov.w	r3, #0
 8007010:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    
    timeCounter = MIN( timeCounter, ( TimerTime_t )( RTC_ALARM_MAX_NUMBER_OF_DAYS * SecondsInDay * RTC_ALARM_TICK_DURATION ) );
 8007014:	4ac4      	ldr	r2, [pc, #784]	@ (8007328 <RtcComputeTimerTimeToAlarmTick+0x380>)
 8007016:	4613      	mov	r3, r2
 8007018:	00db      	lsls	r3, r3, #3
 800701a:	1a9b      	subs	r3, r3, r2
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	4618      	mov	r0, r3
 8007020:	f7f9 fa74 	bl	800050c <__aeabi_ui2d>
 8007024:	f04f 0200 	mov.w	r2, #0
 8007028:	4bc0      	ldr	r3, [pc, #768]	@ (800732c <RtcComputeTimerTimeToAlarmTick+0x384>)
 800702a:	f7f9 fae9 	bl	8000600 <__aeabi_dmul>
 800702e:	4602      	mov	r2, r0
 8007030:	460b      	mov	r3, r1
 8007032:	4610      	mov	r0, r2
 8007034:	4619      	mov	r1, r3
 8007036:	f7f9 fda5 	bl	8000b84 <__aeabi_d2uiz>
 800703a:	4602      	mov	r2, r0
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	4293      	cmp	r3, r2
 8007040:	bf28      	it	cs
 8007042:	4613      	movcs	r3, r2
 8007044:	603b      	str	r3, [r7, #0]

    if( timeCounter < 1 )
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d101      	bne.n	8007050 <RtcComputeTimerTimeToAlarmTick+0xa8>
    {
        timeCounter = 1;
 800704c:	2301      	movs	r3, #1
 800704e:	603b      	str	r3, [r7, #0]
    }

    // timeoutValue is used for complete computation
    timeoutValue = round( timeCounter * RTC_ALARM_TICK_PER_MS );
 8007050:	6838      	ldr	r0, [r7, #0]
 8007052:	f7f9 fa5b 	bl	800050c <__aeabi_ui2d>
 8007056:	a3b2      	add	r3, pc, #712	@ (adr r3, 8007320 <RtcComputeTimerTimeToAlarmTick+0x378>)
 8007058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800705c:	f7f9 fad0 	bl	8000600 <__aeabi_dmul>
 8007060:	4602      	mov	r2, r0
 8007062:	460b      	mov	r3, r1
 8007064:	ec43 2b17 	vmov	d7, r2, r3
 8007068:	eeb0 0a47 	vmov.f32	s0, s14
 800706c:	eef0 0a67 	vmov.f32	s1, s15
 8007070:	f004 fbfe 	bl	800b870 <round>
 8007074:	ed87 0b0e 	vstr	d0, [r7, #56]	@ 0x38

    // timeoutValueTemp is used to compensate the cumulating errors in timing far in the future
    timeoutValueTemp =  ( double )timeCounter * RTC_ALARM_TICK_PER_MS;
 8007078:	6838      	ldr	r0, [r7, #0]
 800707a:	f7f9 fa47 	bl	800050c <__aeabi_ui2d>
 800707e:	a3a8      	add	r3, pc, #672	@ (adr r3, 8007320 <RtcComputeTimerTimeToAlarmTick+0x378>)
 8007080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007084:	f7f9 fabc 	bl	8000600 <__aeabi_dmul>
 8007088:	4602      	mov	r2, r0
 800708a:	460b      	mov	r3, r1
 800708c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    // Compute timeoutValue error
    error = timeoutValue - timeoutValueTemp;
 8007090:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8007094:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8007098:	f7f9 f8fa 	bl	8000290 <__aeabi_dsub>
 800709c:	4602      	mov	r2, r0
 800709e:	460b      	mov	r3, r1
 80070a0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    // Add new error value to the cumulated value in uS
    TimeoutValueError += ( error  * 1000 );
 80070a4:	4ba2      	ldr	r3, [pc, #648]	@ (8007330 <RtcComputeTimerTimeToAlarmTick+0x388>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4618      	mov	r0, r3
 80070aa:	f7f9 fa3f 	bl	800052c <__aeabi_i2d>
 80070ae:	4604      	mov	r4, r0
 80070b0:	460d      	mov	r5, r1
 80070b2:	f04f 0200 	mov.w	r2, #0
 80070b6:	4b9f      	ldr	r3, [pc, #636]	@ (8007334 <RtcComputeTimerTimeToAlarmTick+0x38c>)
 80070b8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80070bc:	f7f9 faa0 	bl	8000600 <__aeabi_dmul>
 80070c0:	4602      	mov	r2, r0
 80070c2:	460b      	mov	r3, r1
 80070c4:	4620      	mov	r0, r4
 80070c6:	4629      	mov	r1, r5
 80070c8:	f7f9 f8e4 	bl	8000294 <__adddf3>
 80070cc:	4602      	mov	r2, r0
 80070ce:	460b      	mov	r3, r1
 80070d0:	4610      	mov	r0, r2
 80070d2:	4619      	mov	r1, r3
 80070d4:	f7f9 fd2e 	bl	8000b34 <__aeabi_d2iz>
 80070d8:	4603      	mov	r3, r0
 80070da:	4a95      	ldr	r2, [pc, #596]	@ (8007330 <RtcComputeTimerTimeToAlarmTick+0x388>)
 80070dc:	6013      	str	r3, [r2, #0]

    // Correct cumulated error if greater than ( RTC_ALARM_TICK_DURATION * 1000 )
    if( TimeoutValueError >= ( int32_t )( RTC_ALARM_TICK_DURATION * 1000 ) )
 80070de:	4b94      	ldr	r3, [pc, #592]	@ (8007330 <RtcComputeTimerTimeToAlarmTick+0x388>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f5b3 7ff4 	cmp.w	r3, #488	@ 0x1e8
 80070e6:	db25      	blt.n	8007134 <RtcComputeTimerTimeToAlarmTick+0x18c>
    {
        TimeoutValueError = TimeoutValueError - ( uint32_t )( RTC_ALARM_TICK_DURATION * 1000 );
 80070e8:	4b91      	ldr	r3, [pc, #580]	@ (8007330 <RtcComputeTimerTimeToAlarmTick+0x388>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80070f0:	461a      	mov	r2, r3
 80070f2:	4b8f      	ldr	r3, [pc, #572]	@ (8007330 <RtcComputeTimerTimeToAlarmTick+0x388>)
 80070f4:	601a      	str	r2, [r3, #0]
        timeoutValue = timeoutValue + 1;
 80070f6:	f04f 0200 	mov.w	r2, #0
 80070fa:	4b8f      	ldr	r3, [pc, #572]	@ (8007338 <RtcComputeTimerTimeToAlarmTick+0x390>)
 80070fc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8007100:	f7f9 f8c8 	bl	8000294 <__adddf3>
 8007104:	4602      	mov	r2, r0
 8007106:	460b      	mov	r3, r1
 8007108:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    }

    // Convert milliseconds to RTC format and add to now
    while( timeoutValue >= SecondsInDay )
 800710c:	e012      	b.n	8007134 <RtcComputeTimerTimeToAlarmTick+0x18c>
    {
        timeoutValue -= SecondsInDay;
 800710e:	4b86      	ldr	r3, [pc, #536]	@ (8007328 <RtcComputeTimerTimeToAlarmTick+0x380>)
 8007110:	4618      	mov	r0, r3
 8007112:	f7f9 f9fb 	bl	800050c <__aeabi_ui2d>
 8007116:	4602      	mov	r2, r0
 8007118:	460b      	mov	r3, r1
 800711a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800711e:	f7f9 f8b7 	bl	8000290 <__aeabi_dsub>
 8007122:	4602      	mov	r2, r0
 8007124:	460b      	mov	r3, r1
 8007126:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
        days++;
 800712a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800712e:	3301      	adds	r3, #1
 8007130:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    while( timeoutValue >= SecondsInDay )
 8007134:	4b7c      	ldr	r3, [pc, #496]	@ (8007328 <RtcComputeTimerTimeToAlarmTick+0x380>)
 8007136:	4618      	mov	r0, r3
 8007138:	f7f9 f9e8 	bl	800050c <__aeabi_ui2d>
 800713c:	4602      	mov	r2, r0
 800713e:	460b      	mov	r3, r1
 8007140:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8007144:	f7f9 fce2 	bl	8000b0c <__aeabi_dcmpge>
 8007148:	4603      	mov	r3, r0
 800714a:	2b00      	cmp	r3, #0
 800714c:	d1df      	bne.n	800710e <RtcComputeTimerTimeToAlarmTick+0x166>
    }

    // Calculate hours
    while( timeoutValue >= SecondsInHour )
 800714e:	e013      	b.n	8007178 <RtcComputeTimerTimeToAlarmTick+0x1d0>
    {
        timeoutValue -= SecondsInHour;
 8007150:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8007154:	4618      	mov	r0, r3
 8007156:	f7f9 f9e9 	bl	800052c <__aeabi_i2d>
 800715a:	4602      	mov	r2, r0
 800715c:	460b      	mov	r3, r1
 800715e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8007162:	f7f9 f895 	bl	8000290 <__aeabi_dsub>
 8007166:	4602      	mov	r2, r0
 8007168:	460b      	mov	r3, r1
 800716a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
        hours++;
 800716e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8007172:	3301      	adds	r3, #1
 8007174:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    while( timeoutValue >= SecondsInHour )
 8007178:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 800717c:	4618      	mov	r0, r3
 800717e:	f7f9 f9d5 	bl	800052c <__aeabi_i2d>
 8007182:	4602      	mov	r2, r0
 8007184:	460b      	mov	r3, r1
 8007186:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800718a:	f7f9 fcbf 	bl	8000b0c <__aeabi_dcmpge>
 800718e:	4603      	mov	r3, r0
 8007190:	2b00      	cmp	r3, #0
 8007192:	d1dd      	bne.n	8007150 <RtcComputeTimerTimeToAlarmTick+0x1a8>
    }

    // Calculate minutes
    while( timeoutValue >= SecondsInMinute )
 8007194:	e012      	b.n	80071bc <RtcComputeTimerTimeToAlarmTick+0x214>
    {
        timeoutValue -= SecondsInMinute;
 8007196:	233c      	movs	r3, #60	@ 0x3c
 8007198:	4618      	mov	r0, r3
 800719a:	f7f9 f9c7 	bl	800052c <__aeabi_i2d>
 800719e:	4602      	mov	r2, r0
 80071a0:	460b      	mov	r3, r1
 80071a2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80071a6:	f7f9 f873 	bl	8000290 <__aeabi_dsub>
 80071aa:	4602      	mov	r2, r0
 80071ac:	460b      	mov	r3, r1
 80071ae:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
        minutes++;
 80071b2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80071b6:	3301      	adds	r3, #1
 80071b8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while( timeoutValue >= SecondsInMinute )
 80071bc:	233c      	movs	r3, #60	@ 0x3c
 80071be:	4618      	mov	r0, r3
 80071c0:	f7f9 f9b4 	bl	800052c <__aeabi_i2d>
 80071c4:	4602      	mov	r2, r0
 80071c6:	460b      	mov	r3, r1
 80071c8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80071cc:	f7f9 fc9e 	bl	8000b0c <__aeabi_dcmpge>
 80071d0:	4603      	mov	r3, r0
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d1df      	bne.n	8007196 <RtcComputeTimerTimeToAlarmTick+0x1ee>
    }

    // Calculate seconds
    seconds = seconds + timeoutValue;
 80071d6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80071da:	4618      	mov	r0, r3
 80071dc:	f7f9 f9a6 	bl	800052c <__aeabi_i2d>
 80071e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80071e4:	f7f9 f856 	bl	8000294 <__adddf3>
 80071e8:	4602      	mov	r2, r0
 80071ea:	460b      	mov	r3, r1
 80071ec:	4610      	mov	r0, r2
 80071ee:	4619      	mov	r1, r3
 80071f0:	f7f9 fcc8 	bl	8000b84 <__aeabi_d2uiz>
 80071f4:	4603      	mov	r3, r0
 80071f6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

    // Correct for modulo
    while( seconds >= 60 )
 80071fa:	e009      	b.n	8007210 <RtcComputeTimerTimeToAlarmTick+0x268>
    { 
        seconds -= 60;
 80071fc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007200:	3b3c      	subs	r3, #60	@ 0x3c
 8007202:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        minutes++;
 8007206:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800720a:	3301      	adds	r3, #1
 800720c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while( seconds >= 60 )
 8007210:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007214:	2b3b      	cmp	r3, #59	@ 0x3b
 8007216:	d8f1      	bhi.n	80071fc <RtcComputeTimerTimeToAlarmTick+0x254>
    }

    while( minutes >= 60 )
 8007218:	e009      	b.n	800722e <RtcComputeTimerTimeToAlarmTick+0x286>
    {
        minutes -= 60;
 800721a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800721e:	3b3c      	subs	r3, #60	@ 0x3c
 8007220:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
        hours++;
 8007224:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8007228:	3301      	adds	r3, #1
 800722a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    while( minutes >= 60 )
 800722e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8007232:	2b3b      	cmp	r3, #59	@ 0x3b
 8007234:	d8f1      	bhi.n	800721a <RtcComputeTimerTimeToAlarmTick+0x272>
    }

    while( hours >= HoursInDay )
 8007236:	e00b      	b.n	8007250 <RtcComputeTimerTimeToAlarmTick+0x2a8>
    {
        hours -= HoursInDay;
 8007238:	2318      	movs	r3, #24
 800723a:	461a      	mov	r2, r3
 800723c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8007240:	1a9b      	subs	r3, r3, r2
 8007242:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        days++;
 8007246:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800724a:	3301      	adds	r3, #1
 800724c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    while( hours >= HoursInDay )
 8007250:	2318      	movs	r3, #24
 8007252:	461a      	mov	r2, r3
 8007254:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8007258:	4293      	cmp	r3, r2
 800725a:	d2ed      	bcs.n	8007238 <RtcComputeTimerTimeToAlarmTick+0x290>
    }

    if( ( now.CalendarDate.Year == 0 ) || ( ( now.CalendarDate.Year + Century ) % 4 ) == 0 )
 800725c:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 8007260:	2b00      	cmp	r3, #0
 8007262:	d009      	beq.n	8007278 <RtcComputeTimerTimeToAlarmTick+0x2d0>
 8007264:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 8007268:	461a      	mov	r2, r3
 800726a:	4b34      	ldr	r3, [pc, #208]	@ (800733c <RtcComputeTimerTimeToAlarmTick+0x394>)
 800726c:	881b      	ldrh	r3, [r3, #0]
 800726e:	4413      	add	r3, r2
 8007270:	f003 0303 	and.w	r3, r3, #3
 8007274:	2b00      	cmp	r3, #0
 8007276:	d118      	bne.n	80072aa <RtcComputeTimerTimeToAlarmTick+0x302>
    {
        if( days > DaysInMonthLeapYear[now.CalendarDate.Month - 1] )
 8007278:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800727c:	3b01      	subs	r3, #1
 800727e:	4a30      	ldr	r2, [pc, #192]	@ (8007340 <RtcComputeTimerTimeToAlarmTick+0x398>)
 8007280:	5cd3      	ldrb	r3, [r2, r3]
 8007282:	461a      	mov	r2, r3
 8007284:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007288:	4293      	cmp	r3, r2
 800728a:	d926      	bls.n	80072da <RtcComputeTimerTimeToAlarmTick+0x332>
        {
            days = days % DaysInMonthLeapYear[now.CalendarDate.Month - 1];
 800728c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007290:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8007294:	3a01      	subs	r2, #1
 8007296:	492a      	ldr	r1, [pc, #168]	@ (8007340 <RtcComputeTimerTimeToAlarmTick+0x398>)
 8007298:	5c8a      	ldrb	r2, [r1, r2]
 800729a:	fb93 f1f2 	sdiv	r1, r3, r2
 800729e:	fb01 f202 	mul.w	r2, r1, r2
 80072a2:	1a9b      	subs	r3, r3, r2
 80072a4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
        if( days > DaysInMonthLeapYear[now.CalendarDate.Month - 1] )
 80072a8:	e017      	b.n	80072da <RtcComputeTimerTimeToAlarmTick+0x332>
        }
    }
    else
    {
        if( days > DaysInMonth[now.CalendarDate.Month - 1] )
 80072aa:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80072ae:	3b01      	subs	r3, #1
 80072b0:	4a24      	ldr	r2, [pc, #144]	@ (8007344 <RtcComputeTimerTimeToAlarmTick+0x39c>)
 80072b2:	5cd3      	ldrb	r3, [r2, r3]
 80072b4:	461a      	mov	r2, r3
 80072b6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d90d      	bls.n	80072da <RtcComputeTimerTimeToAlarmTick+0x332>
        {   
            days = days % DaysInMonth[now.CalendarDate.Month - 1];
 80072be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80072c2:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80072c6:	3a01      	subs	r2, #1
 80072c8:	491e      	ldr	r1, [pc, #120]	@ (8007344 <RtcComputeTimerTimeToAlarmTick+0x39c>)
 80072ca:	5c8a      	ldrb	r2, [r1, r2]
 80072cc:	fb93 f1f2 	sdiv	r1, r3, r2
 80072d0:	fb01 f202 	mul.w	r2, r1, r2
 80072d4:	1a9b      	subs	r3, r3, r2
 80072d6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
        }
    }

    calendar.CalendarTime.Seconds = seconds;
 80072da:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	75bb      	strb	r3, [r7, #22]
    calendar.CalendarTime.Minutes = minutes;
 80072e2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	757b      	strb	r3, [r7, #21]
    calendar.CalendarTime.Hours = hours;
 80072ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	753b      	strb	r3, [r7, #20]
    calendar.CalendarDate.Date = days;
 80072f2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	743b      	strb	r3, [r7, #16]

    return calendar;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	461d      	mov	r5, r3
 80072fe:	f107 040c 	add.w	r4, r7, #12
 8007302:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007304:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007306:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800730a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	3748      	adds	r7, #72	@ 0x48
 8007312:	46bd      	mov	sp, r7
 8007314:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8007318:	b002      	add	sp, #8
 800731a:	4770      	bx	lr
 800731c:	f3af 8000 	nop.w
 8007320:	a0b5ed8d 	.word	0xa0b5ed8d
 8007324:	3f60c6f7 	.word	0x3f60c6f7
 8007328:	00015180 	.word	0x00015180
 800732c:	3fdf4000 	.word	0x3fdf4000
 8007330:	200002f8 	.word	0x200002f8
 8007334:	408f4000 	.word	0x408f4000
 8007338:	3ff00000 	.word	0x3ff00000
 800733c:	2000029c 	.word	0x2000029c
 8007340:	0800ba58 	.word	0x0800ba58
 8007344:	0800ba4c 	.word	0x0800ba4c

08007348 <RtcConvertCalendarTickToTimerTime>:

    return calendar;
}

static TimerTime_t RtcConvertCalendarTickToTimerTime( RtcCalendar_t *calendar )
{
 8007348:	b5b0      	push	{r4, r5, r7, lr}
 800734a:	b08e      	sub	sp, #56	@ 0x38
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
    TimerTime_t timeCounter = 0;
 8007350:	2300      	movs	r3, #0
 8007352:	62bb      	str	r3, [r7, #40]	@ 0x28
    RtcCalendar_t now;
    double timeCounterTemp = 0.0;
 8007354:	f04f 0200 	mov.w	r2, #0
 8007358:	f04f 0300 	mov.w	r3, #0
 800735c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    // Passing a NULL pointer will compute from "now" else,
    // compute from the given calendar value
    if( calendar == NULL )
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d105      	bne.n	8007372 <RtcConvertCalendarTickToTimerTime+0x2a>
    {
        now = RtcGetCalendar( );
 8007366:	f107 030c 	add.w	r3, r7, #12
 800736a:	4618      	mov	r0, r3
 800736c:	f000 f906 	bl	800757c <RtcGetCalendar>
 8007370:	e009      	b.n	8007386 <RtcConvertCalendarTickToTimerTime+0x3e>
    }
    else
    {
        now = *calendar;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f107 040c 	add.w	r4, r7, #12
 8007378:	461d      	mov	r5, r3
 800737a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800737c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800737e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007382:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }

    // Years (calculation valid up to year 2099)
    for( int16_t i = 0; i < ( now.CalendarDate.Year + now.CalendarCentury ); i++ )
 8007386:	2300      	movs	r3, #0
 8007388:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800738a:	e02c      	b.n	80073e6 <RtcConvertCalendarTickToTimerTime+0x9e>
    {
        if( ( i == 0 ) || ( i % 4 ) == 0 )
 800738c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8007390:	2b00      	cmp	r3, #0
 8007392:	d005      	beq.n	80073a0 <RtcConvertCalendarTickToTimerTime+0x58>
 8007394:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007396:	f003 0303 	and.w	r3, r3, #3
 800739a:	b29b      	uxth	r3, r3
 800739c:	2b00      	cmp	r3, #0
 800739e:	d10e      	bne.n	80073be <RtcConvertCalendarTickToTimerTime+0x76>
        {
            timeCounterTemp += ( double )SecondsInLeapYear;
 80073a0:	4b5d      	ldr	r3, [pc, #372]	@ (8007518 <RtcConvertCalendarTickToTimerTime+0x1d0>)
 80073a2:	4618      	mov	r0, r3
 80073a4:	f7f9 f8b2 	bl	800050c <__aeabi_ui2d>
 80073a8:	4602      	mov	r2, r0
 80073aa:	460b      	mov	r3, r1
 80073ac:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80073b0:	f7f8 ff70 	bl	8000294 <__adddf3>
 80073b4:	4602      	mov	r2, r0
 80073b6:	460b      	mov	r3, r1
 80073b8:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 80073bc:	e00d      	b.n	80073da <RtcConvertCalendarTickToTimerTime+0x92>
        }
        else
        {
            timeCounterTemp += ( double )SecondsInYear;
 80073be:	4b57      	ldr	r3, [pc, #348]	@ (800751c <RtcConvertCalendarTickToTimerTime+0x1d4>)
 80073c0:	4618      	mov	r0, r3
 80073c2:	f7f9 f8a3 	bl	800050c <__aeabi_ui2d>
 80073c6:	4602      	mov	r2, r0
 80073c8:	460b      	mov	r3, r1
 80073ca:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80073ce:	f7f8 ff61 	bl	8000294 <__adddf3>
 80073d2:	4602      	mov	r2, r0
 80073d4:	460b      	mov	r3, r1
 80073d6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    for( int16_t i = 0; i < ( now.CalendarDate.Year + now.CalendarCentury ); i++ )
 80073da:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80073de:	b29b      	uxth	r3, r3
 80073e0:	3301      	adds	r3, #1
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80073e6:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	@ 0x2e
 80073ea:	7c7b      	ldrb	r3, [r7, #17]
 80073ec:	4619      	mov	r1, r3
 80073ee:	89bb      	ldrh	r3, [r7, #12]
 80073f0:	440b      	add	r3, r1
 80073f2:	429a      	cmp	r2, r3
 80073f4:	dbca      	blt.n	800738c <RtcConvertCalendarTickToTimerTime+0x44>
        }
    }

    // Months (calculation valid up to year 2099)*/
    if( ( now.CalendarDate.Year == 0 ) || ( ( now.CalendarDate.Year + now.CalendarCentury ) % 4 ) == 0 )
 80073f6:	7c7b      	ldrb	r3, [r7, #17]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d007      	beq.n	800740c <RtcConvertCalendarTickToTimerTime+0xc4>
 80073fc:	7c7b      	ldrb	r3, [r7, #17]
 80073fe:	461a      	mov	r2, r3
 8007400:	89bb      	ldrh	r3, [r7, #12]
 8007402:	4413      	add	r3, r2
 8007404:	f003 0303 	and.w	r3, r3, #3
 8007408:	2b00      	cmp	r3, #0
 800740a:	d124      	bne.n	8007456 <RtcConvertCalendarTickToTimerTime+0x10e>
    {
        for( uint8_t i = 0; i < ( now.CalendarDate.Month - 1 ); i++ )
 800740c:	2300      	movs	r3, #0
 800740e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8007412:	e019      	b.n	8007448 <RtcConvertCalendarTickToTimerTime+0x100>
        {
            timeCounterTemp += ( double )( DaysInMonthLeapYear[i] * SecondsInDay );
 8007414:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8007418:	4a41      	ldr	r2, [pc, #260]	@ (8007520 <RtcConvertCalendarTickToTimerTime+0x1d8>)
 800741a:	5cd3      	ldrb	r3, [r2, r3]
 800741c:	461a      	mov	r2, r3
 800741e:	4b41      	ldr	r3, [pc, #260]	@ (8007524 <RtcConvertCalendarTickToTimerTime+0x1dc>)
 8007420:	fb02 f303 	mul.w	r3, r2, r3
 8007424:	4618      	mov	r0, r3
 8007426:	f7f9 f871 	bl	800050c <__aeabi_ui2d>
 800742a:	4602      	mov	r2, r0
 800742c:	460b      	mov	r3, r1
 800742e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8007432:	f7f8 ff2f 	bl	8000294 <__adddf3>
 8007436:	4602      	mov	r2, r0
 8007438:	460b      	mov	r3, r1
 800743a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
        for( uint8_t i = 0; i < ( now.CalendarDate.Month - 1 ); i++ )
 800743e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8007442:	3301      	adds	r3, #1
 8007444:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8007448:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 800744c:	7bfb      	ldrb	r3, [r7, #15]
 800744e:	3b01      	subs	r3, #1
 8007450:	429a      	cmp	r2, r3
 8007452:	dbdf      	blt.n	8007414 <RtcConvertCalendarTickToTimerTime+0xcc>
 8007454:	e023      	b.n	800749e <RtcConvertCalendarTickToTimerTime+0x156>
        }
    }
    else
    {
        for( uint8_t i = 0;  i < ( now.CalendarDate.Month - 1 ); i++ )
 8007456:	2300      	movs	r3, #0
 8007458:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 800745c:	e019      	b.n	8007492 <RtcConvertCalendarTickToTimerTime+0x14a>
        {
            timeCounterTemp += ( double )( DaysInMonth[i] * SecondsInDay );
 800745e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007462:	4a31      	ldr	r2, [pc, #196]	@ (8007528 <RtcConvertCalendarTickToTimerTime+0x1e0>)
 8007464:	5cd3      	ldrb	r3, [r2, r3]
 8007466:	461a      	mov	r2, r3
 8007468:	4b2e      	ldr	r3, [pc, #184]	@ (8007524 <RtcConvertCalendarTickToTimerTime+0x1dc>)
 800746a:	fb02 f303 	mul.w	r3, r2, r3
 800746e:	4618      	mov	r0, r3
 8007470:	f7f9 f84c 	bl	800050c <__aeabi_ui2d>
 8007474:	4602      	mov	r2, r0
 8007476:	460b      	mov	r3, r1
 8007478:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800747c:	f7f8 ff0a 	bl	8000294 <__adddf3>
 8007480:	4602      	mov	r2, r0
 8007482:	460b      	mov	r3, r1
 8007484:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
        for( uint8_t i = 0;  i < ( now.CalendarDate.Month - 1 ); i++ )
 8007488:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800748c:	3301      	adds	r3, #1
 800748e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8007492:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8007496:	7bfb      	ldrb	r3, [r7, #15]
 8007498:	3b01      	subs	r3, #1
 800749a:	429a      	cmp	r2, r3
 800749c:	dbdf      	blt.n	800745e <RtcConvertCalendarTickToTimerTime+0x116>
        }
    }

    timeCounterTemp += ( double )( ( uint32_t )now.CalendarTime.Seconds +
 800749e:	7dbb      	ldrb	r3, [r7, #22]
 80074a0:	4619      	mov	r1, r3
                     ( ( uint32_t )now.CalendarTime.Minutes * SecondsInMinute ) +
                     ( ( uint32_t )now.CalendarTime.Hours * SecondsInHour ) +
 80074a2:	7d3b      	ldrb	r3, [r7, #20]
 80074a4:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80074a8:	fb03 f202 	mul.w	r2, r3, r2
                     ( ( uint32_t )now.CalendarTime.Minutes * SecondsInMinute ) +
 80074ac:	7d7b      	ldrb	r3, [r7, #21]
 80074ae:	203c      	movs	r0, #60	@ 0x3c
 80074b0:	fb00 f303 	mul.w	r3, r0, r3
 80074b4:	4413      	add	r3, r2
 80074b6:	18ca      	adds	r2, r1, r3
                     ( ( uint32_t )( now.CalendarDate.Date * SecondsInDay ) ) );
 80074b8:	7c3b      	ldrb	r3, [r7, #16]
 80074ba:	4619      	mov	r1, r3
 80074bc:	4b19      	ldr	r3, [pc, #100]	@ (8007524 <RtcConvertCalendarTickToTimerTime+0x1dc>)
 80074be:	fb01 f303 	mul.w	r3, r1, r3
                     ( ( uint32_t )now.CalendarTime.Hours * SecondsInHour ) +
 80074c2:	4413      	add	r3, r2
    timeCounterTemp += ( double )( ( uint32_t )now.CalendarTime.Seconds +
 80074c4:	4618      	mov	r0, r3
 80074c6:	f7f9 f821 	bl	800050c <__aeabi_ui2d>
 80074ca:	4602      	mov	r2, r0
 80074cc:	460b      	mov	r3, r1
 80074ce:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80074d2:	f7f8 fedf 	bl	8000294 <__adddf3>
 80074d6:	4602      	mov	r2, r0
 80074d8:	460b      	mov	r3, r1
 80074da:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    timeCounterTemp = ( double )timeCounterTemp * RTC_ALARM_TICK_DURATION;
 80074de:	f04f 0200 	mov.w	r2, #0
 80074e2:	4b12      	ldr	r3, [pc, #72]	@ (800752c <RtcConvertCalendarTickToTimerTime+0x1e4>)
 80074e4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80074e8:	f7f9 f88a 	bl	8000600 <__aeabi_dmul>
 80074ec:	4602      	mov	r2, r0
 80074ee:	460b      	mov	r3, r1
 80074f0:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    timeCounter = round( timeCounterTemp );
 80074f4:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 80074f8:	f004 f9ba 	bl	800b870 <round>
 80074fc:	ec53 2b10 	vmov	r2, r3, d0
 8007500:	4610      	mov	r0, r2
 8007502:	4619      	mov	r1, r3
 8007504:	f7f9 fb3e 	bl	8000b84 <__aeabi_d2uiz>
 8007508:	4603      	mov	r3, r0
 800750a:	62bb      	str	r3, [r7, #40]	@ 0x28
    return ( timeCounter );
 800750c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 800750e:	4618      	mov	r0, r3
 8007510:	3738      	adds	r7, #56	@ 0x38
 8007512:	46bd      	mov	sp, r7
 8007514:	bdb0      	pop	{r4, r5, r7, pc}
 8007516:	bf00      	nop
 8007518:	01e28500 	.word	0x01e28500
 800751c:	01e13380 	.word	0x01e13380
 8007520:	0800ba58 	.word	0x0800ba58
 8007524:	00015180 	.word	0x00015180
 8007528:	0800ba4c 	.word	0x0800ba4c
 800752c:	3fdf4000 	.word	0x3fdf4000

08007530 <RtcCheckCalendarRollOver>:

static void RtcCheckCalendarRollOver( uint8_t year )
{
 8007530:	b480      	push	{r7}
 8007532:	b083      	sub	sp, #12
 8007534:	af00      	add	r7, sp, #0
 8007536:	4603      	mov	r3, r0
 8007538:	71fb      	strb	r3, [r7, #7]
    if( year == 99 )
 800753a:	79fb      	ldrb	r3, [r7, #7]
 800753c:	2b63      	cmp	r3, #99	@ 0x63
 800753e:	d102      	bne.n	8007546 <RtcCheckCalendarRollOver+0x16>
    {
        CallendarRollOverReady = true;
 8007540:	4b0c      	ldr	r3, [pc, #48]	@ (8007574 <RtcCheckCalendarRollOver+0x44>)
 8007542:	2201      	movs	r2, #1
 8007544:	701a      	strb	r2, [r3, #0]
    }

    if( ( CallendarRollOverReady == true ) && ( ( year + Century ) == Century ) )
 8007546:	4b0b      	ldr	r3, [pc, #44]	@ (8007574 <RtcCheckCalendarRollOver+0x44>)
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d00b      	beq.n	8007566 <RtcCheckCalendarRollOver+0x36>
 800754e:	79fb      	ldrb	r3, [r7, #7]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d108      	bne.n	8007566 <RtcCheckCalendarRollOver+0x36>
    {   // Indicate a roll-over of the calendar
        CallendarRollOverReady = false;
 8007554:	4b07      	ldr	r3, [pc, #28]	@ (8007574 <RtcCheckCalendarRollOver+0x44>)
 8007556:	2200      	movs	r2, #0
 8007558:	701a      	strb	r2, [r3, #0]
        Century = Century + 100;
 800755a:	4b07      	ldr	r3, [pc, #28]	@ (8007578 <RtcCheckCalendarRollOver+0x48>)
 800755c:	881b      	ldrh	r3, [r3, #0]
 800755e:	3364      	adds	r3, #100	@ 0x64
 8007560:	b29a      	uxth	r2, r3
 8007562:	4b05      	ldr	r3, [pc, #20]	@ (8007578 <RtcCheckCalendarRollOver+0x48>)
 8007564:	801a      	strh	r2, [r3, #0]
    }
}
 8007566:	bf00      	nop
 8007568:	370c      	adds	r7, #12
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr
 8007572:	bf00      	nop
 8007574:	2000029e 	.word	0x2000029e
 8007578:	2000029c 	.word	0x2000029c

0800757c <RtcGetCalendar>:

static RtcCalendar_t RtcGetCalendar( void )
{
 800757c:	b5b0      	push	{r4, r5, r7, lr}
 800757e:	b08a      	sub	sp, #40	@ 0x28
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
    RtcCalendar_t calendar;
    HAL_RTC_GetTime( &RtcHandle, &calendar.CalendarTime, RTC_FORMAT_BIN );
 8007584:	f107 030c 	add.w	r3, r7, #12
 8007588:	3308      	adds	r3, #8
 800758a:	2200      	movs	r2, #0
 800758c:	4619      	mov	r1, r3
 800758e:	4810      	ldr	r0, [pc, #64]	@ (80075d0 <RtcGetCalendar+0x54>)
 8007590:	f7fd fce8 	bl	8004f64 <HAL_RTC_GetTime>
    HAL_RTC_GetDate( &RtcHandle, &calendar.CalendarDate, RTC_FORMAT_BIN );
 8007594:	f107 030c 	add.w	r3, r7, #12
 8007598:	3302      	adds	r3, #2
 800759a:	2200      	movs	r2, #0
 800759c:	4619      	mov	r1, r3
 800759e:	480c      	ldr	r0, [pc, #48]	@ (80075d0 <RtcGetCalendar+0x54>)
 80075a0:	f7fd fdd8 	bl	8005154 <HAL_RTC_GetDate>
    calendar.CalendarCentury = Century;
 80075a4:	4b0b      	ldr	r3, [pc, #44]	@ (80075d4 <RtcGetCalendar+0x58>)
 80075a6:	881b      	ldrh	r3, [r3, #0]
 80075a8:	81bb      	strh	r3, [r7, #12]
    RtcCheckCalendarRollOver( calendar.CalendarDate.Year );
 80075aa:	7c7b      	ldrb	r3, [r7, #17]
 80075ac:	4618      	mov	r0, r3
 80075ae:	f7ff ffbf 	bl	8007530 <RtcCheckCalendarRollOver>
    return calendar;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	461d      	mov	r5, r3
 80075b6:	f107 040c 	add.w	r4, r7, #12
 80075ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80075bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80075be:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80075c2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	3728      	adds	r7, #40	@ 0x28
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bdb0      	pop	{r4, r5, r7, pc}
 80075ce:	bf00      	nop
 80075d0:	200002c0 	.word	0x200002c0
 80075d4:	2000029c 	.word	0x2000029c

080075d8 <RTC_IRQHandler>:
/*!
 * \brief RTC IRQ Handler of the RTC Alarm
 */
//void RTC_Alarm_IRQHandler( void )   // STM32L476
void RTC_IRQHandler( void )    // changed for STM32U5 - PK
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	af00      	add	r7, sp, #0
    HAL_RTC_AlarmIRQHandler( &RtcHandle );
 80075dc:	480a      	ldr	r0, [pc, #40]	@ (8007608 <RTC_IRQHandler+0x30>)
 80075de:	f7fe f807 	bl	80055f0 <HAL_RTC_AlarmIRQHandler>
    HAL_RTC_DeactivateAlarm( &RtcHandle, RTC_ALARM_A );
 80075e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80075e6:	4808      	ldr	r0, [pc, #32]	@ (8007608 <RTC_IRQHandler+0x30>)
 80075e8:	f7fd ff02 	bl	80053f0 <HAL_RTC_DeactivateAlarm>
    RtcRecoverMcuStatus( );
 80075ec:	f7ff fc1e 	bl	8006e2c <RtcRecoverMcuStatus>
    RtcComputeWakeUpTime( );
 80075f0:	f7ff fc24 	bl	8006e3c <RtcComputeWakeUpTime>
//    BlockLowPowerDuringTask( false );
    BlockLowPowerDuringTask( true );   // PK bugfix
 80075f4:	2001      	movs	r0, #1
 80075f6:	f7ff fc05 	bl	8006e04 <BlockLowPowerDuringTask>
//    DelayMs(10);   // BUG FIX PK
    printf("RTC_IRQHandler\n\r");
 80075fa:	4804      	ldr	r0, [pc, #16]	@ (800760c <RTC_IRQHandler+0x34>)
 80075fc:	f002 ff74 	bl	800a4e8 <iprintf>
    TimerIrqHandler( );
 8007600:	f000 fb34 	bl	8007c6c <TimerIrqHandler>
}
 8007604:	bf00      	nop
 8007606:	bd80      	pop	{r7, pc}
 8007608:	200002c0 	.word	0x200002c0
 800760c:	0800b958 	.word	0x0800b958

08007610 <SpiInit>:
}SPIName;

void Error_Handler(void);   // should be defined in main.c - PK

void SpiInit( Spi_t *obj, PinNames mosi, PinNames miso, PinNames sclk, PinNames nss )
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b086      	sub	sp, #24
 8007614:	af02      	add	r7, sp, #8
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	4608      	mov	r0, r1
 800761a:	4611      	mov	r1, r2
 800761c:	461a      	mov	r2, r3
 800761e:	4603      	mov	r3, r0
 8007620:	70fb      	strb	r3, [r7, #3]
 8007622:	460b      	mov	r3, r1
 8007624:	70bb      	strb	r3, [r7, #2]
 8007626:	4613      	mov	r3, r2
 8007628:	707b      	strb	r3, [r7, #1]
    __HAL_RCC_SPI1_FORCE_RESET( );
 800762a:	4b3f      	ldr	r3, [pc, #252]	@ (8007728 <SpiInit+0x118>)
 800762c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800762e:	4a3e      	ldr	r2, [pc, #248]	@ (8007728 <SpiInit+0x118>)
 8007630:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007634:	67d3      	str	r3, [r2, #124]	@ 0x7c
    __HAL_RCC_SPI1_RELEASE_RESET( );
 8007636:	4b3c      	ldr	r3, [pc, #240]	@ (8007728 <SpiInit+0x118>)
 8007638:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800763a:	4a3b      	ldr	r2, [pc, #236]	@ (8007728 <SpiInit+0x118>)
 800763c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007640:	67d3      	str	r3, [r2, #124]	@ 0x7c

    __HAL_RCC_SPI1_CLK_ENABLE( );
 8007642:	4b39      	ldr	r3, [pc, #228]	@ (8007728 <SpiInit+0x118>)
 8007644:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007648:	4a37      	ldr	r2, [pc, #220]	@ (8007728 <SpiInit+0x118>)
 800764a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800764e:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8007652:	4b35      	ldr	r3, [pc, #212]	@ (8007728 <SpiInit+0x118>)
 8007654:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007658:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800765c:	60fb      	str	r3, [r7, #12]
 800765e:	68fb      	ldr	r3, [r7, #12]

//    obj->Spi.Instance = ( SPI_TypeDef *) SPI1_BASE;
    obj->Spi.Instance = SPI1; //( SPI_TypeDef *) SPI1_BASE;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	4a32      	ldr	r2, [pc, #200]	@ (800772c <SpiInit+0x11c>)
 8007664:	601a      	str	r2, [r3, #0]

    GpioInit( &obj->Mosi, mosi, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_DOWN, GPIO_AF5_SPI1 );
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 800766c:	f997 1003 	ldrsb.w	r1, [r7, #3]
 8007670:	2305      	movs	r3, #5
 8007672:	9301      	str	r3, [sp, #4]
 8007674:	2302      	movs	r3, #2
 8007676:	9300      	str	r3, [sp, #0]
 8007678:	2300      	movs	r3, #0
 800767a:	2202      	movs	r2, #2
 800767c:	f7ff faa4 	bl	8006bc8 <GpioInit>
    GpioInit( &obj->Miso, miso, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_DOWN, GPIO_AF5_SPI1 );
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f103 009c 	add.w	r0, r3, #156	@ 0x9c
 8007686:	f997 1002 	ldrsb.w	r1, [r7, #2]
 800768a:	2305      	movs	r3, #5
 800768c:	9301      	str	r3, [sp, #4]
 800768e:	2302      	movs	r3, #2
 8007690:	9300      	str	r3, [sp, #0]
 8007692:	2300      	movs	r3, #0
 8007694:	2202      	movs	r2, #2
 8007696:	f7ff fa97 	bl	8006bc8 <GpioInit>
    GpioInit( &obj->Sclk, sclk, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_DOWN, GPIO_AF5_SPI1 );
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f103 00a8 	add.w	r0, r3, #168	@ 0xa8
 80076a0:	f997 1001 	ldrsb.w	r1, [r7, #1]
 80076a4:	2305      	movs	r3, #5
 80076a6:	9301      	str	r3, [sp, #4]
 80076a8:	2302      	movs	r3, #2
 80076aa:	9300      	str	r3, [sp, #0]
 80076ac:	2300      	movs	r3, #0
 80076ae:	2202      	movs	r2, #2
 80076b0:	f7ff fa8a 	bl	8006bc8 <GpioInit>

    if( nss != NC )
 80076b4:	f997 3018 	ldrsb.w	r3, [r7, #24]
 80076b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076bc:	d00d      	beq.n	80076da <SpiInit+0xca>
    {
        GpioInit( &obj->Nss, nss, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_UP, GPIO_AF5_SPI1 );
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f103 00b4 	add.w	r0, r3, #180	@ 0xb4
 80076c4:	f997 1018 	ldrsb.w	r1, [r7, #24]
 80076c8:	2305      	movs	r3, #5
 80076ca:	9301      	str	r3, [sp, #4]
 80076cc:	2301      	movs	r3, #1
 80076ce:	9300      	str	r3, [sp, #0]
 80076d0:	2300      	movs	r3, #0
 80076d2:	2202      	movs	r2, #2
 80076d4:	f7ff fa78 	bl	8006bc8 <GpioInit>
 80076d8:	e003      	b.n	80076e2 <SpiInit+0xd2>
    }
    else
    {
        obj->Spi.Init.NSS = SPI_NSS_SOFT;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80076e0:	619a      	str	r2, [r3, #24]
    }

    if( nss == NC )
 80076e2:	f997 3018 	ldrsb.w	r3, [r7, #24]
 80076e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ea:	d108      	bne.n	80076fe <SpiInit+0xee>
    {
        SpiFormat( obj, SPI_DATASIZE_8BIT, SPI_POLARITY_LOW, SPI_PHASE_1EDGE, 0 );
 80076ec:	2300      	movs	r3, #0
 80076ee:	9300      	str	r3, [sp, #0]
 80076f0:	2300      	movs	r3, #0
 80076f2:	2200      	movs	r2, #0
 80076f4:	2107      	movs	r1, #7
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 f81a 	bl	8007730 <SpiFormat>
 80076fc:	e007      	b.n	800770e <SpiInit+0xfe>
    }
    else
    {
        SpiFormat( obj, SPI_DATASIZE_8BIT, SPI_POLARITY_LOW, SPI_PHASE_1EDGE, 1 );
 80076fe:	2301      	movs	r3, #1
 8007700:	9300      	str	r3, [sp, #0]
 8007702:	2300      	movs	r3, #0
 8007704:	2200      	movs	r2, #0
 8007706:	2107      	movs	r1, #7
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f000 f811 	bl	8007730 <SpiFormat>

//    HAL_SPI_Init( &obj->Spi );

//	SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};

	if (HAL_SPI_Init(&obj->Spi) != HAL_OK)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	4618      	mov	r0, r3
 8007712:	f7fe f8ed 	bl	80058f0 <HAL_SPI_Init>
 8007716:	4603      	mov	r3, r0
 8007718:	2b00      	cmp	r3, #0
 800771a:	d001      	beq.n	8007720 <SpiInit+0x110>
	{
		Error_Handler();
 800771c:	f7f9 ffc8 	bl	80016b0 <Error_Handler>
		{
			Error_Handler();
		}
	}
	*/
}
 8007720:	bf00      	nop
 8007722:	3710      	adds	r7, #16
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}
 8007728:	46020c00 	.word	0x46020c00
 800772c:	40013000 	.word	0x40013000

08007730 <SpiFormat>:
    GpioInit( &obj->Sclk, obj->Sclk.pin, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
    GpioInit( &obj->Nss, obj->Nss.pin, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 1 );
}

void SpiFormat( Spi_t *obj, uint32_t bits, int8_t cpol, int8_t cpha, int8_t slave )
{
 8007730:	b480      	push	{r7}
 8007732:	b085      	sub	sp, #20
 8007734:	af00      	add	r7, sp, #0
 8007736:	60f8      	str	r0, [r7, #12]
 8007738:	60b9      	str	r1, [r7, #8]
 800773a:	4611      	mov	r1, r2
 800773c:	461a      	mov	r2, r3
 800773e:	460b      	mov	r3, r1
 8007740:	71fb      	strb	r3, [r7, #7]
 8007742:	4613      	mov	r3, r2
 8007744:	71bb      	strb	r3, [r7, #6]
	/* SPI1 parameter configuration*/
    if( slave == 0 )
 8007746:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d104      	bne.n	8007758 <SpiFormat+0x28>
    {
        obj->Spi.Init.Mode = SPI_MODE_MASTER;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8007754:	605a      	str	r2, [r3, #4]
 8007756:	e002      	b.n	800775e <SpiFormat+0x2e>
    }
    else
    {
        obj->Spi.Init.Mode = SPI_MODE_SLAVE;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2200      	movs	r2, #0
 800775c:	605a      	str	r2, [r3, #4]
    }

	obj->Spi.Init.Direction = SPI_DIRECTION_2LINES;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2200      	movs	r2, #0
 8007762:	609a      	str	r2, [r3, #8]
	if( bits == SPI_DATASIZE_8BIT )
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	2b07      	cmp	r3, #7
 8007768:	d103      	bne.n	8007772 <SpiFormat+0x42>
	{
		obj->Spi.Init.DataSize = SPI_DATASIZE_8BIT;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2207      	movs	r2, #7
 800776e:	60da      	str	r2, [r3, #12]
 8007770:	e002      	b.n	8007778 <SpiFormat+0x48>
	}
	else
	{
		obj->Spi.Init.DataSize = SPI_DATASIZE_16BIT;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	220f      	movs	r2, #15
 8007776:	60da      	str	r2, [r3, #12]
	}

	obj->Spi.Init.CLKPolarity = cpol;
 8007778:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	611a      	str	r2, [r3, #16]
	obj->Spi.Init.CLKPhase = cpha;
 8007780:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	615a      	str	r2, [r3, #20]
	obj->Spi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 800778e:	61da      	str	r2, [r3, #28]
	obj->Spi.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2200      	movs	r2, #0
 8007794:	621a      	str	r2, [r3, #32]
	obj->Spi.Init.TIMode = SPI_TIMODE_DISABLE;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2200      	movs	r2, #0
 800779a:	625a      	str	r2, [r3, #36]	@ 0x24
	obj->Spi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2200      	movs	r2, #0
 80077a0:	629a      	str	r2, [r3, #40]	@ 0x28
	obj->Spi.Init.CRCPolynomial = 0x7;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2207      	movs	r2, #7
 80077a6:	62da      	str	r2, [r3, #44]	@ 0x2c
	obj->Spi.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80077ae:	635a      	str	r2, [r3, #52]	@ 0x34
	obj->Spi.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2200      	movs	r2, #0
 80077b4:	639a      	str	r2, [r3, #56]	@ 0x38
	obj->Spi.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2200      	movs	r2, #0
 80077ba:	63da      	str	r2, [r3, #60]	@ 0x3c
	obj->Spi.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2200      	movs	r2, #0
 80077c0:	649a      	str	r2, [r3, #72]	@ 0x48
	obj->Spi.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2200      	movs	r2, #0
 80077c6:	64da      	str	r2, [r3, #76]	@ 0x4c
	obj->Spi.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2200      	movs	r2, #0
 80077cc:	651a      	str	r2, [r3, #80]	@ 0x50
	obj->Spi.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2200      	movs	r2, #0
 80077d2:	655a      	str	r2, [r3, #84]	@ 0x54
	obj->Spi.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2200      	movs	r2, #0
 80077d8:	659a      	str	r2, [r3, #88]	@ 0x58
	obj->Spi.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2200      	movs	r2, #0
 80077de:	65da      	str	r2, [r3, #92]	@ 0x5c
	obj->Spi.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2200      	movs	r2, #0
 80077e4:	661a      	str	r2, [r3, #96]	@ 0x60
}
 80077e6:	bf00      	nop
 80077e8:	3714      	adds	r7, #20
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr
	...

080077f4 <SX1276IoInit>:
 */
Gpio_t AntRx;
Gpio_t AntTx;

void SX1276IoInit( void )
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b082      	sub	sp, #8
 80077f8:	af02      	add	r7, sp, #8
    GpioInit( &SX1276.Spi.Nss, RADIO_NSS, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 1 );
 80077fa:	2301      	movs	r3, #1
 80077fc:	9301      	str	r3, [sp, #4]
 80077fe:	2301      	movs	r3, #1
 8007800:	9300      	str	r3, [sp, #0]
 8007802:	2300      	movs	r3, #0
 8007804:	2201      	movs	r2, #1
 8007806:	2129      	movs	r1, #41	@ 0x29
 8007808:	4820      	ldr	r0, [pc, #128]	@ (800788c <SX1276IoInit+0x98>)
 800780a:	f7ff f9dd 	bl	8006bc8 <GpioInit>

    GpioInit( &SX1276.DIO0, RADIO_DIO_0, PIN_INPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
 800780e:	2300      	movs	r3, #0
 8007810:	9301      	str	r3, [sp, #4]
 8007812:	2301      	movs	r3, #1
 8007814:	9300      	str	r3, [sp, #0]
 8007816:	2300      	movs	r3, #0
 8007818:	2200      	movs	r2, #0
 800781a:	2112      	movs	r1, #18
 800781c:	481c      	ldr	r0, [pc, #112]	@ (8007890 <SX1276IoInit+0x9c>)
 800781e:	f7ff f9d3 	bl	8006bc8 <GpioInit>
    GpioInit( &SX1276.DIO1, RADIO_DIO_1, PIN_INPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
 8007822:	2300      	movs	r3, #0
 8007824:	9301      	str	r3, [sp, #4]
 8007826:	2301      	movs	r3, #1
 8007828:	9300      	str	r3, [sp, #0]
 800782a:	2300      	movs	r3, #0
 800782c:	2200      	movs	r2, #0
 800782e:	2111      	movs	r1, #17
 8007830:	4818      	ldr	r0, [pc, #96]	@ (8007894 <SX1276IoInit+0xa0>)
 8007832:	f7ff f9c9 	bl	8006bc8 <GpioInit>
    GpioInit( &SX1276.DIO2, RADIO_DIO_2, PIN_INPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
 8007836:	2300      	movs	r3, #0
 8007838:	9301      	str	r3, [sp, #4]
 800783a:	2301      	movs	r3, #1
 800783c:	9300      	str	r3, [sp, #0]
 800783e:	2300      	movs	r3, #0
 8007840:	2200      	movs	r2, #0
 8007842:	211f      	movs	r1, #31
 8007844:	4814      	ldr	r0, [pc, #80]	@ (8007898 <SX1276IoInit+0xa4>)
 8007846:	f7ff f9bf 	bl	8006bc8 <GpioInit>
    GpioInit( &SX1276.DIO3, RADIO_DIO_3, PIN_INPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
 800784a:	2300      	movs	r3, #0
 800784c:	9301      	str	r3, [sp, #4]
 800784e:	2301      	movs	r3, #1
 8007850:	9300      	str	r3, [sp, #0]
 8007852:	2300      	movs	r3, #0
 8007854:	2200      	movs	r2, #0
 8007856:	211e      	movs	r1, #30
 8007858:	4810      	ldr	r0, [pc, #64]	@ (800789c <SX1276IoInit+0xa8>)
 800785a:	f7ff f9b5 	bl	8006bc8 <GpioInit>
    GpioInit( &SX1276.DIO4, RADIO_DIO_4, PIN_INPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
 800785e:	2300      	movs	r3, #0
 8007860:	9301      	str	r3, [sp, #4]
 8007862:	2301      	movs	r3, #1
 8007864:	9300      	str	r3, [sp, #0]
 8007866:	2300      	movs	r3, #0
 8007868:	2200      	movs	r2, #0
 800786a:	211d      	movs	r1, #29
 800786c:	480c      	ldr	r0, [pc, #48]	@ (80078a0 <SX1276IoInit+0xac>)
 800786e:	f7ff f9ab 	bl	8006bc8 <GpioInit>
    GpioInit( &SX1276.DIO5, RADIO_DIO_5, PIN_INPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
 8007872:	2300      	movs	r3, #0
 8007874:	9301      	str	r3, [sp, #4]
 8007876:	2301      	movs	r3, #1
 8007878:	9300      	str	r3, [sp, #0]
 800787a:	2300      	movs	r3, #0
 800787c:	2200      	movs	r2, #0
 800787e:	2118      	movs	r1, #24
 8007880:	4808      	ldr	r0, [pc, #32]	@ (80078a4 <SX1276IoInit+0xb0>)
 8007882:	f7ff f9a1 	bl	8006bc8 <GpioInit>
}
 8007886:	bf00      	nop
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}
 800788c:	2000052c 	.word	0x2000052c
 8007890:	20000430 	.word	0x20000430
 8007894:	2000043c 	.word	0x2000043c
 8007898:	20000448 	.word	0x20000448
 800789c:	20000454 	.word	0x20000454
 80078a0:	20000460 	.word	0x20000460
 80078a4:	2000046c 	.word	0x2000046c

080078a8 <SX1276IoIrqInit>:

void SX1276IoIrqInit( DioIrqHandler **irqHandlers )
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b082      	sub	sp, #8
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
    GpioSetInterrupt( &SX1276.DIO0, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, irqHandlers[0] );
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	2203      	movs	r2, #3
 80078b6:	2101      	movs	r1, #1
 80078b8:	4817      	ldr	r0, [pc, #92]	@ (8007918 <SX1276IoIrqInit+0x70>)
 80078ba:	f7ff f9a9 	bl	8006c10 <GpioSetInterrupt>
    GpioSetInterrupt( &SX1276.DIO1, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, irqHandlers[1] );
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	3304      	adds	r3, #4
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	2203      	movs	r2, #3
 80078c6:	2101      	movs	r1, #1
 80078c8:	4814      	ldr	r0, [pc, #80]	@ (800791c <SX1276IoIrqInit+0x74>)
 80078ca:	f7ff f9a1 	bl	8006c10 <GpioSetInterrupt>
    GpioSetInterrupt( &SX1276.DIO2, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, irqHandlers[2] );
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	3308      	adds	r3, #8
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	2203      	movs	r2, #3
 80078d6:	2101      	movs	r1, #1
 80078d8:	4811      	ldr	r0, [pc, #68]	@ (8007920 <SX1276IoIrqInit+0x78>)
 80078da:	f7ff f999 	bl	8006c10 <GpioSetInterrupt>
    GpioSetInterrupt( &SX1276.DIO3, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, irqHandlers[3] );
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	330c      	adds	r3, #12
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	2203      	movs	r2, #3
 80078e6:	2101      	movs	r1, #1
 80078e8:	480e      	ldr	r0, [pc, #56]	@ (8007924 <SX1276IoIrqInit+0x7c>)
 80078ea:	f7ff f991 	bl	8006c10 <GpioSetInterrupt>
    GpioSetInterrupt( &SX1276.DIO4, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, irqHandlers[4] );
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	3310      	adds	r3, #16
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	2203      	movs	r2, #3
 80078f6:	2101      	movs	r1, #1
 80078f8:	480b      	ldr	r0, [pc, #44]	@ (8007928 <SX1276IoIrqInit+0x80>)
 80078fa:	f7ff f989 	bl	8006c10 <GpioSetInterrupt>
    GpioSetInterrupt( &SX1276.DIO5, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, irqHandlers[5] );
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	3314      	adds	r3, #20
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	2203      	movs	r2, #3
 8007906:	2101      	movs	r1, #1
 8007908:	4808      	ldr	r0, [pc, #32]	@ (800792c <SX1276IoIrqInit+0x84>)
 800790a:	f7ff f981 	bl	8006c10 <GpioSetInterrupt>
}
 800790e:	bf00      	nop
 8007910:	3708      	adds	r7, #8
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
 8007916:	bf00      	nop
 8007918:	20000430 	.word	0x20000430
 800791c:	2000043c 	.word	0x2000043c
 8007920:	20000448 	.word	0x20000448
 8007924:	20000454 	.word	0x20000454
 8007928:	20000460 	.word	0x20000460
 800792c:	2000046c 	.word	0x2000046c

08007930 <SX1276GetPaSelect>:
    GpioInit( &SX1276.DIO4, RADIO_DIO_4, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
    GpioInit( &SX1276.DIO5, RADIO_DIO_5, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
}

uint8_t SX1276GetPaSelect( uint32_t channel )
{
 8007930:	b480      	push	{r7}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
    return RF_PACONFIG_PASELECT_PABOOST;
 8007938:	2380      	movs	r3, #128	@ 0x80
}
 800793a:	4618      	mov	r0, r3
 800793c:	370c      	adds	r7, #12
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr
	...

08007948 <SX1276SetAntSwLowPower>:

void SX1276SetAntSwLowPower( bool status )
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
 800794e:	4603      	mov	r3, r0
 8007950:	71fb      	strb	r3, [r7, #7]
    if( RadioIsActive != status )
 8007952:	4b0b      	ldr	r3, [pc, #44]	@ (8007980 <SX1276SetAntSwLowPower+0x38>)
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	79fa      	ldrb	r2, [r7, #7]
 8007958:	429a      	cmp	r2, r3
 800795a:	d00d      	beq.n	8007978 <SX1276SetAntSwLowPower+0x30>
    {
        RadioIsActive = status;
 800795c:	4a08      	ldr	r2, [pc, #32]	@ (8007980 <SX1276SetAntSwLowPower+0x38>)
 800795e:	79fb      	ldrb	r3, [r7, #7]
 8007960:	7013      	strb	r3, [r2, #0]
    
        if( status == false )
 8007962:	79fb      	ldrb	r3, [r7, #7]
 8007964:	f083 0301 	eor.w	r3, r3, #1
 8007968:	b2db      	uxtb	r3, r3
 800796a:	2b00      	cmp	r3, #0
 800796c:	d002      	beq.n	8007974 <SX1276SetAntSwLowPower+0x2c>
        {
            SX1276AntSwInit( );
 800796e:	f000 f809 	bl	8007984 <SX1276AntSwInit>
        else
        {
            SX1276AntSwDeInit( );
        }
    }
}
 8007972:	e001      	b.n	8007978 <SX1276SetAntSwLowPower+0x30>
            SX1276AntSwDeInit( );
 8007974:	f000 f824 	bl	80079c0 <SX1276AntSwDeInit>
}
 8007978:	bf00      	nop
 800797a:	3708      	adds	r7, #8
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}
 8007980:	200002fc 	.word	0x200002fc

08007984 <SX1276AntSwInit>:

void SX1276AntSwInit( void )
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b082      	sub	sp, #8
 8007988:	af02      	add	r7, sp, #8
    GpioInit( &AntTx, RADIO_ANT_SWITCH_TX, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
 800798a:	2300      	movs	r3, #0
 800798c:	9301      	str	r3, [sp, #4]
 800798e:	2301      	movs	r3, #1
 8007990:	9300      	str	r3, [sp, #0]
 8007992:	2300      	movs	r3, #0
 8007994:	2201      	movs	r2, #1
 8007996:	2114      	movs	r1, #20
 8007998:	4807      	ldr	r0, [pc, #28]	@ (80079b8 <SX1276AntSwInit+0x34>)
 800799a:	f7ff f915 	bl	8006bc8 <GpioInit>
    GpioInit( &AntRx, RADIO_ANT_SWITCH_RX, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 1 );
 800799e:	2301      	movs	r3, #1
 80079a0:	9301      	str	r3, [sp, #4]
 80079a2:	2301      	movs	r3, #1
 80079a4:	9300      	str	r3, [sp, #0]
 80079a6:	2300      	movs	r3, #0
 80079a8:	2201      	movs	r2, #1
 80079aa:	2115      	movs	r1, #21
 80079ac:	4803      	ldr	r0, [pc, #12]	@ (80079bc <SX1276AntSwInit+0x38>)
 80079ae:	f7ff f90b 	bl	8006bc8 <GpioInit>
}
 80079b2:	bf00      	nop
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}
 80079b8:	2000030c 	.word	0x2000030c
 80079bc:	20000300 	.word	0x20000300

080079c0 <SX1276AntSwDeInit>:

void SX1276AntSwDeInit( void )
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b082      	sub	sp, #8
 80079c4:	af02      	add	r7, sp, #8
    GpioInit( &AntTx, RADIO_ANT_SWITCH_TX, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 80079c6:	2300      	movs	r3, #0
 80079c8:	9301      	str	r3, [sp, #4]
 80079ca:	2300      	movs	r3, #0
 80079cc:	9300      	str	r3, [sp, #0]
 80079ce:	2300      	movs	r3, #0
 80079d0:	2203      	movs	r2, #3
 80079d2:	2114      	movs	r1, #20
 80079d4:	4807      	ldr	r0, [pc, #28]	@ (80079f4 <SX1276AntSwDeInit+0x34>)
 80079d6:	f7ff f8f7 	bl	8006bc8 <GpioInit>
    GpioInit( &AntRx, RADIO_ANT_SWITCH_RX, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 80079da:	2300      	movs	r3, #0
 80079dc:	9301      	str	r3, [sp, #4]
 80079de:	2300      	movs	r3, #0
 80079e0:	9300      	str	r3, [sp, #0]
 80079e2:	2300      	movs	r3, #0
 80079e4:	2203      	movs	r2, #3
 80079e6:	2115      	movs	r1, #21
 80079e8:	4803      	ldr	r0, [pc, #12]	@ (80079f8 <SX1276AntSwDeInit+0x38>)
 80079ea:	f7ff f8ed 	bl	8006bc8 <GpioInit>
}
 80079ee:	bf00      	nop
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}
 80079f4:	2000030c 	.word	0x2000030c
 80079f8:	20000300 	.word	0x20000300

080079fc <SX1276SetAntSw>:

void SX1276SetAntSw( uint8_t rxTx )
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b082      	sub	sp, #8
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	4603      	mov	r3, r0
 8007a04:	71fb      	strb	r3, [r7, #7]
    if( rxTx != 0 ) // 1: TX, 0: RX
 8007a06:	79fb      	ldrb	r3, [r7, #7]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d008      	beq.n	8007a1e <SX1276SetAntSw+0x22>
    {
        GpioWrite( &AntRx, 0 );
 8007a0c:	2100      	movs	r1, #0
 8007a0e:	480a      	ldr	r0, [pc, #40]	@ (8007a38 <SX1276SetAntSw+0x3c>)
 8007a10:	f7ff f919 	bl	8006c46 <GpioWrite>
        GpioWrite( &AntTx, 1 );
 8007a14:	2101      	movs	r1, #1
 8007a16:	4809      	ldr	r0, [pc, #36]	@ (8007a3c <SX1276SetAntSw+0x40>)
 8007a18:	f7ff f915 	bl	8006c46 <GpioWrite>
    else
    {
        GpioWrite( &AntRx, 1 );
        GpioWrite( &AntTx, 0 );
    }
}
 8007a1c:	e007      	b.n	8007a2e <SX1276SetAntSw+0x32>
        GpioWrite( &AntRx, 1 );
 8007a1e:	2101      	movs	r1, #1
 8007a20:	4805      	ldr	r0, [pc, #20]	@ (8007a38 <SX1276SetAntSw+0x3c>)
 8007a22:	f7ff f910 	bl	8006c46 <GpioWrite>
        GpioWrite( &AntTx, 0 );
 8007a26:	2100      	movs	r1, #0
 8007a28:	4804      	ldr	r0, [pc, #16]	@ (8007a3c <SX1276SetAntSw+0x40>)
 8007a2a:	f7ff f90c 	bl	8006c46 <GpioWrite>
}
 8007a2e:	bf00      	nop
 8007a30:	3708      	adds	r7, #8
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	20000300 	.word	0x20000300
 8007a3c:	2000030c 	.word	0x2000030c

08007a40 <SX1276CheckRfFrequency>:

bool SX1276CheckRfFrequency( uint32_t frequency )
{
 8007a40:	b480      	push	{r7}
 8007a42:	b083      	sub	sp, #12
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
    // Implement check. Currently all frequencies are supported
    return true;
 8007a48:	2301      	movs	r3, #1
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	370c      	adds	r7, #12
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr

08007a56 <TimerInit>:
 * \retval value current timer value
 */
TimerTime_t TimerGetValue( void );

void TimerInit( TimerEvent_t *obj, void ( *callback )( void ) )
{
 8007a56:	b480      	push	{r7}
 8007a58:	b083      	sub	sp, #12
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
 8007a5e:	6039      	str	r1, [r7, #0]
    obj->Timestamp = 0;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	601a      	str	r2, [r3, #0]
    obj->ReloadValue = 0;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	605a      	str	r2, [r3, #4]
    obj->IsRunning = false;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	721a      	strb	r2, [r3, #8]
    obj->Callback = callback;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	683a      	ldr	r2, [r7, #0]
 8007a76:	60da      	str	r2, [r3, #12]
    obj->Next = NULL;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	611a      	str	r2, [r3, #16]
}
 8007a7e:	bf00      	nop
 8007a80:	370c      	adds	r7, #12
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr
	...

08007a8c <TimerStart>:

void TimerStart( TimerEvent_t *obj )
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b084      	sub	sp, #16
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
    uint32_t elapsedTime = 0;
 8007a94:	2300      	movs	r3, #0
 8007a96:	60fb      	str	r3, [r7, #12]
    uint32_t remainingTime = 0;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 8007a9c:	b672      	cpsid	i
}
 8007a9e:	bf00      	nop

    __disable_irq( );

    if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d005      	beq.n	8007ab2 <TimerStart+0x26>
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 f9d8 	bl	8007e5c <TimerExists>
 8007aac:	4603      	mov	r3, r0
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d002      	beq.n	8007ab8 <TimerStart+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
 8007ab2:	b662      	cpsie	i
}
 8007ab4:	bf00      	nop
    {
        __enable_irq( );
        return;
 8007ab6:	e03e      	b.n	8007b36 <TimerStart+0xaa>
    }

    obj->Timestamp = obj->ReloadValue;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	685a      	ldr	r2, [r3, #4]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	601a      	str	r2, [r3, #0]
    obj->IsRunning = false;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	721a      	strb	r2, [r3, #8]

    if( TimerListHead == NULL )
 8007ac6:	4b1d      	ldr	r3, [pc, #116]	@ (8007b3c <TimerStart+0xb0>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d106      	bne.n	8007adc <TimerStart+0x50>
    {
        TimerInsertNewHeadTimer( obj, obj->Timestamp );
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 f8a1 	bl	8007c1c <TimerInsertNewHeadTimer>
 8007ada:	e02a      	b.n	8007b32 <TimerStart+0xa6>
    }
    else
    {
        if( TimerListHead->IsRunning == true )
 8007adc:	4b17      	ldr	r3, [pc, #92]	@ (8007b3c <TimerStart+0xb0>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	7a1b      	ldrb	r3, [r3, #8]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d013      	beq.n	8007b0e <TimerStart+0x82>
        {
            elapsedTime = TimerGetValue( );
 8007ae6:	f000 f9e9 	bl	8007ebc <TimerGetValue>
 8007aea:	60f8      	str	r0, [r7, #12]
            if( elapsedTime > TimerListHead->Timestamp )
 8007aec:	4b13      	ldr	r3, [pc, #76]	@ (8007b3c <TimerStart+0xb0>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	68fa      	ldr	r2, [r7, #12]
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d903      	bls.n	8007b00 <TimerStart+0x74>
            {
                elapsedTime = TimerListHead->Timestamp; // security but should never occur
 8007af8:	4b10      	ldr	r3, [pc, #64]	@ (8007b3c <TimerStart+0xb0>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	60fb      	str	r3, [r7, #12]
            }
            remainingTime = TimerListHead->Timestamp - elapsedTime;
 8007b00:	4b0e      	ldr	r3, [pc, #56]	@ (8007b3c <TimerStart+0xb0>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	681a      	ldr	r2, [r3, #0]
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	1ad3      	subs	r3, r2, r3
 8007b0a:	60bb      	str	r3, [r7, #8]
 8007b0c:	e003      	b.n	8007b16 <TimerStart+0x8a>
        }
        else
        {
            remainingTime = TimerListHead->Timestamp;
 8007b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8007b3c <TimerStart+0xb0>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	60bb      	str	r3, [r7, #8]
        }

        if( obj->Timestamp < remainingTime )
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	68ba      	ldr	r2, [r7, #8]
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d904      	bls.n	8007b2a <TimerStart+0x9e>
        {
            TimerInsertNewHeadTimer( obj, remainingTime );
 8007b20:	68b9      	ldr	r1, [r7, #8]
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 f87a 	bl	8007c1c <TimerInsertNewHeadTimer>
 8007b28:	e003      	b.n	8007b32 <TimerStart+0xa6>
        }
        else
        {
             TimerInsertTimer( obj, remainingTime );
 8007b2a:	68b9      	ldr	r1, [r7, #8]
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 f807 	bl	8007b40 <TimerInsertTimer>
  __ASM volatile ("cpsie i" : : : "memory");
 8007b32:	b662      	cpsie	i
}
 8007b34:	bf00      	nop
        }
    }
    __enable_irq( );
}
 8007b36:	3710      	adds	r7, #16
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}
 8007b3c:	2000031c 	.word	0x2000031c

08007b40 <TimerInsertTimer>:

static void TimerInsertTimer( TimerEvent_t *obj, uint32_t remainingTime )
{
 8007b40:	b480      	push	{r7}
 8007b42:	b087      	sub	sp, #28
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	6039      	str	r1, [r7, #0]
    uint32_t aggregatedTimestamp = 0;      // hold the sum of timestamps
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	617b      	str	r3, [r7, #20]
    uint32_t aggregatedTimestampNext = 0;  // hold the sum of timestamps up to the next event
 8007b4e:	2300      	movs	r3, #0
 8007b50:	613b      	str	r3, [r7, #16]

    TimerEvent_t* prev = TimerListHead;
 8007b52:	4b31      	ldr	r3, [pc, #196]	@ (8007c18 <TimerInsertTimer+0xd8>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	60fb      	str	r3, [r7, #12]
    TimerEvent_t* cur = TimerListHead->Next;
 8007b58:	4b2f      	ldr	r3, [pc, #188]	@ (8007c18 <TimerInsertTimer+0xd8>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	691b      	ldr	r3, [r3, #16]
 8007b5e:	60bb      	str	r3, [r7, #8]

    if( cur == NULL )
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d10c      	bne.n	8007b80 <TimerInsertTimer+0x40>
    { // obj comes just after the head
        obj->Timestamp -= remainingTime;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	1ad2      	subs	r2, r2, r3
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	601a      	str	r2, [r3, #0]
        prev->Next = obj;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	611a      	str	r2, [r3, #16]
        obj->Next = NULL;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	611a      	str	r2, [r3, #16]
                    aggregatedTimestampNext = aggregatedTimestampNext + cur->Timestamp;
                }
            }
        }
    }
}
 8007b7e:	e045      	b.n	8007c0c <TimerInsertTimer+0xcc>
        aggregatedTimestamp = remainingTime;
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	617b      	str	r3, [r7, #20]
        aggregatedTimestampNext = remainingTime + cur->Timestamp;
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	683a      	ldr	r2, [r7, #0]
 8007b8a:	4413      	add	r3, r2
 8007b8c:	613b      	str	r3, [r7, #16]
        while( prev != NULL )
 8007b8e:	e039      	b.n	8007c04 <TimerInsertTimer+0xc4>
            if( aggregatedTimestampNext > obj->Timestamp )
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	693a      	ldr	r2, [r7, #16]
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d916      	bls.n	8007bc8 <TimerInsertTimer+0x88>
                obj->Timestamp -= aggregatedTimestamp;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	1ad2      	subs	r2, r2, r3
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	601a      	str	r2, [r3, #0]
                if( cur != NULL )
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d006      	beq.n	8007bba <TimerInsertTimer+0x7a>
                    cur->Timestamp -= obj->Timestamp;
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	1ad2      	subs	r2, r2, r3
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	601a      	str	r2, [r3, #0]
                prev->Next = obj;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	611a      	str	r2, [r3, #16]
                obj->Next = cur;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	68ba      	ldr	r2, [r7, #8]
 8007bc4:	611a      	str	r2, [r3, #16]
                break;
 8007bc6:	e021      	b.n	8007c0c <TimerInsertTimer+0xcc>
                prev = cur;
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	60fb      	str	r3, [r7, #12]
                cur = cur->Next;
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	691b      	ldr	r3, [r3, #16]
 8007bd0:	60bb      	str	r3, [r7, #8]
                if( cur == NULL )
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d10e      	bne.n	8007bf6 <TimerInsertTimer+0xb6>
                    aggregatedTimestamp = aggregatedTimestampNext;
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	617b      	str	r3, [r7, #20]
                    obj->Timestamp -= aggregatedTimestamp;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	1ad2      	subs	r2, r2, r3
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	601a      	str	r2, [r3, #0]
                    prev->Next = obj;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	687a      	ldr	r2, [r7, #4]
 8007bec:	611a      	str	r2, [r3, #16]
                    obj->Next = NULL;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	611a      	str	r2, [r3, #16]
                    break;
 8007bf4:	e00a      	b.n	8007c0c <TimerInsertTimer+0xcc>
                    aggregatedTimestamp = aggregatedTimestampNext;
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	617b      	str	r3, [r7, #20]
                    aggregatedTimestampNext = aggregatedTimestampNext + cur->Timestamp;
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	693a      	ldr	r2, [r7, #16]
 8007c00:	4413      	add	r3, r2
 8007c02:	613b      	str	r3, [r7, #16]
        while( prev != NULL )
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d1c2      	bne.n	8007b90 <TimerInsertTimer+0x50>
}
 8007c0a:	e7ff      	b.n	8007c0c <TimerInsertTimer+0xcc>
 8007c0c:	bf00      	nop
 8007c0e:	371c      	adds	r7, #28
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr
 8007c18:	2000031c 	.word	0x2000031c

08007c1c <TimerInsertNewHeadTimer>:

static void TimerInsertNewHeadTimer( TimerEvent_t *obj, uint32_t remainingTime )
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b084      	sub	sp, #16
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	6039      	str	r1, [r7, #0]
    TimerEvent_t* cur = TimerListHead;
 8007c26:	4b10      	ldr	r3, [pc, #64]	@ (8007c68 <TimerInsertNewHeadTimer+0x4c>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	60fb      	str	r3, [r7, #12]

    if( cur != NULL )
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d008      	beq.n	8007c44 <TimerInsertNewHeadTimer+0x28>
    {
        cur->Timestamp = remainingTime - obj->Timestamp;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	683a      	ldr	r2, [r7, #0]
 8007c38:	1ad2      	subs	r2, r2, r3
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	601a      	str	r2, [r3, #0]
        cur->IsRunning = false;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2200      	movs	r2, #0
 8007c42:	721a      	strb	r2, [r3, #8]
    }

    obj->Next = cur;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	68fa      	ldr	r2, [r7, #12]
 8007c48:	611a      	str	r2, [r3, #16]
    obj->IsRunning = true;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	721a      	strb	r2, [r3, #8]
    TimerListHead = obj;
 8007c50:	4a05      	ldr	r2, [pc, #20]	@ (8007c68 <TimerInsertNewHeadTimer+0x4c>)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6013      	str	r3, [r2, #0]
    TimerSetTimeout( TimerListHead );
 8007c56:	4b04      	ldr	r3, [pc, #16]	@ (8007c68 <TimerInsertNewHeadTimer+0x4c>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f000 f936 	bl	8007ecc <TimerSetTimeout>
}
 8007c60:	bf00      	nop
 8007c62:	3710      	adds	r7, #16
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}
 8007c68:	2000031c 	.word	0x2000031c

08007c6c <TimerIrqHandler>:

void TimerIrqHandler( void )
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b082      	sub	sp, #8
 8007c70:	af00      	add	r7, sp, #0
    uint32_t elapsedTime = 0;
 8007c72:	2300      	movs	r3, #0
 8007c74:	607b      	str	r3, [r7, #4]

    elapsedTime = TimerGetValue( );
 8007c76:	f000 f921 	bl	8007ebc <TimerGetValue>
 8007c7a:	6078      	str	r0, [r7, #4]
    
    if (TimerListHead == NULL)  // PK: this is just a workaround to avoid HardFault error caused by null-pointer (it is cleared earlier for an unknown reason)
 8007c7c:	4b26      	ldr	r3, [pc, #152]	@ (8007d18 <TimerIrqHandler+0xac>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d045      	beq.n	8007d10 <TimerIrqHandler+0xa4>
    	return;

    if( elapsedTime >= TimerListHead->Timestamp )
 8007c84:	4b24      	ldr	r3, [pc, #144]	@ (8007d18 <TimerIrqHandler+0xac>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d304      	bcc.n	8007c9a <TimerIrqHandler+0x2e>
    {
        TimerListHead->Timestamp = 0;
 8007c90:	4b21      	ldr	r3, [pc, #132]	@ (8007d18 <TimerIrqHandler+0xac>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	2200      	movs	r2, #0
 8007c96:	601a      	str	r2, [r3, #0]
 8007c98:	e007      	b.n	8007caa <TimerIrqHandler+0x3e>
    }
    else
    {
        TimerListHead->Timestamp -= elapsedTime;
 8007c9a:	4b1f      	ldr	r3, [pc, #124]	@ (8007d18 <TimerIrqHandler+0xac>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	6819      	ldr	r1, [r3, #0]
 8007ca0:	4b1d      	ldr	r3, [pc, #116]	@ (8007d18 <TimerIrqHandler+0xac>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	1a8a      	subs	r2, r1, r2
 8007ca8:	601a      	str	r2, [r3, #0]
    }

    TimerListHead->IsRunning = false;
 8007caa:	4b1b      	ldr	r3, [pc, #108]	@ (8007d18 <TimerIrqHandler+0xac>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	721a      	strb	r2, [r3, #8]

    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp == 0 ) )
 8007cb2:	e00e      	b.n	8007cd2 <TimerIrqHandler+0x66>
    {
        TimerEvent_t* elapsedTimer = TimerListHead;
 8007cb4:	4b18      	ldr	r3, [pc, #96]	@ (8007d18 <TimerIrqHandler+0xac>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	603b      	str	r3, [r7, #0]
        TimerListHead = TimerListHead->Next;
 8007cba:	4b17      	ldr	r3, [pc, #92]	@ (8007d18 <TimerIrqHandler+0xac>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	691b      	ldr	r3, [r3, #16]
 8007cc0:	4a15      	ldr	r2, [pc, #84]	@ (8007d18 <TimerIrqHandler+0xac>)
 8007cc2:	6013      	str	r3, [r2, #0]

        if( elapsedTimer->Callback != NULL )
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	68db      	ldr	r3, [r3, #12]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d002      	beq.n	8007cd2 <TimerIrqHandler+0x66>
        {
            elapsedTimer->Callback( );
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	68db      	ldr	r3, [r3, #12]
 8007cd0:	4798      	blx	r3
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp == 0 ) )
 8007cd2:	4b11      	ldr	r3, [pc, #68]	@ (8007d18 <TimerIrqHandler+0xac>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d004      	beq.n	8007ce4 <TimerIrqHandler+0x78>
 8007cda:	4b0f      	ldr	r3, [pc, #60]	@ (8007d18 <TimerIrqHandler+0xac>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d0e7      	beq.n	8007cb4 <TimerIrqHandler+0x48>
        }
    }

    // start the next TimerListHead if it exists
    if( TimerListHead != NULL )
 8007ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8007d18 <TimerIrqHandler+0xac>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d012      	beq.n	8007d12 <TimerIrqHandler+0xa6>
    {
        if( TimerListHead->IsRunning != true )
 8007cec:	4b0a      	ldr	r3, [pc, #40]	@ (8007d18 <TimerIrqHandler+0xac>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	7a1b      	ldrb	r3, [r3, #8]
 8007cf2:	f083 0301 	eor.w	r3, r3, #1
 8007cf6:	b2db      	uxtb	r3, r3
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d00a      	beq.n	8007d12 <TimerIrqHandler+0xa6>
        {
            TimerListHead->IsRunning = true;
 8007cfc:	4b06      	ldr	r3, [pc, #24]	@ (8007d18 <TimerIrqHandler+0xac>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	2201      	movs	r2, #1
 8007d02:	721a      	strb	r2, [r3, #8]
            TimerSetTimeout( TimerListHead );
 8007d04:	4b04      	ldr	r3, [pc, #16]	@ (8007d18 <TimerIrqHandler+0xac>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f000 f8df 	bl	8007ecc <TimerSetTimeout>
 8007d0e:	e000      	b.n	8007d12 <TimerIrqHandler+0xa6>
    	return;
 8007d10:	bf00      	nop
        }
    }
}
 8007d12:	3708      	adds	r7, #8
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}
 8007d18:	2000031c 	.word	0x2000031c

08007d1c <TimerStop>:

void TimerStop( TimerEvent_t *obj )
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b086      	sub	sp, #24
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8007d24:	b672      	cpsid	i
}
 8007d26:	bf00      	nop
    __disable_irq( );

    uint32_t elapsedTime = 0;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	617b      	str	r3, [r7, #20]
    uint32_t remainingTime = 0;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	60bb      	str	r3, [r7, #8]

    TimerEvent_t* prev = TimerListHead;
 8007d30:	4b49      	ldr	r3, [pc, #292]	@ (8007e58 <TimerStop+0x13c>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	613b      	str	r3, [r7, #16]
    TimerEvent_t* cur = TimerListHead;
 8007d36:	4b48      	ldr	r3, [pc, #288]	@ (8007e58 <TimerStop+0x13c>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	60fb      	str	r3, [r7, #12]

    // List is empty or the Obj to stop does not exist
    if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 8007d3c:	4b46      	ldr	r3, [pc, #280]	@ (8007e58 <TimerStop+0x13c>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d002      	beq.n	8007d4a <TimerStop+0x2e>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d102      	bne.n	8007d50 <TimerStop+0x34>
  __ASM volatile ("cpsie i" : : : "memory");
 8007d4a:	b662      	cpsie	i
}
 8007d4c:	bf00      	nop
    {
        __enable_irq( );
        return;
 8007d4e:	e080      	b.n	8007e52 <TimerStop+0x136>
    }

    if( TimerListHead == obj ) // Stop the Head
 8007d50:	4b41      	ldr	r3, [pc, #260]	@ (8007e58 <TimerStop+0x13c>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	429a      	cmp	r2, r3
 8007d58:	d152      	bne.n	8007e00 <TimerStop+0xe4>
    {
        if( TimerListHead->IsRunning == true ) // The head is already running
 8007d5a:	4b3f      	ldr	r3, [pc, #252]	@ (8007e58 <TimerStop+0x13c>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	7a1b      	ldrb	r3, [r3, #8]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d033      	beq.n	8007dcc <TimerStop+0xb0>
        {
            elapsedTime = TimerGetValue( );
 8007d64:	f000 f8aa 	bl	8007ebc <TimerGetValue>
 8007d68:	6178      	str	r0, [r7, #20]
            if( elapsedTime > obj->Timestamp )
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	697a      	ldr	r2, [r7, #20]
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d902      	bls.n	8007d7a <TimerStop+0x5e>
            {
                elapsedTime = obj->Timestamp;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	617b      	str	r3, [r7, #20]
            }

            remainingTime = obj->Timestamp - elapsedTime;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	1ad3      	subs	r3, r2, r3
 8007d82:	60bb      	str	r3, [r7, #8]

            if( TimerListHead->Next != NULL )
 8007d84:	4b34      	ldr	r3, [pc, #208]	@ (8007e58 <TimerStop+0x13c>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	691b      	ldr	r3, [r3, #16]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d01a      	beq.n	8007dc4 <TimerStop+0xa8>
            {
                TimerListHead->IsRunning = false;
 8007d8e:	4b32      	ldr	r3, [pc, #200]	@ (8007e58 <TimerStop+0x13c>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	2200      	movs	r2, #0
 8007d94:	721a      	strb	r2, [r3, #8]
                TimerListHead = TimerListHead->Next;
 8007d96:	4b30      	ldr	r3, [pc, #192]	@ (8007e58 <TimerStop+0x13c>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	691b      	ldr	r3, [r3, #16]
 8007d9c:	4a2e      	ldr	r2, [pc, #184]	@ (8007e58 <TimerStop+0x13c>)
 8007d9e:	6013      	str	r3, [r2, #0]
                TimerListHead->Timestamp += remainingTime;
 8007da0:	4b2d      	ldr	r3, [pc, #180]	@ (8007e58 <TimerStop+0x13c>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	6819      	ldr	r1, [r3, #0]
 8007da6:	4b2c      	ldr	r3, [pc, #176]	@ (8007e58 <TimerStop+0x13c>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	68ba      	ldr	r2, [r7, #8]
 8007dac:	440a      	add	r2, r1
 8007dae:	601a      	str	r2, [r3, #0]
                TimerListHead->IsRunning = true;
 8007db0:	4b29      	ldr	r3, [pc, #164]	@ (8007e58 <TimerStop+0x13c>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	2201      	movs	r2, #1
 8007db6:	721a      	strb	r2, [r3, #8]
                TimerSetTimeout( TimerListHead );
 8007db8:	4b27      	ldr	r3, [pc, #156]	@ (8007e58 <TimerStop+0x13c>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f000 f885 	bl	8007ecc <TimerSetTimeout>
 8007dc2:	e044      	b.n	8007e4e <TimerStop+0x132>
            }
            else
            {
                TimerListHead = NULL;
 8007dc4:	4b24      	ldr	r3, [pc, #144]	@ (8007e58 <TimerStop+0x13c>)
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	601a      	str	r2, [r3, #0]
 8007dca:	e040      	b.n	8007e4e <TimerStop+0x132>
            }
        }
        else // Stop the head before it is started
        {
            if( TimerListHead->Next != NULL )
 8007dcc:	4b22      	ldr	r3, [pc, #136]	@ (8007e58 <TimerStop+0x13c>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	691b      	ldr	r3, [r3, #16]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d010      	beq.n	8007df8 <TimerStop+0xdc>
            {
                remainingTime = obj->Timestamp;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	60bb      	str	r3, [r7, #8]
                TimerListHead = TimerListHead->Next;
 8007ddc:	4b1e      	ldr	r3, [pc, #120]	@ (8007e58 <TimerStop+0x13c>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	691b      	ldr	r3, [r3, #16]
 8007de2:	4a1d      	ldr	r2, [pc, #116]	@ (8007e58 <TimerStop+0x13c>)
 8007de4:	6013      	str	r3, [r2, #0]
                TimerListHead->Timestamp += remainingTime;
 8007de6:	4b1c      	ldr	r3, [pc, #112]	@ (8007e58 <TimerStop+0x13c>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	6819      	ldr	r1, [r3, #0]
 8007dec:	4b1a      	ldr	r3, [pc, #104]	@ (8007e58 <TimerStop+0x13c>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	68ba      	ldr	r2, [r7, #8]
 8007df2:	440a      	add	r2, r1
 8007df4:	601a      	str	r2, [r3, #0]
 8007df6:	e02a      	b.n	8007e4e <TimerStop+0x132>
            }
            else
            {
                TimerListHead = NULL;
 8007df8:	4b17      	ldr	r3, [pc, #92]	@ (8007e58 <TimerStop+0x13c>)
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	601a      	str	r2, [r3, #0]
 8007dfe:	e026      	b.n	8007e4e <TimerStop+0x132>
            }
        }
    }
    else // Stop an object within the list
    {
        remainingTime = obj->Timestamp;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	60bb      	str	r3, [r7, #8]

        while( cur != NULL )
 8007e06:	e01f      	b.n	8007e48 <TimerStop+0x12c>
        {
            if( cur == obj )
 8007e08:	68fa      	ldr	r2, [r7, #12]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d116      	bne.n	8007e3e <TimerStop+0x122>
            {
                if( cur->Next != NULL )
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	691b      	ldr	r3, [r3, #16]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d00c      	beq.n	8007e32 <TimerStop+0x116>
                {
                    cur = cur->Next;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	691b      	ldr	r3, [r3, #16]
 8007e1c:	60fb      	str	r3, [r7, #12]
                    prev->Next = cur;
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	68fa      	ldr	r2, [r7, #12]
 8007e22:	611a      	str	r2, [r3, #16]
                    cur->Timestamp += remainingTime;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	441a      	add	r2, r3
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	601a      	str	r2, [r3, #0]
                else
                {
                    cur = NULL;
                    prev->Next = cur;
                }
                break;
 8007e30:	e00d      	b.n	8007e4e <TimerStop+0x132>
                    cur = NULL;
 8007e32:	2300      	movs	r3, #0
 8007e34:	60fb      	str	r3, [r7, #12]
                    prev->Next = cur;
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	68fa      	ldr	r2, [r7, #12]
 8007e3a:	611a      	str	r2, [r3, #16]
                break;
 8007e3c:	e007      	b.n	8007e4e <TimerStop+0x132>
            }
            else
            {
                prev = cur;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	613b      	str	r3, [r7, #16]
                cur = cur->Next;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	691b      	ldr	r3, [r3, #16]
 8007e46:	60fb      	str	r3, [r7, #12]
        while( cur != NULL )
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d1dc      	bne.n	8007e08 <TimerStop+0xec>
  __ASM volatile ("cpsie i" : : : "memory");
 8007e4e:	b662      	cpsie	i
}
 8007e50:	bf00      	nop
            }
        }
    }
    __enable_irq( );
}
 8007e52:	3718      	adds	r7, #24
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}
 8007e58:	2000031c 	.word	0x2000031c

08007e5c <TimerExists>:

static bool TimerExists( TimerEvent_t *obj )
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b085      	sub	sp, #20
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
    TimerEvent_t* cur = TimerListHead;
 8007e64:	4b0b      	ldr	r3, [pc, #44]	@ (8007e94 <TimerExists+0x38>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	60fb      	str	r3, [r7, #12]

    while( cur != NULL )
 8007e6a:	e008      	b.n	8007e7e <TimerExists+0x22>
    {
        if( cur == obj )
 8007e6c:	68fa      	ldr	r2, [r7, #12]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	429a      	cmp	r2, r3
 8007e72:	d101      	bne.n	8007e78 <TimerExists+0x1c>
        {
            return true;
 8007e74:	2301      	movs	r3, #1
 8007e76:	e006      	b.n	8007e86 <TimerExists+0x2a>
        }
        cur = cur->Next;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	691b      	ldr	r3, [r3, #16]
 8007e7c:	60fb      	str	r3, [r7, #12]
    while( cur != NULL )
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d1f3      	bne.n	8007e6c <TimerExists+0x10>
    }
    return false;
 8007e84:	2300      	movs	r3, #0
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3714      	adds	r7, #20
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr
 8007e92:	bf00      	nop
 8007e94:	2000031c 	.word	0x2000031c

08007e98 <TimerSetValue>:
    TimerStop( obj );
    TimerStart( obj );
}

void TimerSetValue( TimerEvent_t *obj, uint32_t value )
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b082      	sub	sp, #8
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	6039      	str	r1, [r7, #0]
    TimerStop( obj );
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f7ff ff3a 	bl	8007d1c <TimerStop>
    obj->Timestamp = value;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	683a      	ldr	r2, [r7, #0]
 8007eac:	601a      	str	r2, [r3, #0]
    obj->ReloadValue = value;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	683a      	ldr	r2, [r7, #0]
 8007eb2:	605a      	str	r2, [r3, #4]
}
 8007eb4:	bf00      	nop
 8007eb6:	3708      	adds	r7, #8
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <TimerGetValue>:

TimerTime_t TimerGetValue( void )
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	af00      	add	r7, sp, #0
    return RtcGetElapsedAlarmTime( );
 8007ec0:	f7fe ff7e 	bl	8006dc0 <RtcGetElapsedAlarmTime>
 8007ec4:	4603      	mov	r3, r0
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	bd80      	pop	{r7, pc}
	...

08007ecc <TimerSetTimeout>:
{
    return RtcComputeFutureEventTime( eventInFuture );
}

static void TimerSetTimeout( TimerEvent_t *obj )
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b082      	sub	sp, #8
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
    HasLoopedThroughMain = 0;
 8007ed4:	4b09      	ldr	r3, [pc, #36]	@ (8007efc <TimerSetTimeout+0x30>)
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	701a      	strb	r2, [r3, #0]
    obj->Timestamp = RtcGetAdjustedTimeoutValue( obj->Timestamp ); 
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f7fe ff36 	bl	8006d50 <RtcGetAdjustedTimeoutValue>
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	601a      	str	r2, [r3, #0]
    RtcSetTimeout( obj->Timestamp );
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f7fe ff22 	bl	8006d38 <RtcSetTimeout>
}
 8007ef4:	bf00      	nop
 8007ef6:	3708      	adds	r7, #8
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}
 8007efc:	20000318 	.word	0x20000318

08007f00 <memcpy1>:
{
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
}

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8007f00:	b480      	push	{r7}
 8007f02:	b085      	sub	sp, #20
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	60f8      	str	r0, [r7, #12]
 8007f08:	60b9      	str	r1, [r7, #8]
 8007f0a:	4613      	mov	r3, r2
 8007f0c:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8007f0e:	e007      	b.n	8007f20 <memcpy1+0x20>
    {
        *dst++ = *src++;
 8007f10:	68ba      	ldr	r2, [r7, #8]
 8007f12:	1c53      	adds	r3, r2, #1
 8007f14:	60bb      	str	r3, [r7, #8]
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	1c59      	adds	r1, r3, #1
 8007f1a:	60f9      	str	r1, [r7, #12]
 8007f1c:	7812      	ldrb	r2, [r2, #0]
 8007f1e:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8007f20:	88fb      	ldrh	r3, [r7, #6]
 8007f22:	1e5a      	subs	r2, r3, #1
 8007f24:	80fa      	strh	r2, [r7, #6]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d1f2      	bne.n	8007f10 <memcpy1+0x10>
    }
}
 8007f2a:	bf00      	nop
 8007f2c:	bf00      	nop
 8007f2e:	3714      	adds	r7, #20
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr

08007f38 <SX1276Init>:
/*
 * Radio driver functions implementation
 */

void SX1276Init( RadioEvents_t *events )
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b084      	sub	sp, #16
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
    uint8_t i;

    RadioEvents = events;
 8007f40:	4a24      	ldr	r2, [pc, #144]	@ (8007fd4 <SX1276Init+0x9c>)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6013      	str	r3, [r2, #0]

    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 8007f46:	4924      	ldr	r1, [pc, #144]	@ (8007fd8 <SX1276Init+0xa0>)
 8007f48:	4824      	ldr	r0, [pc, #144]	@ (8007fdc <SX1276Init+0xa4>)
 8007f4a:	f7ff fd84 	bl	8007a56 <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 8007f4e:	4922      	ldr	r1, [pc, #136]	@ (8007fd8 <SX1276Init+0xa0>)
 8007f50:	4823      	ldr	r0, [pc, #140]	@ (8007fe0 <SX1276Init+0xa8>)
 8007f52:	f7ff fd80 	bl	8007a56 <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 8007f56:	4920      	ldr	r1, [pc, #128]	@ (8007fd8 <SX1276Init+0xa0>)
 8007f58:	4822      	ldr	r0, [pc, #136]	@ (8007fe4 <SX1276Init+0xac>)
 8007f5a:	f7ff fd7c 	bl	8007a56 <TimerInit>

    SX1276Reset( );
 8007f5e:	f001 fb75 	bl	800964c <SX1276Reset>

    RxChainCalibration( );
 8007f62:	f000 f8e5 	bl	8008130 <RxChainCalibration>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 8007f66:	2000      	movs	r0, #0
 8007f68:	f001 fb92 	bl	8009690 <SX1276SetOpMode>

    SX1276IoIrqInit( DioIrq );
 8007f6c:	481e      	ldr	r0, [pc, #120]	@ (8007fe8 <SX1276Init+0xb0>)
 8007f6e:	f7ff fc9b 	bl	80078a8 <SX1276IoIrqInit>

    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8007f72:	2300      	movs	r3, #0
 8007f74:	73fb      	strb	r3, [r7, #15]
 8007f76:	e01f      	b.n	8007fb8 <SX1276Init+0x80>
    {
        SX1276SetModem( RadioRegsInit[i].Modem );
 8007f78:	7bfa      	ldrb	r2, [r7, #15]
 8007f7a:	491c      	ldr	r1, [pc, #112]	@ (8007fec <SX1276Init+0xb4>)
 8007f7c:	4613      	mov	r3, r2
 8007f7e:	005b      	lsls	r3, r3, #1
 8007f80:	4413      	add	r3, r2
 8007f82:	440b      	add	r3, r1
 8007f84:	781b      	ldrb	r3, [r3, #0]
 8007f86:	4618      	mov	r0, r3
 8007f88:	f001 fbb0 	bl	80096ec <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8007f8c:	7bfa      	ldrb	r2, [r7, #15]
 8007f8e:	4917      	ldr	r1, [pc, #92]	@ (8007fec <SX1276Init+0xb4>)
 8007f90:	4613      	mov	r3, r2
 8007f92:	005b      	lsls	r3, r3, #1
 8007f94:	4413      	add	r3, r2
 8007f96:	440b      	add	r3, r1
 8007f98:	3301      	adds	r3, #1
 8007f9a:	7818      	ldrb	r0, [r3, #0]
 8007f9c:	7bfa      	ldrb	r2, [r7, #15]
 8007f9e:	4913      	ldr	r1, [pc, #76]	@ (8007fec <SX1276Init+0xb4>)
 8007fa0:	4613      	mov	r3, r2
 8007fa2:	005b      	lsls	r3, r3, #1
 8007fa4:	4413      	add	r3, r2
 8007fa6:	440b      	add	r3, r1
 8007fa8:	3302      	adds	r3, #2
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	4619      	mov	r1, r3
 8007fae:	f001 fbdf 	bl	8009770 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8007fb2:	7bfb      	ldrb	r3, [r7, #15]
 8007fb4:	3301      	adds	r3, #1
 8007fb6:	73fb      	strb	r3, [r7, #15]
 8007fb8:	7bfb      	ldrb	r3, [r7, #15]
 8007fba:	2b10      	cmp	r3, #16
 8007fbc:	d9dc      	bls.n	8007f78 <SX1276Init+0x40>
    }

    SX1276SetModem( MODEM_FSK );
 8007fbe:	2000      	movs	r0, #0
 8007fc0:	f001 fb94 	bl	80096ec <SX1276SetModem>

    SX1276.Settings.State = RF_IDLE;
 8007fc4:	4b0a      	ldr	r3, [pc, #40]	@ (8007ff0 <SX1276Init+0xb8>)
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
}
 8007fcc:	bf00      	nop
 8007fce:	3710      	adds	r7, #16
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}
 8007fd4:	20000320 	.word	0x20000320
 8007fd8:	08009921 	.word	0x08009921
 8007fdc:	20000594 	.word	0x20000594
 8007fe0:	200005a8 	.word	0x200005a8
 8007fe4:	200005bc 	.word	0x200005bc
 8007fe8:	20000028 	.word	0x20000028
 8007fec:	0800bab8 	.word	0x0800bab8
 8007ff0:	20000424 	.word	0x20000424

08007ff4 <SX1276GetStatus>:

RadioState_t SX1276GetStatus( void )
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	af00      	add	r7, sp, #0
    return SX1276.Settings.State;
 8007ff8:	4b03      	ldr	r3, [pc, #12]	@ (8008008 <SX1276GetStatus+0x14>)
 8007ffa:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr
 8008008:	20000424 	.word	0x20000424
 800800c:	00000000 	.word	0x00000000

08008010 <SX1276SetChannel>:

void SX1276SetChannel( uint32_t freq )
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b082      	sub	sp, #8
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
    SX1276.Settings.Channel = freq;
 8008018:	4a17      	ldr	r2, [pc, #92]	@ (8008078 <SX1276SetChannel+0x68>)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f8c2 3118 	str.w	r3, [r2, #280]	@ 0x118
    freq = ( uint32_t )( ( double )freq / ( double )FREQ_STEP );
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f7f8 fa73 	bl	800050c <__aeabi_ui2d>
 8008026:	a312      	add	r3, pc, #72	@ (adr r3, 8008070 <SX1276SetChannel+0x60>)
 8008028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800802c:	f7f8 fc12 	bl	8000854 <__aeabi_ddiv>
 8008030:	4602      	mov	r2, r0
 8008032:	460b      	mov	r3, r1
 8008034:	4610      	mov	r0, r2
 8008036:	4619      	mov	r1, r3
 8008038:	f7f8 fda4 	bl	8000b84 <__aeabi_d2uiz>
 800803c:	4603      	mov	r3, r0
 800803e:	607b      	str	r3, [r7, #4]
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freq >> 16 ) & 0xFF ) );
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	0c1b      	lsrs	r3, r3, #16
 8008044:	b2db      	uxtb	r3, r3
 8008046:	4619      	mov	r1, r3
 8008048:	2006      	movs	r0, #6
 800804a:	f001 fb91 	bl	8009770 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( freq >> 8 ) & 0xFF ) );
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	0a1b      	lsrs	r3, r3, #8
 8008052:	b2db      	uxtb	r3, r3
 8008054:	4619      	mov	r1, r3
 8008056:	2007      	movs	r0, #7
 8008058:	f001 fb8a 	bl	8009770 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( freq & 0xFF ) );
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	b2db      	uxtb	r3, r3
 8008060:	4619      	mov	r1, r3
 8008062:	2008      	movs	r0, #8
 8008064:	f001 fb84 	bl	8009770 <SX1276Write>
}
 8008068:	bf00      	nop
 800806a:	3708      	adds	r7, #8
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}
 8008070:	00000000 	.word	0x00000000
 8008074:	404e8480 	.word	0x404e8480
 8008078:	20000424 	.word	0x20000424

0800807c <SX1276IsChannelFree>:

bool SX1276IsChannelFree( RadioModems_t modem, uint32_t freq, int16_t rssiThresh )
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b084      	sub	sp, #16
 8008080:	af00      	add	r7, sp, #0
 8008082:	4603      	mov	r3, r0
 8008084:	6039      	str	r1, [r7, #0]
 8008086:	71fb      	strb	r3, [r7, #7]
 8008088:	4613      	mov	r3, r2
 800808a:	80bb      	strh	r3, [r7, #4]
    int16_t rssi = 0;
 800808c:	2300      	movs	r3, #0
 800808e:	81fb      	strh	r3, [r7, #14]

    SX1276SetModem( modem );
 8008090:	79fb      	ldrb	r3, [r7, #7]
 8008092:	4618      	mov	r0, r3
 8008094:	f001 fb2a 	bl	80096ec <SX1276SetModem>

    SX1276SetChannel( freq );
 8008098:	6838      	ldr	r0, [r7, #0]
 800809a:	f7ff ffb9 	bl	8008010 <SX1276SetChannel>

    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 800809e:	2005      	movs	r0, #5
 80080a0:	f001 faf6 	bl	8009690 <SX1276SetOpMode>

    DelayMs( 1 );
 80080a4:	2001      	movs	r0, #1
 80080a6:	f7fe fa81 	bl	80065ac <DelayMs>

    rssi = SX1276ReadRssi( modem );
 80080aa:	79fb      	ldrb	r3, [r7, #7]
 80080ac:	4618      	mov	r0, r3
 80080ae:	f001 fa91 	bl	80095d4 <SX1276ReadRssi>
 80080b2:	4603      	mov	r3, r0
 80080b4:	81fb      	strh	r3, [r7, #14]

    SX1276SetSleep( );
 80080b6:	f000 ff6b 	bl	8008f90 <SX1276SetSleep>

    if( rssi > rssiThresh )
 80080ba:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80080be:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80080c2:	429a      	cmp	r2, r3
 80080c4:	dd01      	ble.n	80080ca <SX1276IsChannelFree+0x4e>
    {
        return false;
 80080c6:	2300      	movs	r3, #0
 80080c8:	e000      	b.n	80080cc <SX1276IsChannelFree+0x50>
    }
    return true;
 80080ca:	2301      	movs	r3, #1
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3710      	adds	r7, #16
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <SX1276Random>:

uint32_t SX1276Random( void )
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b082      	sub	sp, #8
 80080d8:	af00      	add	r7, sp, #0
    uint8_t i;
    uint32_t rnd = 0;
 80080da:	2300      	movs	r3, #0
 80080dc:	603b      	str	r3, [r7, #0]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    SX1276SetModem( MODEM_LORA );
 80080de:	2001      	movs	r0, #1
 80080e0:	f001 fb04 	bl	80096ec <SX1276SetModem>

    // Disable LoRa modem interrupts
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80080e4:	21ff      	movs	r1, #255	@ 0xff
 80080e6:	2011      	movs	r0, #17
 80080e8:	f001 fb42 	bl	8009770 <SX1276Write>
                  RFLR_IRQFLAGS_CADDONE |
                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                  RFLR_IRQFLAGS_CADDETECTED );

    // Set radio in continuous reception
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 80080ec:	2005      	movs	r0, #5
 80080ee:	f001 facf 	bl	8009690 <SX1276SetOpMode>

    for( i = 0; i < 32; i++ )
 80080f2:	2300      	movs	r3, #0
 80080f4:	71fb      	strb	r3, [r7, #7]
 80080f6:	e011      	b.n	800811c <SX1276Random+0x48>
    {
        DelayMs( 1 );
 80080f8:	2001      	movs	r0, #1
 80080fa:	f7fe fa57 	bl	80065ac <DelayMs>
        // Unfiltered RSSI value reading. Only takes the LSB value
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 80080fe:	202c      	movs	r0, #44	@ 0x2c
 8008100:	f001 fb48 	bl	8009794 <SX1276Read>
 8008104:	4603      	mov	r3, r0
 8008106:	f003 0201 	and.w	r2, r3, #1
 800810a:	79fb      	ldrb	r3, [r7, #7]
 800810c:	fa02 f303 	lsl.w	r3, r2, r3
 8008110:	683a      	ldr	r2, [r7, #0]
 8008112:	4313      	orrs	r3, r2
 8008114:	603b      	str	r3, [r7, #0]
    for( i = 0; i < 32; i++ )
 8008116:	79fb      	ldrb	r3, [r7, #7]
 8008118:	3301      	adds	r3, #1
 800811a:	71fb      	strb	r3, [r7, #7]
 800811c:	79fb      	ldrb	r3, [r7, #7]
 800811e:	2b1f      	cmp	r3, #31
 8008120:	d9ea      	bls.n	80080f8 <SX1276Random+0x24>
    }

    SX1276SetSleep( );
 8008122:	f000 ff35 	bl	8008f90 <SX1276SetSleep>

    return rnd;
 8008126:	683b      	ldr	r3, [r7, #0]
}
 8008128:	4618      	mov	r0, r3
 800812a:	3708      	adds	r7, #8
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <RxChainCalibration>:
 * Performs the Rx chain calibration for LF and HF bands
 * \remark Must be called just after the reset so all registers are at their
 *         default values
 */
static void RxChainCalibration( void )
{
 8008130:	b590      	push	{r4, r7, lr}
 8008132:	b083      	sub	sp, #12
 8008134:	af00      	add	r7, sp, #0
    uint8_t regPaConfigInitVal;
    uint32_t initialFreq;

    // Save context
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 8008136:	2009      	movs	r0, #9
 8008138:	f001 fb2c 	bl	8009794 <SX1276Read>
 800813c:	4603      	mov	r3, r0
 800813e:	71fb      	strb	r3, [r7, #7]
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8008140:	2006      	movs	r0, #6
 8008142:	f001 fb27 	bl	8009794 <SX1276Read>
 8008146:	4603      	mov	r3, r0
 8008148:	041c      	lsls	r4, r3, #16
                              ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 800814a:	2007      	movs	r0, #7
 800814c:	f001 fb22 	bl	8009794 <SX1276Read>
 8008150:	4603      	mov	r3, r0
 8008152:	021b      	lsls	r3, r3, #8
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8008154:	431c      	orrs	r4, r3
                              ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) * ( double )FREQ_STEP;
 8008156:	2008      	movs	r0, #8
 8008158:	f001 fb1c 	bl	8009794 <SX1276Read>
 800815c:	4603      	mov	r3, r0
                              ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 800815e:	4323      	orrs	r3, r4
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8008160:	4618      	mov	r0, r3
 8008162:	f7f8 f9d3 	bl	800050c <__aeabi_ui2d>
                              ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) * ( double )FREQ_STEP;
 8008166:	a325      	add	r3, pc, #148	@ (adr r3, 80081fc <RxChainCalibration+0xcc>)
 8008168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800816c:	f7f8 fa48 	bl	8000600 <__aeabi_dmul>
 8008170:	4602      	mov	r2, r0
 8008172:	460b      	mov	r3, r1
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8008174:	4610      	mov	r0, r2
 8008176:	4619      	mov	r1, r3
 8008178:	f7f8 fd04 	bl	8000b84 <__aeabi_d2uiz>
 800817c:	4603      	mov	r3, r0
 800817e:	603b      	str	r3, [r7, #0]

    // Cut the PA just in case, RFO output, power = -1 dBm
    SX1276Write( REG_PACONFIG, 0x00 );
 8008180:	2100      	movs	r1, #0
 8008182:	2009      	movs	r0, #9
 8008184:	f001 faf4 	bl	8009770 <SX1276Write>

    // Launch Rx chain calibration for LF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8008188:	203b      	movs	r0, #59	@ 0x3b
 800818a:	f001 fb03 	bl	8009794 <SX1276Read>
 800818e:	4603      	mov	r3, r0
 8008190:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008194:	b2db      	uxtb	r3, r3
 8008196:	4619      	mov	r1, r3
 8008198:	203b      	movs	r0, #59	@ 0x3b
 800819a:	f001 fae9 	bl	8009770 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 800819e:	bf00      	nop
 80081a0:	203b      	movs	r0, #59	@ 0x3b
 80081a2:	f001 faf7 	bl	8009794 <SX1276Read>
 80081a6:	4603      	mov	r3, r0
 80081a8:	f003 0320 	and.w	r3, r3, #32
 80081ac:	2b20      	cmp	r3, #32
 80081ae:	d0f7      	beq.n	80081a0 <RxChainCalibration+0x70>
    {
    }

    // Sets a Frequency in HF band
    SX1276SetChannel( 868000000 );
 80081b0:	4811      	ldr	r0, [pc, #68]	@ (80081f8 <RxChainCalibration+0xc8>)
 80081b2:	f7ff ff2d 	bl	8008010 <SX1276SetChannel>

    // Launch Rx chain calibration for HF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 80081b6:	203b      	movs	r0, #59	@ 0x3b
 80081b8:	f001 faec 	bl	8009794 <SX1276Read>
 80081bc:	4603      	mov	r3, r0
 80081be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	4619      	mov	r1, r3
 80081c6:	203b      	movs	r0, #59	@ 0x3b
 80081c8:	f001 fad2 	bl	8009770 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 80081cc:	bf00      	nop
 80081ce:	203b      	movs	r0, #59	@ 0x3b
 80081d0:	f001 fae0 	bl	8009794 <SX1276Read>
 80081d4:	4603      	mov	r3, r0
 80081d6:	f003 0320 	and.w	r3, r3, #32
 80081da:	2b20      	cmp	r3, #32
 80081dc:	d0f7      	beq.n	80081ce <RxChainCalibration+0x9e>
    {
    }

    // Restore context
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 80081de:	79fb      	ldrb	r3, [r7, #7]
 80081e0:	4619      	mov	r1, r3
 80081e2:	2009      	movs	r0, #9
 80081e4:	f001 fac4 	bl	8009770 <SX1276Write>
    SX1276SetChannel( initialFreq );
 80081e8:	6838      	ldr	r0, [r7, #0]
 80081ea:	f7ff ff11 	bl	8008010 <SX1276SetChannel>
}
 80081ee:	bf00      	nop
 80081f0:	370c      	adds	r7, #12
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd90      	pop	{r4, r7, pc}
 80081f6:	bf00      	nop
 80081f8:	33bca100 	.word	0x33bca100
 80081fc:	00000000 	.word	0x00000000
 8008200:	404e8480 	.word	0x404e8480

08008204 <GetFskBandwidthRegValue>:
 *
 * \param [IN] bandwidth Bandwidth value in Hz
 * \retval regValue Bandwidth register value.
 */
static uint8_t GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8008204:	b480      	push	{r7}
 8008206:	b085      	sub	sp, #20
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 800820c:	2300      	movs	r3, #0
 800820e:	73fb      	strb	r3, [r7, #15]
 8008210:	e017      	b.n	8008242 <GetFskBandwidthRegValue+0x3e>
    {
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 8008212:	7bfb      	ldrb	r3, [r7, #15]
 8008214:	4a10      	ldr	r2, [pc, #64]	@ (8008258 <GetFskBandwidthRegValue+0x54>)
 8008216:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	429a      	cmp	r2, r3
 800821e:	d30d      	bcc.n	800823c <GetFskBandwidthRegValue+0x38>
 8008220:	7bfb      	ldrb	r3, [r7, #15]
 8008222:	3301      	adds	r3, #1
 8008224:	4a0c      	ldr	r2, [pc, #48]	@ (8008258 <GetFskBandwidthRegValue+0x54>)
 8008226:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	429a      	cmp	r2, r3
 800822e:	d205      	bcs.n	800823c <GetFskBandwidthRegValue+0x38>
        {
            return FskBandwidths[i].RegValue;
 8008230:	7bfb      	ldrb	r3, [r7, #15]
 8008232:	4a09      	ldr	r2, [pc, #36]	@ (8008258 <GetFskBandwidthRegValue+0x54>)
 8008234:	00db      	lsls	r3, r3, #3
 8008236:	4413      	add	r3, r2
 8008238:	791b      	ldrb	r3, [r3, #4]
 800823a:	e007      	b.n	800824c <GetFskBandwidthRegValue+0x48>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 800823c:	7bfb      	ldrb	r3, [r7, #15]
 800823e:	3301      	adds	r3, #1
 8008240:	73fb      	strb	r3, [r7, #15]
 8008242:	7bfb      	ldrb	r3, [r7, #15]
 8008244:	2b14      	cmp	r3, #20
 8008246:	d9e4      	bls.n	8008212 <GetFskBandwidthRegValue+0xe>
        }
    }
    // ERROR: Value not found
    while( 1 );
 8008248:	bf00      	nop
 800824a:	e7fd      	b.n	8008248 <GetFskBandwidthRegValue+0x44>
}
 800824c:	4618      	mov	r0, r3
 800824e:	3714      	adds	r7, #20
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr
 8008258:	0800baec 	.word	0x0800baec
 800825c:	00000000 	.word	0x00000000

08008260 <SX1276SetRxConfig>:
                         uint32_t bandwidthAfc, uint16_t preambleLen,
                         uint16_t symbTimeout, bool fixLen,
                         uint8_t payloadLen,
                         bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                         bool iqInverted, bool rxContinuous )
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b084      	sub	sp, #16
 8008264:	af00      	add	r7, sp, #0
 8008266:	60b9      	str	r1, [r7, #8]
 8008268:	607a      	str	r2, [r7, #4]
 800826a:	461a      	mov	r2, r3
 800826c:	4603      	mov	r3, r0
 800826e:	73fb      	strb	r3, [r7, #15]
 8008270:	4613      	mov	r3, r2
 8008272:	73bb      	strb	r3, [r7, #14]
    SX1276SetModem( modem );
 8008274:	7bfb      	ldrb	r3, [r7, #15]
 8008276:	4618      	mov	r0, r3
 8008278:	f001 fa38 	bl	80096ec <SX1276SetModem>

    switch( modem )
 800827c:	7bfb      	ldrb	r3, [r7, #15]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d003      	beq.n	800828a <SX1276SetRxConfig+0x2a>
 8008282:	2b01      	cmp	r3, #1
 8008284:	f000 8095 	beq.w	80083b2 <SX1276SetRxConfig+0x152>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 8008288:	e1c4      	b.n	8008614 <SX1276SetRxConfig+0x3b4>
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 800828a:	4a79      	ldr	r2, [pc, #484]	@ (8008470 <SX1276SetRxConfig+0x210>)
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	f8c2 3124 	str.w	r3, [r2, #292]	@ 0x124
            SX1276.Settings.Fsk.Datarate = datarate;
 8008292:	4a77      	ldr	r2, [pc, #476]	@ (8008470 <SX1276SetRxConfig+0x210>)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 800829a:	4a75      	ldr	r2, [pc, #468]	@ (8008470 <SX1276SetRxConfig+0x210>)
 800829c:	69bb      	ldr	r3, [r7, #24]
 800829e:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128
            SX1276.Settings.Fsk.FixLen = fixLen;
 80082a2:	4a73      	ldr	r2, [pc, #460]	@ (8008470 <SX1276SetRxConfig+0x210>)
 80082a4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80082a8:	f882 3132 	strb.w	r3, [r2, #306]	@ 0x132
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 80082ac:	4a70      	ldr	r2, [pc, #448]	@ (8008470 <SX1276SetRxConfig+0x210>)
 80082ae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80082b2:	f882 3133 	strb.w	r3, [r2, #307]	@ 0x133
            SX1276.Settings.Fsk.CrcOn = crcOn;
 80082b6:	4a6e      	ldr	r2, [pc, #440]	@ (8008470 <SX1276SetRxConfig+0x210>)
 80082b8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80082bc:	f882 3134 	strb.w	r3, [r2, #308]	@ 0x134
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 80082c0:	4a6b      	ldr	r2, [pc, #428]	@ (8008470 <SX1276SetRxConfig+0x210>)
 80082c2:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80082c6:	f882 3135 	strb.w	r3, [r2, #309]	@ 0x135
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 80082ca:	4a69      	ldr	r2, [pc, #420]	@ (8008470 <SX1276SetRxConfig+0x210>)
 80082cc:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80082d0:	f882 3136 	strb.w	r3, [r2, #310]	@ 0x136
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 80082d4:	4a66      	ldr	r2, [pc, #408]	@ (8008470 <SX1276SetRxConfig+0x210>)
 80082d6:	8bbb      	ldrh	r3, [r7, #28]
 80082d8:	f8a2 3130 	strh.w	r3, [r2, #304]	@ 0x130
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f7f8 f915 	bl	800050c <__aeabi_ui2d>
 80082e2:	4602      	mov	r2, r0
 80082e4:	460b      	mov	r3, r1
 80082e6:	a160      	add	r1, pc, #384	@ (adr r1, 8008468 <SX1276SetRxConfig+0x208>)
 80082e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082ec:	f7f8 fab2 	bl	8000854 <__aeabi_ddiv>
 80082f0:	4602      	mov	r2, r0
 80082f2:	460b      	mov	r3, r1
 80082f4:	4610      	mov	r0, r2
 80082f6:	4619      	mov	r1, r3
 80082f8:	f7f8 fc44 	bl	8000b84 <__aeabi_d2uiz>
 80082fc:	4603      	mov	r3, r0
 80082fe:	b29b      	uxth	r3, r3
 8008300:	607b      	str	r3, [r7, #4]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	0a1b      	lsrs	r3, r3, #8
 8008306:	b2db      	uxtb	r3, r3
 8008308:	4619      	mov	r1, r3
 800830a:	2002      	movs	r0, #2
 800830c:	f001 fa30 	bl	8009770 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	b2db      	uxtb	r3, r3
 8008314:	4619      	mov	r1, r3
 8008316:	2003      	movs	r0, #3
 8008318:	f001 fa2a 	bl	8009770 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 800831c:	68b8      	ldr	r0, [r7, #8]
 800831e:	f7ff ff71 	bl	8008204 <GetFskBandwidthRegValue>
 8008322:	4603      	mov	r3, r0
 8008324:	4619      	mov	r1, r3
 8008326:	2012      	movs	r0, #18
 8008328:	f001 fa22 	bl	8009770 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 800832c:	69b8      	ldr	r0, [r7, #24]
 800832e:	f7ff ff69 	bl	8008204 <GetFskBandwidthRegValue>
 8008332:	4603      	mov	r3, r0
 8008334:	4619      	mov	r1, r3
 8008336:	2013      	movs	r0, #19
 8008338:	f001 fa1a 	bl	8009770 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 800833c:	8bbb      	ldrh	r3, [r7, #28]
 800833e:	0a1b      	lsrs	r3, r3, #8
 8008340:	b29b      	uxth	r3, r3
 8008342:	b2db      	uxtb	r3, r3
 8008344:	4619      	mov	r1, r3
 8008346:	2025      	movs	r0, #37	@ 0x25
 8008348:	f001 fa12 	bl	8009770 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 800834c:	8bbb      	ldrh	r3, [r7, #28]
 800834e:	b2db      	uxtb	r3, r3
 8008350:	4619      	mov	r1, r3
 8008352:	2026      	movs	r0, #38	@ 0x26
 8008354:	f001 fa0c 	bl	8009770 <SX1276Write>
            if( fixLen == 1 )
 8008358:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800835c:	2b00      	cmp	r3, #0
 800835e:	d006      	beq.n	800836e <SX1276SetRxConfig+0x10e>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 8008360:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008364:	4619      	mov	r1, r3
 8008366:	2032      	movs	r0, #50	@ 0x32
 8008368:	f001 fa02 	bl	8009770 <SX1276Write>
 800836c:	e003      	b.n	8008376 <SX1276SetRxConfig+0x116>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 800836e:	21ff      	movs	r1, #255	@ 0xff
 8008370:	2032      	movs	r0, #50	@ 0x32
 8008372:	f001 f9fd 	bl	8009770 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8008376:	2030      	movs	r0, #48	@ 0x30
 8008378:	f001 fa0c 	bl	8009794 <SX1276Read>
 800837c:	4603      	mov	r3, r0
 800837e:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 8008380:	f003 036f 	and.w	r3, r3, #111	@ 0x6f
 8008384:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8008386:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800838a:	2a00      	cmp	r2, #0
 800838c:	d001      	beq.n	8008392 <SX1276SetRxConfig+0x132>
 800838e:	2200      	movs	r2, #0
 8008390:	e001      	b.n	8008396 <SX1276SetRxConfig+0x136>
 8008392:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 8008396:	4313      	orrs	r3, r2
 8008398:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 800839a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800839e:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 80083a0:	b25b      	sxtb	r3, r3
 80083a2:	4313      	orrs	r3, r2
 80083a4:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	4619      	mov	r1, r3
 80083aa:	2030      	movs	r0, #48	@ 0x30
 80083ac:	f001 f9e0 	bl	8009770 <SX1276Write>
        break;
 80083b0:	e130      	b.n	8008614 <SX1276SetRxConfig+0x3b4>
            if( bandwidth > 2 )
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	2b02      	cmp	r3, #2
 80083b6:	d901      	bls.n	80083bc <SX1276SetRxConfig+0x15c>
                while( 1 );
 80083b8:	bf00      	nop
 80083ba:	e7fd      	b.n	80083b8 <SX1276SetRxConfig+0x158>
            bandwidth += 7;
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	3307      	adds	r3, #7
 80083c0:	60bb      	str	r3, [r7, #8]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 80083c2:	4a2b      	ldr	r2, [pc, #172]	@ (8008470 <SX1276SetRxConfig+0x210>)
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
            SX1276.Settings.LoRa.Datarate = datarate;
 80083ca:	4a29      	ldr	r2, [pc, #164]	@ (8008470 <SX1276SetRxConfig+0x210>)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
            SX1276.Settings.LoRa.Coderate = coderate;
 80083d2:	4a27      	ldr	r2, [pc, #156]	@ (8008470 <SX1276SetRxConfig+0x210>)
 80083d4:	7bbb      	ldrb	r3, [r7, #14]
 80083d6:	f882 3159 	strb.w	r3, [r2, #345]	@ 0x159
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 80083da:	4a25      	ldr	r2, [pc, #148]	@ (8008470 <SX1276SetRxConfig+0x210>)
 80083dc:	8bbb      	ldrh	r3, [r7, #28]
 80083de:	f8a2 315a 	strh.w	r3, [r2, #346]	@ 0x15a
            SX1276.Settings.LoRa.FixLen = fixLen;
 80083e2:	4a23      	ldr	r2, [pc, #140]	@ (8008470 <SX1276SetRxConfig+0x210>)
 80083e4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80083e8:	f882 315c 	strb.w	r3, [r2, #348]	@ 0x15c
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 80083ec:	4a20      	ldr	r2, [pc, #128]	@ (8008470 <SX1276SetRxConfig+0x210>)
 80083ee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80083f2:	f882 315d 	strb.w	r3, [r2, #349]	@ 0x15d
            SX1276.Settings.LoRa.CrcOn = crcOn;
 80083f6:	4a1e      	ldr	r2, [pc, #120]	@ (8008470 <SX1276SetRxConfig+0x210>)
 80083f8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80083fc:	f882 315e 	strb.w	r3, [r2, #350]	@ 0x15e
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8008400:	4a1b      	ldr	r2, [pc, #108]	@ (8008470 <SX1276SetRxConfig+0x210>)
 8008402:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8008406:	f882 315f 	strb.w	r3, [r2, #351]	@ 0x15f
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 800840a:	4a19      	ldr	r2, [pc, #100]	@ (8008470 <SX1276SetRxConfig+0x210>)
 800840c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8008410:	f882 3160 	strb.w	r3, [r2, #352]	@ 0x160
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8008414:	4a16      	ldr	r2, [pc, #88]	@ (8008470 <SX1276SetRxConfig+0x210>)
 8008416:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800841a:	f882 3161 	strb.w	r3, [r2, #353]	@ 0x161
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 800841e:	4a14      	ldr	r2, [pc, #80]	@ (8008470 <SX1276SetRxConfig+0x210>)
 8008420:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8008424:	f882 3162 	strb.w	r3, [r2, #354]	@ 0x162
            if( datarate > 12 )
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2b0c      	cmp	r3, #12
 800842c:	d902      	bls.n	8008434 <SX1276SetRxConfig+0x1d4>
                datarate = 12;
 800842e:	230c      	movs	r3, #12
 8008430:	607b      	str	r3, [r7, #4]
 8008432:	e004      	b.n	800843e <SX1276SetRxConfig+0x1de>
            else if( datarate < 6 )
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2b05      	cmp	r3, #5
 8008438:	d801      	bhi.n	800843e <SX1276SetRxConfig+0x1de>
                datarate = 6;
 800843a:	2306      	movs	r3, #6
 800843c:	607b      	str	r3, [r7, #4]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	2b07      	cmp	r3, #7
 8008442:	d105      	bne.n	8008450 <SX1276SetRxConfig+0x1f0>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2b0b      	cmp	r3, #11
 8008448:	d008      	beq.n	800845c <SX1276SetRxConfig+0x1fc>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2b0c      	cmp	r3, #12
 800844e:	d005      	beq.n	800845c <SX1276SetRxConfig+0x1fc>
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	2b08      	cmp	r3, #8
 8008454:	d10e      	bne.n	8008474 <SX1276SetRxConfig+0x214>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2b0c      	cmp	r3, #12
 800845a:	d10b      	bne.n	8008474 <SX1276SetRxConfig+0x214>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 800845c:	4b04      	ldr	r3, [pc, #16]	@ (8008470 <SX1276SetRxConfig+0x210>)
 800845e:	2201      	movs	r2, #1
 8008460:	f883 2158 	strb.w	r2, [r3, #344]	@ 0x158
 8008464:	e00a      	b.n	800847c <SX1276SetRxConfig+0x21c>
 8008466:	bf00      	nop
 8008468:	00000000 	.word	0x00000000
 800846c:	417e8480 	.word	0x417e8480
 8008470:	20000424 	.word	0x20000424
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8008474:	4b69      	ldr	r3, [pc, #420]	@ (800861c <SX1276SetRxConfig+0x3bc>)
 8008476:	2200      	movs	r2, #0
 8008478:	f883 2158 	strb.w	r2, [r3, #344]	@ 0x158
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 800847c:	201d      	movs	r0, #29
 800847e:	f001 f989 	bl	8009794 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	b2db      	uxtb	r3, r3
 8008486:	011b      	lsls	r3, r3, #4
 8008488:	b2da      	uxtb	r2, r3
 800848a:	7bbb      	ldrb	r3, [r7, #14]
 800848c:	005b      	lsls	r3, r3, #1
 800848e:	b2db      	uxtb	r3, r3
 8008490:	4313      	orrs	r3, r2
 8008492:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8008494:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8008498:	4313      	orrs	r3, r2
 800849a:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 800849c:	4619      	mov	r1, r3
 800849e:	201d      	movs	r0, #29
 80084a0:	f001 f966 	bl	8009770 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 80084a4:	201e      	movs	r0, #30
 80084a6:	f001 f975 	bl	8009794 <SX1276Read>
 80084aa:	4603      	mov	r3, r0
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 80084ac:	f003 0308 	and.w	r3, r3, #8
 80084b0:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	b2db      	uxtb	r3, r3
 80084b6:	011b      	lsls	r3, r3, #4
 80084b8:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 80084ba:	4313      	orrs	r3, r2
 80084bc:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 80084be:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80084c2:	009b      	lsls	r3, r3, #2
 80084c4:	b2db      	uxtb	r3, r3
 80084c6:	4313      	orrs	r3, r2
 80084c8:	b2da      	uxtb	r2, r3
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 80084ca:	8c3b      	ldrh	r3, [r7, #32]
 80084cc:	0a1b      	lsrs	r3, r3, #8
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	f003 0303 	and.w	r3, r3, #3
 80084d6:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 80084d8:	4313      	orrs	r3, r2
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	4619      	mov	r1, r3
 80084de:	201e      	movs	r0, #30
 80084e0:	f001 f946 	bl	8009770 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 80084e4:	2026      	movs	r0, #38	@ 0x26
 80084e6:	f001 f955 	bl	8009794 <SX1276Read>
 80084ea:	4603      	mov	r3, r0
 80084ec:	b25b      	sxtb	r3, r3
 80084ee:	f023 0308 	bic.w	r3, r3, #8
 80084f2:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 80084f4:	4b49      	ldr	r3, [pc, #292]	@ (800861c <SX1276SetRxConfig+0x3bc>)
 80084f6:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
 80084fa:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 80084fc:	b25b      	sxtb	r3, r3
 80084fe:	4313      	orrs	r3, r2
 8008500:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8008502:	b2db      	uxtb	r3, r3
 8008504:	4619      	mov	r1, r3
 8008506:	2026      	movs	r0, #38	@ 0x26
 8008508:	f001 f932 	bl	8009770 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 800850c:	8c3b      	ldrh	r3, [r7, #32]
 800850e:	b2db      	uxtb	r3, r3
 8008510:	4619      	mov	r1, r3
 8008512:	201f      	movs	r0, #31
 8008514:	f001 f92c 	bl	8009770 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8008518:	8bbb      	ldrh	r3, [r7, #28]
 800851a:	0a1b      	lsrs	r3, r3, #8
 800851c:	b29b      	uxth	r3, r3
 800851e:	b2db      	uxtb	r3, r3
 8008520:	4619      	mov	r1, r3
 8008522:	2020      	movs	r0, #32
 8008524:	f001 f924 	bl	8009770 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8008528:	8bbb      	ldrh	r3, [r7, #28]
 800852a:	b2db      	uxtb	r3, r3
 800852c:	4619      	mov	r1, r3
 800852e:	2021      	movs	r0, #33	@ 0x21
 8008530:	f001 f91e 	bl	8009770 <SX1276Write>
            if( fixLen == 1 )
 8008534:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008538:	2b00      	cmp	r3, #0
 800853a:	d005      	beq.n	8008548 <SX1276SetRxConfig+0x2e8>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 800853c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008540:	4619      	mov	r1, r3
 8008542:	2022      	movs	r0, #34	@ 0x22
 8008544:	f001 f914 	bl	8009770 <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8008548:	4b34      	ldr	r3, [pc, #208]	@ (800861c <SX1276SetRxConfig+0x3bc>)
 800854a:	f893 315f 	ldrb.w	r3, [r3, #351]	@ 0x15f
 800854e:	2b00      	cmp	r3, #0
 8008550:	d011      	beq.n	8008576 <SX1276SetRxConfig+0x316>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8008552:	2044      	movs	r0, #68	@ 0x44
 8008554:	f001 f91e 	bl	8009794 <SX1276Read>
 8008558:	4603      	mov	r3, r0
 800855a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800855e:	b2db      	uxtb	r3, r3
 8008560:	4619      	mov	r1, r3
 8008562:	2044      	movs	r0, #68	@ 0x44
 8008564:	f001 f904 	bl	8009770 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8008568:	4b2c      	ldr	r3, [pc, #176]	@ (800861c <SX1276SetRxConfig+0x3bc>)
 800856a:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 800856e:	4619      	mov	r1, r3
 8008570:	2024      	movs	r0, #36	@ 0x24
 8008572:	f001 f8fd 	bl	8009770 <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	2b09      	cmp	r3, #9
 800857a:	d10e      	bne.n	800859a <SX1276SetRxConfig+0x33a>
 800857c:	4b27      	ldr	r3, [pc, #156]	@ (800861c <SX1276SetRxConfig+0x3bc>)
 800857e:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8008582:	4a27      	ldr	r2, [pc, #156]	@ (8008620 <SX1276SetRxConfig+0x3c0>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d908      	bls.n	800859a <SX1276SetRxConfig+0x33a>
                SX1276Write( REG_LR_TEST36, 0x02 );
 8008588:	2102      	movs	r1, #2
 800858a:	2036      	movs	r0, #54	@ 0x36
 800858c:	f001 f8f0 	bl	8009770 <SX1276Write>
                SX1276Write( REG_LR_TEST3A, 0x64 );
 8008590:	2164      	movs	r1, #100	@ 0x64
 8008592:	203a      	movs	r0, #58	@ 0x3a
 8008594:	f001 f8ec 	bl	8009770 <SX1276Write>
 8008598:	e00f      	b.n	80085ba <SX1276SetRxConfig+0x35a>
            else if( bandwidth == 9 )
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	2b09      	cmp	r3, #9
 800859e:	d108      	bne.n	80085b2 <SX1276SetRxConfig+0x352>
                SX1276Write( REG_LR_TEST36, 0x02 );
 80085a0:	2102      	movs	r1, #2
 80085a2:	2036      	movs	r0, #54	@ 0x36
 80085a4:	f001 f8e4 	bl	8009770 <SX1276Write>
                SX1276Write( REG_LR_TEST3A, 0x7F );
 80085a8:	217f      	movs	r1, #127	@ 0x7f
 80085aa:	203a      	movs	r0, #58	@ 0x3a
 80085ac:	f001 f8e0 	bl	8009770 <SX1276Write>
 80085b0:	e003      	b.n	80085ba <SX1276SetRxConfig+0x35a>
                SX1276Write( REG_LR_TEST36, 0x03 );
 80085b2:	2103      	movs	r1, #3
 80085b4:	2036      	movs	r0, #54	@ 0x36
 80085b6:	f001 f8db 	bl	8009770 <SX1276Write>
            if( datarate == 6 )
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2b06      	cmp	r3, #6
 80085be:	d114      	bne.n	80085ea <SX1276SetRxConfig+0x38a>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80085c0:	2031      	movs	r0, #49	@ 0x31
 80085c2:	f001 f8e7 	bl	8009794 <SX1276Read>
 80085c6:	4603      	mov	r3, r0
 80085c8:	b25b      	sxtb	r3, r3
 80085ca:	f023 0307 	bic.w	r3, r3, #7
 80085ce:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 80085d0:	f043 0305 	orr.w	r3, r3, #5
 80085d4:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80085d6:	b2db      	uxtb	r3, r3
 80085d8:	4619      	mov	r1, r3
 80085da:	2031      	movs	r0, #49	@ 0x31
 80085dc:	f001 f8c8 	bl	8009770 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80085e0:	210c      	movs	r1, #12
 80085e2:	2037      	movs	r0, #55	@ 0x37
 80085e4:	f001 f8c4 	bl	8009770 <SX1276Write>
        break;
 80085e8:	e013      	b.n	8008612 <SX1276SetRxConfig+0x3b2>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80085ea:	2031      	movs	r0, #49	@ 0x31
 80085ec:	f001 f8d2 	bl	8009794 <SX1276Read>
 80085f0:	4603      	mov	r3, r0
 80085f2:	b25b      	sxtb	r3, r3
 80085f4:	f023 0307 	bic.w	r3, r3, #7
 80085f8:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 80085fa:	f043 0303 	orr.w	r3, r3, #3
 80085fe:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8008600:	b2db      	uxtb	r3, r3
 8008602:	4619      	mov	r1, r3
 8008604:	2031      	movs	r0, #49	@ 0x31
 8008606:	f001 f8b3 	bl	8009770 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800860a:	210a      	movs	r1, #10
 800860c:	2037      	movs	r0, #55	@ 0x37
 800860e:	f001 f8af 	bl	8009770 <SX1276Write>
        break;
 8008612:	bf00      	nop
}
 8008614:	bf00      	nop
 8008616:	3710      	adds	r7, #16
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}
 800861c:	20000424 	.word	0x20000424
 8008620:	1f4add40 	.word	0x1f4add40
 8008624:	00000000 	.word	0x00000000

08008628 <SX1276SetTxConfig>:
void SX1276SetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                        uint32_t bandwidth, uint32_t datarate,
                        uint8_t coderate, uint16_t preambleLen,
                        bool fixLen, bool crcOn, bool freqHopOn,
                        uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8008628:	b590      	push	{r4, r7, lr}
 800862a:	b087      	sub	sp, #28
 800862c:	af00      	add	r7, sp, #0
 800862e:	60ba      	str	r2, [r7, #8]
 8008630:	607b      	str	r3, [r7, #4]
 8008632:	4603      	mov	r3, r0
 8008634:	73fb      	strb	r3, [r7, #15]
 8008636:	460b      	mov	r3, r1
 8008638:	73bb      	strb	r3, [r7, #14]
    uint8_t paConfig = 0;
 800863a:	2300      	movs	r3, #0
 800863c:	75fb      	strb	r3, [r7, #23]
    uint8_t paDac = 0;
 800863e:	2300      	movs	r3, #0
 8008640:	75bb      	strb	r3, [r7, #22]

    SX1276SetModem( modem );
 8008642:	7bfb      	ldrb	r3, [r7, #15]
 8008644:	4618      	mov	r0, r3
 8008646:	f001 f851 	bl	80096ec <SX1276SetModem>

    paConfig = SX1276Read( REG_PACONFIG );
 800864a:	2009      	movs	r0, #9
 800864c:	f001 f8a2 	bl	8009794 <SX1276Read>
 8008650:	4603      	mov	r3, r0
 8008652:	75fb      	strb	r3, [r7, #23]
    paDac = SX1276Read( REG_PADAC );
 8008654:	204d      	movs	r0, #77	@ 0x4d
 8008656:	f001 f89d 	bl	8009794 <SX1276Read>
 800865a:	4603      	mov	r3, r0
 800865c:	75bb      	strb	r3, [r7, #22]

    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | SX1276GetPaSelect( SX1276.Settings.Channel );
 800865e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008662:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008666:	b25c      	sxtb	r4, r3
 8008668:	4bb3      	ldr	r3, [pc, #716]	@ (8008938 <SX1276SetTxConfig+0x310>)
 800866a:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800866e:	4618      	mov	r0, r3
 8008670:	f7ff f95e 	bl	8007930 <SX1276GetPaSelect>
 8008674:	4603      	mov	r3, r0
 8008676:	b25b      	sxtb	r3, r3
 8008678:	4323      	orrs	r3, r4
 800867a:	b25b      	sxtb	r3, r3
 800867c:	75fb      	strb	r3, [r7, #23]
    paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK ) | 0x70;
 800867e:	7dfb      	ldrb	r3, [r7, #23]
 8008680:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8008684:	75fb      	strb	r3, [r7, #23]

    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 8008686:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800868a:	2b00      	cmp	r3, #0
 800868c:	da4e      	bge.n	800872c <SX1276SetTxConfig+0x104>
    {
        if( power > 17 )
 800868e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008692:	2b11      	cmp	r3, #17
 8008694:	dd04      	ble.n	80086a0 <SX1276SetTxConfig+0x78>
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 8008696:	7dbb      	ldrb	r3, [r7, #22]
 8008698:	f043 0307 	orr.w	r3, r3, #7
 800869c:	75bb      	strb	r3, [r7, #22]
 800869e:	e008      	b.n	80086b2 <SX1276SetTxConfig+0x8a>
        }
        else
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 80086a0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80086a4:	f023 0307 	bic.w	r3, r3, #7
 80086a8:	b25b      	sxtb	r3, r3
 80086aa:	f043 0304 	orr.w	r3, r3, #4
 80086ae:	b25b      	sxtb	r3, r3
 80086b0:	75bb      	strb	r3, [r7, #22]
        }
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 80086b2:	7dbb      	ldrb	r3, [r7, #22]
 80086b4:	f003 0307 	and.w	r3, r3, #7
 80086b8:	2b07      	cmp	r3, #7
 80086ba:	d11b      	bne.n	80086f4 <SX1276SetTxConfig+0xcc>
        {
            if( power < 5 )
 80086bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086c0:	2b04      	cmp	r3, #4
 80086c2:	dc01      	bgt.n	80086c8 <SX1276SetTxConfig+0xa0>
            {
                power = 5;
 80086c4:	2305      	movs	r3, #5
 80086c6:	73bb      	strb	r3, [r7, #14]
            }
            if( power > 20 )
 80086c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086cc:	2b14      	cmp	r3, #20
 80086ce:	dd01      	ble.n	80086d4 <SX1276SetTxConfig+0xac>
            {
                power = 20;
 80086d0:	2314      	movs	r3, #20
 80086d2:	73bb      	strb	r3, [r7, #14]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 80086d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80086d8:	f023 030f 	bic.w	r3, r3, #15
 80086dc:	b25a      	sxtb	r2, r3
 80086de:	7bbb      	ldrb	r3, [r7, #14]
 80086e0:	3b05      	subs	r3, #5
 80086e2:	b2db      	uxtb	r3, r3
 80086e4:	b25b      	sxtb	r3, r3
 80086e6:	f003 030f 	and.w	r3, r3, #15
 80086ea:	b25b      	sxtb	r3, r3
 80086ec:	4313      	orrs	r3, r2
 80086ee:	b25b      	sxtb	r3, r3
 80086f0:	75fb      	strb	r3, [r7, #23]
 80086f2:	e037      	b.n	8008764 <SX1276SetTxConfig+0x13c>
        }
        else
        {
            if( power < 2 )
 80086f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	dc01      	bgt.n	8008700 <SX1276SetTxConfig+0xd8>
            {
                power = 2;
 80086fc:	2302      	movs	r3, #2
 80086fe:	73bb      	strb	r3, [r7, #14]
            }
            if( power > 17 )
 8008700:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008704:	2b11      	cmp	r3, #17
 8008706:	dd01      	ble.n	800870c <SX1276SetTxConfig+0xe4>
            {
                power = 17;
 8008708:	2311      	movs	r3, #17
 800870a:	73bb      	strb	r3, [r7, #14]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 800870c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008710:	f023 030f 	bic.w	r3, r3, #15
 8008714:	b25a      	sxtb	r2, r3
 8008716:	7bbb      	ldrb	r3, [r7, #14]
 8008718:	3b02      	subs	r3, #2
 800871a:	b2db      	uxtb	r3, r3
 800871c:	b25b      	sxtb	r3, r3
 800871e:	f003 030f 	and.w	r3, r3, #15
 8008722:	b25b      	sxtb	r3, r3
 8008724:	4313      	orrs	r3, r2
 8008726:	b25b      	sxtb	r3, r3
 8008728:	75fb      	strb	r3, [r7, #23]
 800872a:	e01b      	b.n	8008764 <SX1276SetTxConfig+0x13c>
        }
    }
    else
    {
        if( power < -1 )
 800872c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008734:	da01      	bge.n	800873a <SX1276SetTxConfig+0x112>
        {
            power = -1;
 8008736:	23ff      	movs	r3, #255	@ 0xff
 8008738:	73bb      	strb	r3, [r7, #14]
        }
        if( power > 14 )
 800873a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800873e:	2b0e      	cmp	r3, #14
 8008740:	dd01      	ble.n	8008746 <SX1276SetTxConfig+0x11e>
        {
            power = 14;
 8008742:	230e      	movs	r3, #14
 8008744:	73bb      	strb	r3, [r7, #14]
        }
        paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power + 1 ) & 0x0F );
 8008746:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800874a:	f023 030f 	bic.w	r3, r3, #15
 800874e:	b25a      	sxtb	r2, r3
 8008750:	7bbb      	ldrb	r3, [r7, #14]
 8008752:	3301      	adds	r3, #1
 8008754:	b2db      	uxtb	r3, r3
 8008756:	b25b      	sxtb	r3, r3
 8008758:	f003 030f 	and.w	r3, r3, #15
 800875c:	b25b      	sxtb	r3, r3
 800875e:	4313      	orrs	r3, r2
 8008760:	b25b      	sxtb	r3, r3
 8008762:	75fb      	strb	r3, [r7, #23]
    }
    SX1276Write( REG_PACONFIG, paConfig );
 8008764:	7dfb      	ldrb	r3, [r7, #23]
 8008766:	4619      	mov	r1, r3
 8008768:	2009      	movs	r0, #9
 800876a:	f001 f801 	bl	8009770 <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 800876e:	7dbb      	ldrb	r3, [r7, #22]
 8008770:	4619      	mov	r1, r3
 8008772:	204d      	movs	r0, #77	@ 0x4d
 8008774:	f000 fffc 	bl	8009770 <SX1276Write>

    switch( modem )
 8008778:	7bfb      	ldrb	r3, [r7, #15]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d003      	beq.n	8008786 <SX1276SetTxConfig+0x15e>
 800877e:	2b01      	cmp	r3, #1
 8008780:	f000 8092 	beq.w	80088a8 <SX1276SetTxConfig+0x280>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 8008784:	e189      	b.n	8008a9a <SX1276SetTxConfig+0x472>
            SX1276.Settings.Fsk.Power = power;
 8008786:	4a6c      	ldr	r2, [pc, #432]	@ (8008938 <SX1276SetTxConfig+0x310>)
 8008788:	7bbb      	ldrb	r3, [r7, #14]
 800878a:	f882 311c 	strb.w	r3, [r2, #284]	@ 0x11c
            SX1276.Settings.Fsk.Fdev = fdev;
 800878e:	4a6a      	ldr	r2, [pc, #424]	@ (8008938 <SX1276SetTxConfig+0x310>)
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8008796:	4a68      	ldr	r2, [pc, #416]	@ (8008938 <SX1276SetTxConfig+0x310>)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f8c2 3124 	str.w	r3, [r2, #292]	@ 0x124
            SX1276.Settings.Fsk.Datarate = datarate;
 800879e:	4a66      	ldr	r2, [pc, #408]	@ (8008938 <SX1276SetTxConfig+0x310>)
 80087a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087a2:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 80087a6:	4a64      	ldr	r2, [pc, #400]	@ (8008938 <SX1276SetTxConfig+0x310>)
 80087a8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80087aa:	f8a2 3130 	strh.w	r3, [r2, #304]	@ 0x130
            SX1276.Settings.Fsk.FixLen = fixLen;
 80087ae:	4a62      	ldr	r2, [pc, #392]	@ (8008938 <SX1276SetTxConfig+0x310>)
 80087b0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80087b4:	f882 3132 	strb.w	r3, [r2, #306]	@ 0x132
            SX1276.Settings.Fsk.CrcOn = crcOn;
 80087b8:	4a5f      	ldr	r2, [pc, #380]	@ (8008938 <SX1276SetTxConfig+0x310>)
 80087ba:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80087be:	f882 3134 	strb.w	r3, [r2, #308]	@ 0x134
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 80087c2:	4a5d      	ldr	r2, [pc, #372]	@ (8008938 <SX1276SetTxConfig+0x310>)
 80087c4:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80087c8:	f882 3135 	strb.w	r3, [r2, #309]	@ 0x135
            SX1276.Settings.Fsk.TxTimeout = timeout;
 80087cc:	4a5a      	ldr	r2, [pc, #360]	@ (8008938 <SX1276SetTxConfig+0x310>)
 80087ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80087d0:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 80087d4:	68b8      	ldr	r0, [r7, #8]
 80087d6:	f7f7 fe99 	bl	800050c <__aeabi_ui2d>
 80087da:	a353      	add	r3, pc, #332	@ (adr r3, 8008928 <SX1276SetTxConfig+0x300>)
 80087dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e0:	f7f8 f838 	bl	8000854 <__aeabi_ddiv>
 80087e4:	4602      	mov	r2, r0
 80087e6:	460b      	mov	r3, r1
 80087e8:	4610      	mov	r0, r2
 80087ea:	4619      	mov	r1, r3
 80087ec:	f7f8 f9ca 	bl	8000b84 <__aeabi_d2uiz>
 80087f0:	4603      	mov	r3, r0
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	60bb      	str	r3, [r7, #8]
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	0a1b      	lsrs	r3, r3, #8
 80087fa:	b2db      	uxtb	r3, r3
 80087fc:	4619      	mov	r1, r3
 80087fe:	2004      	movs	r0, #4
 8008800:	f000 ffb6 	bl	8009770 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	b2db      	uxtb	r3, r3
 8008808:	4619      	mov	r1, r3
 800880a:	2005      	movs	r0, #5
 800880c:	f000 ffb0 	bl	8009770 <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8008810:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008812:	f7f7 fe7b 	bl	800050c <__aeabi_ui2d>
 8008816:	4602      	mov	r2, r0
 8008818:	460b      	mov	r3, r1
 800881a:	a145      	add	r1, pc, #276	@ (adr r1, 8008930 <SX1276SetTxConfig+0x308>)
 800881c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008820:	f7f8 f818 	bl	8000854 <__aeabi_ddiv>
 8008824:	4602      	mov	r2, r0
 8008826:	460b      	mov	r3, r1
 8008828:	4610      	mov	r0, r2
 800882a:	4619      	mov	r1, r3
 800882c:	f7f8 f9aa 	bl	8000b84 <__aeabi_d2uiz>
 8008830:	4603      	mov	r3, r0
 8008832:	b29b      	uxth	r3, r3
 8008834:	62bb      	str	r3, [r7, #40]	@ 0x28
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 8008836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008838:	0a1b      	lsrs	r3, r3, #8
 800883a:	b2db      	uxtb	r3, r3
 800883c:	4619      	mov	r1, r3
 800883e:	2002      	movs	r0, #2
 8008840:	f000 ff96 	bl	8009770 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8008844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008846:	b2db      	uxtb	r3, r3
 8008848:	4619      	mov	r1, r3
 800884a:	2003      	movs	r0, #3
 800884c:	f000 ff90 	bl	8009770 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8008850:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8008852:	0a1b      	lsrs	r3, r3, #8
 8008854:	b29b      	uxth	r3, r3
 8008856:	b2db      	uxtb	r3, r3
 8008858:	4619      	mov	r1, r3
 800885a:	2025      	movs	r0, #37	@ 0x25
 800885c:	f000 ff88 	bl	8009770 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 8008860:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8008862:	b2db      	uxtb	r3, r3
 8008864:	4619      	mov	r1, r3
 8008866:	2026      	movs	r0, #38	@ 0x26
 8008868:	f000 ff82 	bl	8009770 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 800886c:	2030      	movs	r0, #48	@ 0x30
 800886e:	f000 ff91 	bl	8009794 <SX1276Read>
 8008872:	4603      	mov	r3, r0
 8008874:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 8008876:	f003 036f 	and.w	r3, r3, #111	@ 0x6f
 800887a:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800887c:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 8008880:	2a00      	cmp	r2, #0
 8008882:	d001      	beq.n	8008888 <SX1276SetTxConfig+0x260>
 8008884:	2200      	movs	r2, #0
 8008886:	e001      	b.n	800888c <SX1276SetTxConfig+0x264>
 8008888:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 800888c:	4313      	orrs	r3, r2
 800888e:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 8008890:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8008894:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8008896:	b25b      	sxtb	r3, r3
 8008898:	4313      	orrs	r3, r2
 800889a:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 800889c:	b2db      	uxtb	r3, r3
 800889e:	4619      	mov	r1, r3
 80088a0:	2030      	movs	r0, #48	@ 0x30
 80088a2:	f000 ff65 	bl	8009770 <SX1276Write>
        break;
 80088a6:	e0f8      	b.n	8008a9a <SX1276SetTxConfig+0x472>
            SX1276.Settings.LoRa.Power = power;
 80088a8:	4a23      	ldr	r2, [pc, #140]	@ (8008938 <SX1276SetTxConfig+0x310>)
 80088aa:	7bbb      	ldrb	r3, [r7, #14]
 80088ac:	f882 314c 	strb.w	r3, [r2, #332]	@ 0x14c
            if( bandwidth > 2 )
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2b02      	cmp	r3, #2
 80088b4:	d901      	bls.n	80088ba <SX1276SetTxConfig+0x292>
                while( 1 );
 80088b6:	bf00      	nop
 80088b8:	e7fd      	b.n	80088b6 <SX1276SetTxConfig+0x28e>
            bandwidth += 7;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	3307      	adds	r3, #7
 80088be:	607b      	str	r3, [r7, #4]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 80088c0:	4a1d      	ldr	r2, [pc, #116]	@ (8008938 <SX1276SetTxConfig+0x310>)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
            SX1276.Settings.LoRa.Datarate = datarate;
 80088c8:	4a1b      	ldr	r2, [pc, #108]	@ (8008938 <SX1276SetTxConfig+0x310>)
 80088ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088cc:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
            SX1276.Settings.LoRa.Coderate = coderate;
 80088d0:	4a19      	ldr	r2, [pc, #100]	@ (8008938 <SX1276SetTxConfig+0x310>)
 80088d2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80088d6:	f882 3159 	strb.w	r3, [r2, #345]	@ 0x159
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 80088da:	4a17      	ldr	r2, [pc, #92]	@ (8008938 <SX1276SetTxConfig+0x310>)
 80088dc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80088de:	f8a2 315a 	strh.w	r3, [r2, #346]	@ 0x15a
            SX1276.Settings.LoRa.FixLen = fixLen;
 80088e2:	4a15      	ldr	r2, [pc, #84]	@ (8008938 <SX1276SetTxConfig+0x310>)
 80088e4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80088e8:	f882 315c 	strb.w	r3, [r2, #348]	@ 0x15c
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 80088ec:	4a12      	ldr	r2, [pc, #72]	@ (8008938 <SX1276SetTxConfig+0x310>)
 80088ee:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80088f2:	f882 315f 	strb.w	r3, [r2, #351]	@ 0x15f
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 80088f6:	4a10      	ldr	r2, [pc, #64]	@ (8008938 <SX1276SetTxConfig+0x310>)
 80088f8:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80088fc:	f882 3160 	strb.w	r3, [r2, #352]	@ 0x160
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8008900:	4a0d      	ldr	r2, [pc, #52]	@ (8008938 <SX1276SetTxConfig+0x310>)
 8008902:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8008906:	f882 315e 	strb.w	r3, [r2, #350]	@ 0x15e
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800890a:	4a0b      	ldr	r2, [pc, #44]	@ (8008938 <SX1276SetTxConfig+0x310>)
 800890c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8008910:	f882 3161 	strb.w	r3, [r2, #353]	@ 0x161
            SX1276.Settings.LoRa.TxTimeout = timeout;
 8008914:	4a08      	ldr	r2, [pc, #32]	@ (8008938 <SX1276SetTxConfig+0x310>)
 8008916:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008918:	f8c2 3164 	str.w	r3, [r2, #356]	@ 0x164
            if( datarate > 12 )
 800891c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800891e:	2b0c      	cmp	r3, #12
 8008920:	d90c      	bls.n	800893c <SX1276SetTxConfig+0x314>
                datarate = 12;
 8008922:	230c      	movs	r3, #12
 8008924:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008926:	e00e      	b.n	8008946 <SX1276SetTxConfig+0x31e>
 8008928:	00000000 	.word	0x00000000
 800892c:	404e8480 	.word	0x404e8480
 8008930:	00000000 	.word	0x00000000
 8008934:	417e8480 	.word	0x417e8480
 8008938:	20000424 	.word	0x20000424
            else if( datarate < 6 )
 800893c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800893e:	2b05      	cmp	r3, #5
 8008940:	d801      	bhi.n	8008946 <SX1276SetTxConfig+0x31e>
                datarate = 6;
 8008942:	2306      	movs	r3, #6
 8008944:	62bb      	str	r3, [r7, #40]	@ 0x28
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2b07      	cmp	r3, #7
 800894a:	d105      	bne.n	8008958 <SX1276SetTxConfig+0x330>
 800894c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800894e:	2b0b      	cmp	r3, #11
 8008950:	d008      	beq.n	8008964 <SX1276SetTxConfig+0x33c>
 8008952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008954:	2b0c      	cmp	r3, #12
 8008956:	d005      	beq.n	8008964 <SX1276SetTxConfig+0x33c>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2b08      	cmp	r3, #8
 800895c:	d107      	bne.n	800896e <SX1276SetTxConfig+0x346>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 800895e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008960:	2b0c      	cmp	r3, #12
 8008962:	d104      	bne.n	800896e <SX1276SetTxConfig+0x346>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8008964:	4b4f      	ldr	r3, [pc, #316]	@ (8008aa4 <SX1276SetTxConfig+0x47c>)
 8008966:	2201      	movs	r2, #1
 8008968:	f883 2158 	strb.w	r2, [r3, #344]	@ 0x158
 800896c:	e003      	b.n	8008976 <SX1276SetTxConfig+0x34e>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 800896e:	4b4d      	ldr	r3, [pc, #308]	@ (8008aa4 <SX1276SetTxConfig+0x47c>)
 8008970:	2200      	movs	r2, #0
 8008972:	f883 2158 	strb.w	r2, [r3, #344]	@ 0x158
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8008976:	4b4b      	ldr	r3, [pc, #300]	@ (8008aa4 <SX1276SetTxConfig+0x47c>)
 8008978:	f893 315f 	ldrb.w	r3, [r3, #351]	@ 0x15f
 800897c:	2b00      	cmp	r3, #0
 800897e:	d011      	beq.n	80089a4 <SX1276SetTxConfig+0x37c>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8008980:	2044      	movs	r0, #68	@ 0x44
 8008982:	f000 ff07 	bl	8009794 <SX1276Read>
 8008986:	4603      	mov	r3, r0
 8008988:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800898c:	b2db      	uxtb	r3, r3
 800898e:	4619      	mov	r1, r3
 8008990:	2044      	movs	r0, #68	@ 0x44
 8008992:	f000 feed 	bl	8009770 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8008996:	4b43      	ldr	r3, [pc, #268]	@ (8008aa4 <SX1276SetTxConfig+0x47c>)
 8008998:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 800899c:	4619      	mov	r1, r3
 800899e:	2024      	movs	r0, #36	@ 0x24
 80089a0:	f000 fee6 	bl	8009770 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 80089a4:	201d      	movs	r0, #29
 80089a6:	f000 fef5 	bl	8009794 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	011b      	lsls	r3, r3, #4
 80089b0:	b2da      	uxtb	r2, r3
 80089b2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80089b6:	005b      	lsls	r3, r3, #1
 80089b8:	b2db      	uxtb	r3, r3
 80089ba:	4313      	orrs	r3, r2
 80089bc:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 80089be:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80089c2:	4313      	orrs	r3, r2
 80089c4:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 80089c6:	4619      	mov	r1, r3
 80089c8:	201d      	movs	r0, #29
 80089ca:	f000 fed1 	bl	8009770 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 80089ce:	201e      	movs	r0, #30
 80089d0:	f000 fee0 	bl	8009794 <SX1276Read>
 80089d4:	4603      	mov	r3, r0
                           RFLR_MODEMCONFIG2_SF_MASK &
 80089d6:	f003 030b 	and.w	r3, r3, #11
 80089da:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 80089dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089de:	b2db      	uxtb	r3, r3
 80089e0:	011b      	lsls	r3, r3, #4
 80089e2:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
 80089e4:	4313      	orrs	r3, r2
 80089e6:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 80089e8:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80089ec:	009b      	lsls	r3, r3, #2
 80089ee:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 80089f0:	4313      	orrs	r3, r2
 80089f2:	b2db      	uxtb	r3, r3
 80089f4:	4619      	mov	r1, r3
 80089f6:	201e      	movs	r0, #30
 80089f8:	f000 feba 	bl	8009770 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 80089fc:	2026      	movs	r0, #38	@ 0x26
 80089fe:	f000 fec9 	bl	8009794 <SX1276Read>
 8008a02:	4603      	mov	r3, r0
 8008a04:	b25b      	sxtb	r3, r3
 8008a06:	f023 0308 	bic.w	r3, r3, #8
 8008a0a:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8008a0c:	4b25      	ldr	r3, [pc, #148]	@ (8008aa4 <SX1276SetTxConfig+0x47c>)
 8008a0e:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
 8008a12:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8008a14:	b25b      	sxtb	r3, r3
 8008a16:	4313      	orrs	r3, r2
 8008a18:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8008a1a:	b2db      	uxtb	r3, r3
 8008a1c:	4619      	mov	r1, r3
 8008a1e:	2026      	movs	r0, #38	@ 0x26
 8008a20:	f000 fea6 	bl	8009770 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8008a24:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8008a26:	0a1b      	lsrs	r3, r3, #8
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	b2db      	uxtb	r3, r3
 8008a2c:	4619      	mov	r1, r3
 8008a2e:	2020      	movs	r0, #32
 8008a30:	f000 fe9e 	bl	8009770 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 8008a34:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8008a36:	b2db      	uxtb	r3, r3
 8008a38:	4619      	mov	r1, r3
 8008a3a:	2021      	movs	r0, #33	@ 0x21
 8008a3c:	f000 fe98 	bl	8009770 <SX1276Write>
            if( datarate == 6 )
 8008a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a42:	2b06      	cmp	r3, #6
 8008a44:	d114      	bne.n	8008a70 <SX1276SetTxConfig+0x448>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8008a46:	2031      	movs	r0, #49	@ 0x31
 8008a48:	f000 fea4 	bl	8009794 <SX1276Read>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	b25b      	sxtb	r3, r3
 8008a50:	f023 0307 	bic.w	r3, r3, #7
 8008a54:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8008a56:	f043 0305 	orr.w	r3, r3, #5
 8008a5a:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8008a5c:	b2db      	uxtb	r3, r3
 8008a5e:	4619      	mov	r1, r3
 8008a60:	2031      	movs	r0, #49	@ 0x31
 8008a62:	f000 fe85 	bl	8009770 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8008a66:	210c      	movs	r1, #12
 8008a68:	2037      	movs	r0, #55	@ 0x37
 8008a6a:	f000 fe81 	bl	8009770 <SX1276Write>
        break;
 8008a6e:	e013      	b.n	8008a98 <SX1276SetTxConfig+0x470>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8008a70:	2031      	movs	r0, #49	@ 0x31
 8008a72:	f000 fe8f 	bl	8009794 <SX1276Read>
 8008a76:	4603      	mov	r3, r0
 8008a78:	b25b      	sxtb	r3, r3
 8008a7a:	f023 0307 	bic.w	r3, r3, #7
 8008a7e:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8008a80:	f043 0303 	orr.w	r3, r3, #3
 8008a84:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8008a86:	b2db      	uxtb	r3, r3
 8008a88:	4619      	mov	r1, r3
 8008a8a:	2031      	movs	r0, #49	@ 0x31
 8008a8c:	f000 fe70 	bl	8009770 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8008a90:	210a      	movs	r1, #10
 8008a92:	2037      	movs	r0, #55	@ 0x37
 8008a94:	f000 fe6c 	bl	8009770 <SX1276Write>
        break;
 8008a98:	bf00      	nop
}
 8008a9a:	bf00      	nop
 8008a9c:	371c      	adds	r7, #28
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd90      	pop	{r4, r7, pc}
 8008aa2:	bf00      	nop
 8008aa4:	20000424 	.word	0x20000424

08008aa8 <SX1276GetTimeOnAir>:

uint32_t SX1276GetTimeOnAir( RadioModems_t modem, uint8_t pktLen )
{
 8008aa8:	b5b0      	push	{r4, r5, r7, lr}
 8008aaa:	b094      	sub	sp, #80	@ 0x50
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	4603      	mov	r3, r0
 8008ab0:	460a      	mov	r2, r1
 8008ab2:	71fb      	strb	r3, [r7, #7]
 8008ab4:	4613      	mov	r3, r2
 8008ab6:	71bb      	strb	r3, [r7, #6]
    uint32_t airTime = 0;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	64fb      	str	r3, [r7, #76]	@ 0x4c

    switch( modem )
 8008abc:	79fb      	ldrb	r3, [r7, #7]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d003      	beq.n	8008aca <SX1276GetTimeOnAir+0x22>
 8008ac2:	2b01      	cmp	r3, #1
 8008ac4:	f000 8092 	beq.w	8008bec <SX1276GetTimeOnAir+0x144>
 8008ac8:	e1a0      	b.n	8008e0c <SX1276GetTimeOnAir+0x364>
    {
    case MODEM_FSK:
        {
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8008aca:	4ba9      	ldr	r3, [pc, #676]	@ (8008d70 <SX1276GetTimeOnAir+0x2c8>)
 8008acc:	f8b3 3130 	ldrh.w	r3, [r3, #304]	@ 0x130
 8008ad0:	461c      	mov	r4, r3
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8008ad2:	2027      	movs	r0, #39	@ 0x27
 8008ad4:	f000 fe5e 	bl	8009794 <SX1276Read>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008ade:	3301      	adds	r3, #1
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8008ae0:	4423      	add	r3, r4
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f7f7 fd22 	bl	800052c <__aeabi_i2d>
 8008ae8:	4602      	mov	r2, r0
 8008aea:	460b      	mov	r3, r1
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8008aec:	49a0      	ldr	r1, [pc, #640]	@ (8008d70 <SX1276GetTimeOnAir+0x2c8>)
 8008aee:	f891 1132 	ldrb.w	r1, [r1, #306]	@ 0x132
 8008af2:	2900      	cmp	r1, #0
 8008af4:	d004      	beq.n	8008b00 <SX1276GetTimeOnAir+0x58>
 8008af6:	f04f 0000 	mov.w	r0, #0
 8008afa:	f04f 0100 	mov.w	r1, #0
 8008afe:	e002      	b.n	8008b06 <SX1276GetTimeOnAir+0x5e>
 8008b00:	f04f 0000 	mov.w	r0, #0
 8008b04:	499b      	ldr	r1, [pc, #620]	@ (8008d74 <SX1276GetTimeOnAir+0x2cc>)
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8008b06:	f7f7 fbc5 	bl	8000294 <__adddf3>
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	4614      	mov	r4, r2
 8008b10:	461d      	mov	r5, r3
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 8008b12:	2030      	movs	r0, #48	@ 0x30
 8008b14:	f000 fe3e 	bl	8009794 <SX1276Read>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	f023 03f9 	bic.w	r3, r3, #249	@ 0xf9
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d003      	beq.n	8008b2a <SX1276GetTimeOnAir+0x82>
 8008b22:	f04f 0000 	mov.w	r0, #0
 8008b26:	4993      	ldr	r1, [pc, #588]	@ (8008d74 <SX1276GetTimeOnAir+0x2cc>)
 8008b28:	e003      	b.n	8008b32 <SX1276GetTimeOnAir+0x8a>
 8008b2a:	f04f 0000 	mov.w	r0, #0
 8008b2e:	f04f 0100 	mov.w	r1, #0
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8008b32:	4622      	mov	r2, r4
 8008b34:	462b      	mov	r3, r5
 8008b36:	f7f7 fbad 	bl	8000294 <__adddf3>
 8008b3a:	4602      	mov	r2, r0
 8008b3c:	460b      	mov	r3, r1
 8008b3e:	4614      	mov	r4, r2
 8008b40:	461d      	mov	r5, r3
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 8008b42:	79bb      	ldrb	r3, [r7, #6]
 8008b44:	4618      	mov	r0, r3
 8008b46:	f7f7 fcf1 	bl	800052c <__aeabi_i2d>
 8008b4a:	4602      	mov	r2, r0
 8008b4c:	460b      	mov	r3, r1
 8008b4e:	4620      	mov	r0, r4
 8008b50:	4629      	mov	r1, r5
 8008b52:	f7f7 fb9f 	bl	8000294 <__adddf3>
 8008b56:	4602      	mov	r2, r0
 8008b58:	460b      	mov	r3, r1
 8008b5a:	4614      	mov	r4, r2
 8008b5c:	461d      	mov	r5, r3
                                     pktLen +
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8008b5e:	4b84      	ldr	r3, [pc, #528]	@ (8008d70 <SX1276GetTimeOnAir+0x2c8>)
 8008b60:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d004      	beq.n	8008b72 <SX1276GetTimeOnAir+0xca>
 8008b68:	f04f 0000 	mov.w	r0, #0
 8008b6c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8008b70:	e003      	b.n	8008b7a <SX1276GetTimeOnAir+0xd2>
 8008b72:	f04f 0000 	mov.w	r0, #0
 8008b76:	f04f 0100 	mov.w	r1, #0
                                     pktLen +
 8008b7a:	4622      	mov	r2, r4
 8008b7c:	462b      	mov	r3, r5
 8008b7e:	f7f7 fb89 	bl	8000294 <__adddf3>
 8008b82:	4602      	mov	r2, r0
 8008b84:	460b      	mov	r3, r1
 8008b86:	4610      	mov	r0, r2
 8008b88:	4619      	mov	r1, r3
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8008b8a:	f04f 0200 	mov.w	r2, #0
 8008b8e:	4b7a      	ldr	r3, [pc, #488]	@ (8008d78 <SX1276GetTimeOnAir+0x2d0>)
 8008b90:	f7f7 fd36 	bl	8000600 <__aeabi_dmul>
 8008b94:	4602      	mov	r2, r0
 8008b96:	460b      	mov	r3, r1
 8008b98:	4614      	mov	r4, r2
 8008b9a:	461d      	mov	r5, r3
                                     SX1276.Settings.Fsk.Datarate ) * /* 1e6 */  1e3  );     // FIX by PK
 8008b9c:	4b74      	ldr	r3, [pc, #464]	@ (8008d70 <SX1276GetTimeOnAir+0x2c8>)
 8008b9e:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f7f7 fcb2 	bl	800050c <__aeabi_ui2d>
 8008ba8:	4602      	mov	r2, r0
 8008baa:	460b      	mov	r3, r1
 8008bac:	4620      	mov	r0, r4
 8008bae:	4629      	mov	r1, r5
 8008bb0:	f7f7 fe50 	bl	8000854 <__aeabi_ddiv>
 8008bb4:	4602      	mov	r2, r0
 8008bb6:	460b      	mov	r3, r1
 8008bb8:	4610      	mov	r0, r2
 8008bba:	4619      	mov	r1, r3
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8008bbc:	f04f 0200 	mov.w	r2, #0
 8008bc0:	4b6e      	ldr	r3, [pc, #440]	@ (8008d7c <SX1276GetTimeOnAir+0x2d4>)
 8008bc2:	f7f7 fd1d 	bl	8000600 <__aeabi_dmul>
 8008bc6:	4602      	mov	r2, r0
 8008bc8:	460b      	mov	r3, r1
 8008bca:	ec43 2b17 	vmov	d7, r2, r3
 8008bce:	eeb0 0a47 	vmov.f32	s0, s14
 8008bd2:	eef0 0a67 	vmov.f32	s1, s15
 8008bd6:	f002 fe4b 	bl	800b870 <round>
 8008bda:	ec53 2b10 	vmov	r2, r3, d0
 8008bde:	4610      	mov	r0, r2
 8008be0:	4619      	mov	r1, r3
 8008be2:	f7f7 ffcf 	bl	8000b84 <__aeabi_d2uiz>
 8008be6:	4603      	mov	r3, r0
 8008be8:	64fb      	str	r3, [r7, #76]	@ 0x4c
        }
        break;
 8008bea:	e10f      	b.n	8008e0c <SX1276GetTimeOnAir+0x364>
    case MODEM_LORA:
        {
            double bw = 0.0;
 8008bec:	f04f 0200 	mov.w	r2, #0
 8008bf0:	f04f 0300 	mov.w	r3, #0
 8008bf4:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
            // REMARK: When using LoRa modem only bandwidths 125, 250 and 500 kHz are supported
            switch( SX1276.Settings.LoRa.Bandwidth )
 8008bf8:	4b5d      	ldr	r3, [pc, #372]	@ (8008d70 <SX1276GetTimeOnAir+0x2c8>)
 8008bfa:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8008bfe:	2b09      	cmp	r3, #9
 8008c00:	d012      	beq.n	8008c28 <SX1276GetTimeOnAir+0x180>
 8008c02:	2b09      	cmp	r3, #9
 8008c04:	d816      	bhi.n	8008c34 <SX1276GetTimeOnAir+0x18c>
 8008c06:	2b07      	cmp	r3, #7
 8008c08:	d002      	beq.n	8008c10 <SX1276GetTimeOnAir+0x168>
 8008c0a:	2b08      	cmp	r3, #8
 8008c0c:	d006      	beq.n	8008c1c <SX1276GetTimeOnAir+0x174>
 8008c0e:	e011      	b.n	8008c34 <SX1276GetTimeOnAir+0x18c>
            //    break;
            //case 6: // 62.5 kHz
            //    bw = 625e2;
            //    break;
            case 7: // 125 kHz
                bw = 125e3;
 8008c10:	a351      	add	r3, pc, #324	@ (adr r3, 8008d58 <SX1276GetTimeOnAir+0x2b0>)
 8008c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c16:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
                break;
 8008c1a:	e00b      	b.n	8008c34 <SX1276GetTimeOnAir+0x18c>
            case 8: // 250 kHz
                bw = 250e3;
 8008c1c:	a350      	add	r3, pc, #320	@ (adr r3, 8008d60 <SX1276GetTimeOnAir+0x2b8>)
 8008c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c22:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
                break;
 8008c26:	e005      	b.n	8008c34 <SX1276GetTimeOnAir+0x18c>
            case 9: // 500 kHz
                bw = 500e3;
 8008c28:	a34f      	add	r3, pc, #316	@ (adr r3, 8008d68 <SX1276GetTimeOnAir+0x2c0>)
 8008c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c2e:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
                break;
 8008c32:	bf00      	nop
            }

            // Symbol rate : time for one symbol (secs)
            double rs = bw / ( 1 << SX1276.Settings.LoRa.Datarate );
 8008c34:	4b4e      	ldr	r3, [pc, #312]	@ (8008d70 <SX1276GetTimeOnAir+0x2c8>)
 8008c36:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c40:	4618      	mov	r0, r3
 8008c42:	f7f7 fc73 	bl	800052c <__aeabi_i2d>
 8008c46:	4602      	mov	r2, r0
 8008c48:	460b      	mov	r3, r1
 8008c4a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8008c4e:	f7f7 fe01 	bl	8000854 <__aeabi_ddiv>
 8008c52:	4602      	mov	r2, r0
 8008c54:	460b      	mov	r3, r1
 8008c56:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
            double ts = 1 / rs;
 8008c5a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008c5e:	f04f 0000 	mov.w	r0, #0
 8008c62:	4944      	ldr	r1, [pc, #272]	@ (8008d74 <SX1276GetTimeOnAir+0x2cc>)
 8008c64:	f7f7 fdf6 	bl	8000854 <__aeabi_ddiv>
 8008c68:	4602      	mov	r2, r0
 8008c6a:	460b      	mov	r3, r1
 8008c6c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
            // time of preamble
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 8008c70:	4b3f      	ldr	r3, [pc, #252]	@ (8008d70 <SX1276GetTimeOnAir+0x2c8>)
 8008c72:	f8b3 315a 	ldrh.w	r3, [r3, #346]	@ 0x15a
 8008c76:	4618      	mov	r0, r3
 8008c78:	f7f7 fc58 	bl	800052c <__aeabi_i2d>
 8008c7c:	f04f 0200 	mov.w	r2, #0
 8008c80:	4b3f      	ldr	r3, [pc, #252]	@ (8008d80 <SX1276GetTimeOnAir+0x2d8>)
 8008c82:	f7f7 fb07 	bl	8000294 <__adddf3>
 8008c86:	4602      	mov	r2, r0
 8008c88:	460b      	mov	r3, r1
 8008c8a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8008c8e:	f7f7 fcb7 	bl	8000600 <__aeabi_dmul>
 8008c92:	4602      	mov	r2, r0
 8008c94:	460b      	mov	r3, r1
 8008c96:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
            // Symbol length of payload and time
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8008c9a:	79bb      	ldrb	r3, [r7, #6]
 8008c9c:	00db      	lsls	r3, r3, #3
 8008c9e:	461a      	mov	r2, r3
 8008ca0:	4b33      	ldr	r3, [pc, #204]	@ (8008d70 <SX1276GetTimeOnAir+0x2c8>)
 8008ca2:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8008ca6:	009b      	lsls	r3, r3, #2
 8008ca8:	1ad3      	subs	r3, r2, r3
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 8008caa:	4a31      	ldr	r2, [pc, #196]	@ (8008d70 <SX1276GetTimeOnAir+0x2c8>)
 8008cac:	f892 215e 	ldrb.w	r2, [r2, #350]	@ 0x15e
 8008cb0:	0112      	lsls	r2, r2, #4
 8008cb2:	441a      	add	r2, r3
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 8008cb4:	4b2e      	ldr	r3, [pc, #184]	@ (8008d70 <SX1276GetTimeOnAir+0x2c8>)
 8008cb6:	f893 315c 	ldrb.w	r3, [r3, #348]	@ 0x15c
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d001      	beq.n	8008cc2 <SX1276GetTimeOnAir+0x21a>
 8008cbe:	2314      	movs	r3, #20
 8008cc0:	e000      	b.n	8008cc4 <SX1276GetTimeOnAir+0x21c>
 8008cc2:	2300      	movs	r3, #0
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 8008cc4:	1ad3      	subs	r3, r2, r3
 8008cc6:	331c      	adds	r3, #28
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f7f7 fc1f 	bl	800050c <__aeabi_ui2d>
 8008cce:	4604      	mov	r4, r0
 8008cd0:	460d      	mov	r5, r1
                                 ( double )( 4 * SX1276.Settings.LoRa.Datarate -
 8008cd2:	4b27      	ldr	r3, [pc, #156]	@ (8008d70 <SX1276GetTimeOnAir+0x2c8>)
 8008cd4:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8008cd8:	009a      	lsls	r2, r3, #2
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) *
 8008cda:	4b25      	ldr	r3, [pc, #148]	@ (8008d70 <SX1276GetTimeOnAir+0x2c8>)
 8008cdc:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d001      	beq.n	8008ce8 <SX1276GetTimeOnAir+0x240>
 8008ce4:	2302      	movs	r3, #2
 8008ce6:	e000      	b.n	8008cea <SX1276GetTimeOnAir+0x242>
 8008ce8:	2300      	movs	r3, #0
                                 ( double )( 4 * SX1276.Settings.LoRa.Datarate -
 8008cea:	1ad3      	subs	r3, r2, r3
 8008cec:	4618      	mov	r0, r3
 8008cee:	f7f7 fc0d 	bl	800050c <__aeabi_ui2d>
 8008cf2:	4602      	mov	r2, r0
 8008cf4:	460b      	mov	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8008cf6:	4620      	mov	r0, r4
 8008cf8:	4629      	mov	r1, r5
 8008cfa:	f7f7 fdab 	bl	8000854 <__aeabi_ddiv>
 8008cfe:	4602      	mov	r2, r0
 8008d00:	460b      	mov	r3, r1
 8008d02:	ec43 2b17 	vmov	d7, r2, r3
 8008d06:	eeb0 0a47 	vmov.f32	s0, s14
 8008d0a:	eef0 0a67 	vmov.f32	s1, s15
 8008d0e:	f002 fcb3 	bl	800b678 <ceil>
 8008d12:	ec55 4b10 	vmov	r4, r5, d0
                                 ( SX1276.Settings.LoRa.Coderate + 4 );
 8008d16:	4b16      	ldr	r3, [pc, #88]	@ (8008d70 <SX1276GetTimeOnAir+0x2c8>)
 8008d18:	f893 3159 	ldrb.w	r3, [r3, #345]	@ 0x159
 8008d1c:	3304      	adds	r3, #4
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) *
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f7f7 fc04 	bl	800052c <__aeabi_i2d>
 8008d24:	4602      	mov	r2, r0
 8008d26:	460b      	mov	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8008d28:	4620      	mov	r0, r4
 8008d2a:	4629      	mov	r1, r5
 8008d2c:	f7f7 fc68 	bl	8000600 <__aeabi_dmul>
 8008d30:	4602      	mov	r2, r0
 8008d32:	460b      	mov	r3, r1
 8008d34:	e9c7 2308 	strd	r2, r3, [r7, #32]
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 8008d38:	f04f 0200 	mov.w	r2, #0
 8008d3c:	f04f 0300 	mov.w	r3, #0
 8008d40:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008d44:	f7f7 feec 	bl	8000b20 <__aeabi_dcmpgt>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d01a      	beq.n	8008d84 <SX1276GetTimeOnAir+0x2dc>
 8008d4e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008d52:	e01b      	b.n	8008d8c <SX1276GetTimeOnAir+0x2e4>
 8008d54:	f3af 8000 	nop.w
 8008d58:	00000000 	.word	0x00000000
 8008d5c:	40fe8480 	.word	0x40fe8480
 8008d60:	00000000 	.word	0x00000000
 8008d64:	410e8480 	.word	0x410e8480
 8008d68:	00000000 	.word	0x00000000
 8008d6c:	411e8480 	.word	0x411e8480
 8008d70:	20000424 	.word	0x20000424
 8008d74:	3ff00000 	.word	0x3ff00000
 8008d78:	40200000 	.word	0x40200000
 8008d7c:	408f4000 	.word	0x408f4000
 8008d80:	40110000 	.word	0x40110000
 8008d84:	f04f 0000 	mov.w	r0, #0
 8008d88:	f04f 0100 	mov.w	r1, #0
 8008d8c:	f04f 0200 	mov.w	r2, #0
 8008d90:	4b23      	ldr	r3, [pc, #140]	@ (8008e20 <SX1276GetTimeOnAir+0x378>)
 8008d92:	f7f7 fa7f 	bl	8000294 <__adddf3>
 8008d96:	4602      	mov	r2, r0
 8008d98:	460b      	mov	r3, r1
 8008d9a:	e9c7 2306 	strd	r2, r3, [r7, #24]
            double tPayload = nPayload * ts;
 8008d9e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8008da2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008da6:	f7f7 fc2b 	bl	8000600 <__aeabi_dmul>
 8008daa:	4602      	mov	r2, r0
 8008dac:	460b      	mov	r3, r1
 8008dae:	e9c7 2304 	strd	r2, r3, [r7, #16]
            // Time on air
            double tOnAir = tPreamble + tPayload;
 8008db2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008db6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008dba:	f7f7 fa6b 	bl	8000294 <__adddf3>
 8008dbe:	4602      	mov	r2, r0
 8008dc0:	460b      	mov	r3, r1
 8008dc2:	e9c7 2302 	strd	r2, r3, [r7, #8]
            // return us secs
            airTime = floor( tOnAir * 1e3 + 0.999 );
 8008dc6:	f04f 0200 	mov.w	r2, #0
 8008dca:	4b16      	ldr	r3, [pc, #88]	@ (8008e24 <SX1276GetTimeOnAir+0x37c>)
 8008dcc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008dd0:	f7f7 fc16 	bl	8000600 <__aeabi_dmul>
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	460b      	mov	r3, r1
 8008dd8:	4610      	mov	r0, r2
 8008dda:	4619      	mov	r1, r3
 8008ddc:	a30e      	add	r3, pc, #56	@ (adr r3, 8008e18 <SX1276GetTimeOnAir+0x370>)
 8008dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de2:	f7f7 fa57 	bl	8000294 <__adddf3>
 8008de6:	4602      	mov	r2, r0
 8008de8:	460b      	mov	r3, r1
 8008dea:	ec43 2b17 	vmov	d7, r2, r3
 8008dee:	eeb0 0a47 	vmov.f32	s0, s14
 8008df2:	eef0 0a67 	vmov.f32	s1, s15
 8008df6:	f002 fcbb 	bl	800b770 <floor>
 8008dfa:	ec53 2b10 	vmov	r2, r3, d0
 8008dfe:	4610      	mov	r0, r2
 8008e00:	4619      	mov	r1, r3
 8008e02:	f7f7 febf 	bl	8000b84 <__aeabi_d2uiz>
 8008e06:	4603      	mov	r3, r0
 8008e08:	64fb      	str	r3, [r7, #76]	@ 0x4c
        }
        break;
 8008e0a:	bf00      	nop
    }
    return airTime;
 8008e0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3750      	adds	r7, #80	@ 0x50
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bdb0      	pop	{r4, r5, r7, pc}
 8008e16:	bf00      	nop
 8008e18:	d916872b 	.word	0xd916872b
 8008e1c:	3feff7ce 	.word	0x3feff7ce
 8008e20:	40200000 	.word	0x40200000
 8008e24:	408f4000 	.word	0x408f4000

08008e28 <SX1276Send>:

void SX1276Send( uint8_t *buffer, uint8_t size )
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b084      	sub	sp, #16
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	460b      	mov	r3, r1
 8008e32:	70fb      	strb	r3, [r7, #3]
    uint32_t txTimeout = 0;
 8008e34:	2300      	movs	r3, #0
 8008e36:	60fb      	str	r3, [r7, #12]

    switch( SX1276.Settings.Modem )
 8008e38:	4b53      	ldr	r3, [pc, #332]	@ (8008f88 <SX1276Send+0x160>)
 8008e3a:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d002      	beq.n	8008e48 <SX1276Send+0x20>
 8008e42:	2b01      	cmp	r3, #1
 8008e44:	d048      	beq.n	8008ed8 <SX1276Send+0xb0>
 8008e46:	e098      	b.n	8008f7a <SX1276Send+0x152>
    {
    case MODEM_FSK:
        {
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8008e48:	4b4f      	ldr	r3, [pc, #316]	@ (8008f88 <SX1276Send+0x160>)
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	f8a3 2148 	strh.w	r2, [r3, #328]	@ 0x148
            SX1276.Settings.FskPacketHandler.Size = size;
 8008e50:	78fb      	ldrb	r3, [r7, #3]
 8008e52:	461a      	mov	r2, r3
 8008e54:	4b4c      	ldr	r3, [pc, #304]	@ (8008f88 <SX1276Send+0x160>)
 8008e56:	f8a3 2146 	strh.w	r2, [r3, #326]	@ 0x146

            if( SX1276.Settings.Fsk.FixLen == false )
 8008e5a:	4b4b      	ldr	r3, [pc, #300]	@ (8008f88 <SX1276Send+0x160>)
 8008e5c:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8008e60:	f083 0301 	eor.w	r3, r3, #1
 8008e64:	b2db      	uxtb	r3, r3
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d005      	beq.n	8008e76 <SX1276Send+0x4e>
            {
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 8008e6a:	1cfb      	adds	r3, r7, #3
 8008e6c:	2101      	movs	r1, #1
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f000 fd08 	bl	8009884 <SX1276WriteFifo>
 8008e74:	e004      	b.n	8008e80 <SX1276Send+0x58>
            }
            else
            {
                SX1276Write( REG_PAYLOADLENGTH, size );
 8008e76:	78fb      	ldrb	r3, [r7, #3]
 8008e78:	4619      	mov	r1, r3
 8008e7a:	2032      	movs	r0, #50	@ 0x32
 8008e7c:	f000 fc78 	bl	8009770 <SX1276Write>
            }

            if( ( size > 0 ) && ( size <= 64 ) )
 8008e80:	78fb      	ldrb	r3, [r7, #3]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d007      	beq.n	8008e96 <SX1276Send+0x6e>
 8008e86:	78fb      	ldrb	r3, [r7, #3]
 8008e88:	2b40      	cmp	r3, #64	@ 0x40
 8008e8a:	d804      	bhi.n	8008e96 <SX1276Send+0x6e>
            {
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 8008e8c:	78fa      	ldrb	r2, [r7, #3]
 8008e8e:	4b3e      	ldr	r3, [pc, #248]	@ (8008f88 <SX1276Send+0x160>)
 8008e90:	f883 214b 	strb.w	r2, [r3, #331]	@ 0x14b
 8008e94:	e009      	b.n	8008eaa <SX1276Send+0x82>
            }
            else
            {
                memcpy1( RxTxBuffer, buffer, size );
 8008e96:	78fb      	ldrb	r3, [r7, #3]
 8008e98:	461a      	mov	r2, r3
 8008e9a:	6879      	ldr	r1, [r7, #4]
 8008e9c:	483b      	ldr	r0, [pc, #236]	@ (8008f8c <SX1276Send+0x164>)
 8008e9e:	f7ff f82f 	bl	8007f00 <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 8008ea2:	4b39      	ldr	r3, [pc, #228]	@ (8008f88 <SX1276Send+0x160>)
 8008ea4:	2220      	movs	r2, #32
 8008ea6:	f883 214b 	strb.w	r2, [r3, #331]	@ 0x14b
            }

            // Write payload buffer
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 8008eaa:	4b37      	ldr	r3, [pc, #220]	@ (8008f88 <SX1276Send+0x160>)
 8008eac:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 8008eb0:	4619      	mov	r1, r3
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f000 fce6 	bl	8009884 <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8008eb8:	4b33      	ldr	r3, [pc, #204]	@ (8008f88 <SX1276Send+0x160>)
 8008eba:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 8008ebe:	4a32      	ldr	r2, [pc, #200]	@ (8008f88 <SX1276Send+0x160>)
 8008ec0:	f892 214b 	ldrb.w	r2, [r2, #331]	@ 0x14b
 8008ec4:	4413      	add	r3, r2
 8008ec6:	b29a      	uxth	r2, r3
 8008ec8:	4b2f      	ldr	r3, [pc, #188]	@ (8008f88 <SX1276Send+0x160>)
 8008eca:	f8a3 2148 	strh.w	r2, [r3, #328]	@ 0x148
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 8008ece:	4b2e      	ldr	r3, [pc, #184]	@ (8008f88 <SX1276Send+0x160>)
 8008ed0:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8008ed4:	60fb      	str	r3, [r7, #12]
        }
        break;
 8008ed6:	e050      	b.n	8008f7a <SX1276Send+0x152>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 8008ed8:	4b2b      	ldr	r3, [pc, #172]	@ (8008f88 <SX1276Send+0x160>)
 8008eda:	f893 3161 	ldrb.w	r3, [r3, #353]	@ 0x161
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d00f      	beq.n	8008f02 <SX1276Send+0xda>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 8008ee2:	2033      	movs	r0, #51	@ 0x33
 8008ee4:	f000 fc56 	bl	8009794 <SX1276Read>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	f023 0341 	bic.w	r3, r3, #65	@ 0x41
 8008eee:	b2db      	uxtb	r3, r3
 8008ef0:	4619      	mov	r1, r3
 8008ef2:	2033      	movs	r0, #51	@ 0x33
 8008ef4:	f000 fc3c 	bl	8009770 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8008ef8:	2119      	movs	r1, #25
 8008efa:	203b      	movs	r0, #59	@ 0x3b
 8008efc:	f000 fc38 	bl	8009770 <SX1276Write>
 8008f00:	e013      	b.n	8008f2a <SX1276Send+0x102>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8008f02:	2033      	movs	r0, #51	@ 0x33
 8008f04:	f000 fc46 	bl	8009794 <SX1276Read>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	b25b      	sxtb	r3, r3
 8008f0c:	f023 0341 	bic.w	r3, r3, #65	@ 0x41
 8008f10:	b25b      	sxtb	r3, r3
 8008f12:	f043 0301 	orr.w	r3, r3, #1
 8008f16:	b25b      	sxtb	r3, r3
 8008f18:	b2db      	uxtb	r3, r3
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	2033      	movs	r0, #51	@ 0x33
 8008f1e:	f000 fc27 	bl	8009770 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8008f22:	211d      	movs	r1, #29
 8008f24:	203b      	movs	r0, #59	@ 0x3b
 8008f26:	f000 fc23 	bl	8009770 <SX1276Write>
            }

            SX1276.Settings.LoRaPacketHandler.Size = size;
 8008f2a:	78fa      	ldrb	r2, [r7, #3]
 8008f2c:	4b16      	ldr	r3, [pc, #88]	@ (8008f88 <SX1276Send+0x160>)
 8008f2e:	f883 216c 	strb.w	r2, [r3, #364]	@ 0x16c

            // Initializes the payload size
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 8008f32:	78fb      	ldrb	r3, [r7, #3]
 8008f34:	4619      	mov	r1, r3
 8008f36:	2022      	movs	r0, #34	@ 0x22
 8008f38:	f000 fc1a 	bl	8009770 <SX1276Write>

            // Full buffer used for Tx
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 8008f3c:	2100      	movs	r1, #0
 8008f3e:	200e      	movs	r0, #14
 8008f40:	f000 fc16 	bl	8009770 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8008f44:	2100      	movs	r1, #0
 8008f46:	200d      	movs	r0, #13
 8008f48:	f000 fc12 	bl	8009770 <SX1276Write>

            // FIFO operations can not take place in Sleep mode
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 8008f4c:	2001      	movs	r0, #1
 8008f4e:	f000 fc21 	bl	8009794 <SX1276Read>
 8008f52:	4603      	mov	r3, r0
 8008f54:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d104      	bne.n	8008f66 <SX1276Send+0x13e>
            {
                SX1276SetStby( );
 8008f5c:	f000 f830 	bl	8008fc0 <SX1276SetStby>
                DelayMs( 1 );
 8008f60:	2001      	movs	r0, #1
 8008f62:	f7fd fb23 	bl	80065ac <DelayMs>
            }
            // Write payload buffer
            SX1276WriteFifo( buffer, size );
 8008f66:	78fb      	ldrb	r3, [r7, #3]
 8008f68:	4619      	mov	r1, r3
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 fc8a 	bl	8009884 <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 8008f70:	4b05      	ldr	r3, [pc, #20]	@ (8008f88 <SX1276Send+0x160>)
 8008f72:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 8008f76:	60fb      	str	r3, [r7, #12]
        }
        break;
 8008f78:	bf00      	nop
    }

    SX1276SetTx( txTimeout );
 8008f7a:	68f8      	ldr	r0, [r7, #12]
 8008f7c:	f000 fa8c 	bl	8009498 <SX1276SetTx>
}
 8008f80:	bf00      	nop
 8008f82:	3710      	adds	r7, #16
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}
 8008f88:	20000424 	.word	0x20000424
 8008f8c:	20000324 	.word	0x20000324

08008f90 <SX1276SetSleep>:

void SX1276SetSleep( void )
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 8008f94:	4807      	ldr	r0, [pc, #28]	@ (8008fb4 <SX1276SetSleep+0x24>)
 8008f96:	f7fe fec1 	bl	8007d1c <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8008f9a:	4807      	ldr	r0, [pc, #28]	@ (8008fb8 <SX1276SetSleep+0x28>)
 8008f9c:	f7fe febe 	bl	8007d1c <TimerStop>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 8008fa0:	2000      	movs	r0, #0
 8008fa2:	f000 fb75 	bl	8009690 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 8008fa6:	4b05      	ldr	r3, [pc, #20]	@ (8008fbc <SX1276SetSleep+0x2c>)
 8008fa8:	2200      	movs	r2, #0
 8008faa:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
}
 8008fae:	bf00      	nop
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	200005a8 	.word	0x200005a8
 8008fb8:	20000594 	.word	0x20000594
 8008fbc:	20000424 	.word	0x20000424

08008fc0 <SX1276SetStby>:

void SX1276SetStby( void )
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 8008fc4:	4807      	ldr	r0, [pc, #28]	@ (8008fe4 <SX1276SetStby+0x24>)
 8008fc6:	f7fe fea9 	bl	8007d1c <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8008fca:	4807      	ldr	r0, [pc, #28]	@ (8008fe8 <SX1276SetStby+0x28>)
 8008fcc:	f7fe fea6 	bl	8007d1c <TimerStop>

    SX1276SetOpMode( RF_OPMODE_STANDBY );
 8008fd0:	2001      	movs	r0, #1
 8008fd2:	f000 fb5d 	bl	8009690 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 8008fd6:	4b05      	ldr	r3, [pc, #20]	@ (8008fec <SX1276SetStby+0x2c>)
 8008fd8:	2200      	movs	r2, #0
 8008fda:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
}
 8008fde:	bf00      	nop
 8008fe0:	bd80      	pop	{r7, pc}
 8008fe2:	bf00      	nop
 8008fe4:	200005a8 	.word	0x200005a8
 8008fe8:	20000594 	.word	0x20000594
 8008fec:	20000424 	.word	0x20000424

08008ff0 <SX1276SetRx>:

void SX1276SetRx( uint32_t timeout )
{
 8008ff0:	b5b0      	push	{r4, r5, r7, lr}
 8008ff2:	b084      	sub	sp, #16
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
    bool rxContinuous = false;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	73fb      	strb	r3, [r7, #15]

    switch( SX1276.Settings.Modem )
 8008ffc:	4bc4      	ldr	r3, [pc, #784]	@ (8009310 <SX1276SetRx+0x320>)
 8008ffe:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 8009002:	2b00      	cmp	r3, #0
 8009004:	d002      	beq.n	800900c <SX1276SetRx+0x1c>
 8009006:	2b01      	cmp	r3, #1
 8009008:	d03e      	beq.n	8009088 <SX1276SetRx+0x98>
 800900a:	e19b      	b.n	8009344 <SX1276SetRx+0x354>
    {
    case MODEM_FSK:
        {
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 800900c:	4bc0      	ldr	r3, [pc, #768]	@ (8009310 <SX1276SetRx+0x320>)
 800900e:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 8009012:	73fb      	strb	r3, [r7, #15]
            // DIO1=FifoLevel
            // DIO2=SyncAddr
            // DIO3=FifoEmpty
            // DIO4=Preamble
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8009014:	2040      	movs	r0, #64	@ 0x40
 8009016:	f000 fbbd 	bl	8009794 <SX1276Read>
 800901a:	4603      	mov	r3, r0
 800901c:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
                                                                            RF_DIOMAPPING1_DIO0_00 |
 800901e:	f003 0303 	and.w	r3, r3, #3
 8009022:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_00 |
 8009024:	f043 030c 	orr.w	r3, r3, #12
 8009028:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800902a:	b2db      	uxtb	r3, r3
 800902c:	4619      	mov	r1, r3
 800902e:	2040      	movs	r0, #64	@ 0x40
 8009030:	f000 fb9e 	bl	8009770 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO2_11 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8009034:	2041      	movs	r0, #65	@ 0x41
 8009036:	f000 fbad 	bl	8009794 <SX1276Read>
 800903a:	4603      	mov	r3, r0
 800903c:	f063 033e 	orn	r3, r3, #62	@ 0x3e
 8009040:	b2db      	uxtb	r3, r3
 8009042:	4619      	mov	r1, r3
 8009044:	2041      	movs	r0, #65	@ 0x41
 8009046:	f000 fb93 	bl	8009770 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) |
                                                                            RF_DIOMAPPING2_DIO4_11 |
                                                                            RF_DIOMAPPING2_MAP_PREAMBLEDETECT );

            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 800904a:	2035      	movs	r0, #53	@ 0x35
 800904c:	f000 fba2 	bl	8009794 <SX1276Read>
 8009050:	4603      	mov	r3, r0
 8009052:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009056:	b2da      	uxtb	r2, r3
 8009058:	4bad      	ldr	r3, [pc, #692]	@ (8009310 <SX1276SetRx+0x320>)
 800905a:	f883 214a 	strb.w	r2, [r3, #330]	@ 0x14a

            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 800905e:	211e      	movs	r1, #30
 8009060:	200d      	movs	r0, #13
 8009062:	f000 fb85 	bl	8009770 <SX1276Write>

            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8009066:	4baa      	ldr	r3, [pc, #680]	@ (8009310 <SX1276SetRx+0x320>)
 8009068:	2200      	movs	r2, #0
 800906a:	f883 213c 	strb.w	r2, [r3, #316]	@ 0x13c
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 800906e:	4ba8      	ldr	r3, [pc, #672]	@ (8009310 <SX1276SetRx+0x320>)
 8009070:	2200      	movs	r2, #0
 8009072:	f883 213d 	strb.w	r2, [r3, #317]	@ 0x13d
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8009076:	4ba6      	ldr	r3, [pc, #664]	@ (8009310 <SX1276SetRx+0x320>)
 8009078:	2200      	movs	r2, #0
 800907a:	f8a3 2148 	strh.w	r2, [r3, #328]	@ 0x148
            SX1276.Settings.FskPacketHandler.Size = 0;
 800907e:	4ba4      	ldr	r3, [pc, #656]	@ (8009310 <SX1276SetRx+0x320>)
 8009080:	2200      	movs	r2, #0
 8009082:	f8a3 2146 	strh.w	r2, [r3, #326]	@ 0x146
        }
        break;
 8009086:	e15d      	b.n	8009344 <SX1276SetRx+0x354>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 8009088:	4ba1      	ldr	r3, [pc, #644]	@ (8009310 <SX1276SetRx+0x320>)
 800908a:	f893 3161 	ldrb.w	r3, [r3, #353]	@ 0x161
 800908e:	2b00      	cmp	r3, #0
 8009090:	d00f      	beq.n	80090b2 <SX1276SetRx+0xc2>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 8009092:	2033      	movs	r0, #51	@ 0x33
 8009094:	f000 fb7e 	bl	8009794 <SX1276Read>
 8009098:	4603      	mov	r3, r0
 800909a:	f043 0341 	orr.w	r3, r3, #65	@ 0x41
 800909e:	b2db      	uxtb	r3, r3
 80090a0:	4619      	mov	r1, r3
 80090a2:	2033      	movs	r0, #51	@ 0x33
 80090a4:	f000 fb64 	bl	8009770 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 80090a8:	2119      	movs	r1, #25
 80090aa:	203b      	movs	r0, #59	@ 0x3b
 80090ac:	f000 fb60 	bl	8009770 <SX1276Write>
 80090b0:	e013      	b.n	80090da <SX1276SetRx+0xea>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 80090b2:	2033      	movs	r0, #51	@ 0x33
 80090b4:	f000 fb6e 	bl	8009794 <SX1276Read>
 80090b8:	4603      	mov	r3, r0
 80090ba:	b25b      	sxtb	r3, r3
 80090bc:	f023 0341 	bic.w	r3, r3, #65	@ 0x41
 80090c0:	b25b      	sxtb	r3, r3
 80090c2:	f043 0301 	orr.w	r3, r3, #1
 80090c6:	b25b      	sxtb	r3, r3
 80090c8:	b2db      	uxtb	r3, r3
 80090ca:	4619      	mov	r1, r3
 80090cc:	2033      	movs	r0, #51	@ 0x33
 80090ce:	f000 fb4f 	bl	8009770 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 80090d2:	211d      	movs	r1, #29
 80090d4:	203b      	movs	r0, #59	@ 0x3b
 80090d6:	f000 fb4b 	bl	8009770 <SX1276Write>
            }

            // ERRATA 2.3 - Receiver Spurious Reception of a LoRa Signal
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 80090da:	4b8d      	ldr	r3, [pc, #564]	@ (8009310 <SX1276SetRx+0x320>)
 80090dc:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80090e0:	2b08      	cmp	r3, #8
 80090e2:	f200 80d6 	bhi.w	8009292 <SX1276SetRx+0x2a2>
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 80090e6:	2031      	movs	r0, #49	@ 0x31
 80090e8:	f000 fb54 	bl	8009794 <SX1276Read>
 80090ec:	4603      	mov	r3, r0
 80090ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80090f2:	b2db      	uxtb	r3, r3
 80090f4:	4619      	mov	r1, r3
 80090f6:	2031      	movs	r0, #49	@ 0x31
 80090f8:	f000 fb3a 	bl	8009770 <SX1276Write>
                SX1276Write( REG_LR_TEST30, 0x00 );
 80090fc:	2100      	movs	r1, #0
 80090fe:	2030      	movs	r0, #48	@ 0x30
 8009100:	f000 fb36 	bl	8009770 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 8009104:	4b82      	ldr	r3, [pc, #520]	@ (8009310 <SX1276SetRx+0x320>)
 8009106:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800910a:	2b08      	cmp	r3, #8
 800910c:	f200 80cc 	bhi.w	80092a8 <SX1276SetRx+0x2b8>
 8009110:	a201      	add	r2, pc, #4	@ (adr r2, 8009118 <SX1276SetRx+0x128>)
 8009112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009116:	bf00      	nop
 8009118:	0800913d 	.word	0x0800913d
 800911c:	08009171 	.word	0x08009171
 8009120:	080091a5 	.word	0x080091a5
 8009124:	080091d9 	.word	0x080091d9
 8009128:	0800920d 	.word	0x0800920d
 800912c:	08009241 	.word	0x08009241
 8009130:	08009275 	.word	0x08009275
 8009134:	0800927f 	.word	0x0800927f
 8009138:	08009289 	.word	0x08009289
                {
                case 0: // 7.8 kHz
                    SX1276Write( REG_LR_TEST2F, 0x48 );
 800913c:	2148      	movs	r1, #72	@ 0x48
 800913e:	202f      	movs	r0, #47	@ 0x2f
 8009140:	f000 fb16 	bl	8009770 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7.81e3 );
 8009144:	4b72      	ldr	r3, [pc, #456]	@ (8009310 <SX1276SetRx+0x320>)
 8009146:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800914a:	4618      	mov	r0, r3
 800914c:	f7f7 f9de 	bl	800050c <__aeabi_ui2d>
 8009150:	a363      	add	r3, pc, #396	@ (adr r3, 80092e0 <SX1276SetRx+0x2f0>)
 8009152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009156:	f7f7 f89d 	bl	8000294 <__adddf3>
 800915a:	4602      	mov	r2, r0
 800915c:	460b      	mov	r3, r1
 800915e:	4610      	mov	r0, r2
 8009160:	4619      	mov	r1, r3
 8009162:	f7f7 fd0f 	bl	8000b84 <__aeabi_d2uiz>
 8009166:	4603      	mov	r3, r0
 8009168:	4618      	mov	r0, r3
 800916a:	f7fe ff51 	bl	8008010 <SX1276SetChannel>
                    break;
 800916e:	e09b      	b.n	80092a8 <SX1276SetRx+0x2b8>
                case 1: // 10.4 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 8009170:	2144      	movs	r1, #68	@ 0x44
 8009172:	202f      	movs	r0, #47	@ 0x2f
 8009174:	f000 fafc 	bl	8009770 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10.42e3 );
 8009178:	4b65      	ldr	r3, [pc, #404]	@ (8009310 <SX1276SetRx+0x320>)
 800917a:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800917e:	4618      	mov	r0, r3
 8009180:	f7f7 f9c4 	bl	800050c <__aeabi_ui2d>
 8009184:	a358      	add	r3, pc, #352	@ (adr r3, 80092e8 <SX1276SetRx+0x2f8>)
 8009186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800918a:	f7f7 f883 	bl	8000294 <__adddf3>
 800918e:	4602      	mov	r2, r0
 8009190:	460b      	mov	r3, r1
 8009192:	4610      	mov	r0, r2
 8009194:	4619      	mov	r1, r3
 8009196:	f7f7 fcf5 	bl	8000b84 <__aeabi_d2uiz>
 800919a:	4603      	mov	r3, r0
 800919c:	4618      	mov	r0, r3
 800919e:	f7fe ff37 	bl	8008010 <SX1276SetChannel>
                    break;
 80091a2:	e081      	b.n	80092a8 <SX1276SetRx+0x2b8>
                case 2: // 15.6 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 80091a4:	2144      	movs	r1, #68	@ 0x44
 80091a6:	202f      	movs	r0, #47	@ 0x2f
 80091a8:	f000 fae2 	bl	8009770 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15.62e3 );
 80091ac:	4b58      	ldr	r3, [pc, #352]	@ (8009310 <SX1276SetRx+0x320>)
 80091ae:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 80091b2:	4618      	mov	r0, r3
 80091b4:	f7f7 f9aa 	bl	800050c <__aeabi_ui2d>
 80091b8:	a34d      	add	r3, pc, #308	@ (adr r3, 80092f0 <SX1276SetRx+0x300>)
 80091ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091be:	f7f7 f869 	bl	8000294 <__adddf3>
 80091c2:	4602      	mov	r2, r0
 80091c4:	460b      	mov	r3, r1
 80091c6:	4610      	mov	r0, r2
 80091c8:	4619      	mov	r1, r3
 80091ca:	f7f7 fcdb 	bl	8000b84 <__aeabi_d2uiz>
 80091ce:	4603      	mov	r3, r0
 80091d0:	4618      	mov	r0, r3
 80091d2:	f7fe ff1d 	bl	8008010 <SX1276SetChannel>
                    break;
 80091d6:	e067      	b.n	80092a8 <SX1276SetRx+0x2b8>
                case 3: // 20.8 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 80091d8:	2144      	movs	r1, #68	@ 0x44
 80091da:	202f      	movs	r0, #47	@ 0x2f
 80091dc:	f000 fac8 	bl	8009770 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20.83e3 );
 80091e0:	4b4b      	ldr	r3, [pc, #300]	@ (8009310 <SX1276SetRx+0x320>)
 80091e2:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 80091e6:	4618      	mov	r0, r3
 80091e8:	f7f7 f990 	bl	800050c <__aeabi_ui2d>
 80091ec:	a342      	add	r3, pc, #264	@ (adr r3, 80092f8 <SX1276SetRx+0x308>)
 80091ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f2:	f7f7 f84f 	bl	8000294 <__adddf3>
 80091f6:	4602      	mov	r2, r0
 80091f8:	460b      	mov	r3, r1
 80091fa:	4610      	mov	r0, r2
 80091fc:	4619      	mov	r1, r3
 80091fe:	f7f7 fcc1 	bl	8000b84 <__aeabi_d2uiz>
 8009202:	4603      	mov	r3, r0
 8009204:	4618      	mov	r0, r3
 8009206:	f7fe ff03 	bl	8008010 <SX1276SetChannel>
                    break;
 800920a:	e04d      	b.n	80092a8 <SX1276SetRx+0x2b8>
                case 4: // 31.2 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 800920c:	2144      	movs	r1, #68	@ 0x44
 800920e:	202f      	movs	r0, #47	@ 0x2f
 8009210:	f000 faae 	bl	8009770 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31.25e3 );
 8009214:	4b3e      	ldr	r3, [pc, #248]	@ (8009310 <SX1276SetRx+0x320>)
 8009216:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800921a:	4618      	mov	r0, r3
 800921c:	f7f7 f976 	bl	800050c <__aeabi_ui2d>
 8009220:	a337      	add	r3, pc, #220	@ (adr r3, 8009300 <SX1276SetRx+0x310>)
 8009222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009226:	f7f7 f835 	bl	8000294 <__adddf3>
 800922a:	4602      	mov	r2, r0
 800922c:	460b      	mov	r3, r1
 800922e:	4610      	mov	r0, r2
 8009230:	4619      	mov	r1, r3
 8009232:	f7f7 fca7 	bl	8000b84 <__aeabi_d2uiz>
 8009236:	4603      	mov	r3, r0
 8009238:	4618      	mov	r0, r3
 800923a:	f7fe fee9 	bl	8008010 <SX1276SetChannel>
                    break;
 800923e:	e033      	b.n	80092a8 <SX1276SetRx+0x2b8>
                case 5: // 41.4 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 8009240:	2144      	movs	r1, #68	@ 0x44
 8009242:	202f      	movs	r0, #47	@ 0x2f
 8009244:	f000 fa94 	bl	8009770 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41.67e3 );
 8009248:	4b31      	ldr	r3, [pc, #196]	@ (8009310 <SX1276SetRx+0x320>)
 800924a:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800924e:	4618      	mov	r0, r3
 8009250:	f7f7 f95c 	bl	800050c <__aeabi_ui2d>
 8009254:	a32c      	add	r3, pc, #176	@ (adr r3, 8009308 <SX1276SetRx+0x318>)
 8009256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800925a:	f7f7 f81b 	bl	8000294 <__adddf3>
 800925e:	4602      	mov	r2, r0
 8009260:	460b      	mov	r3, r1
 8009262:	4610      	mov	r0, r2
 8009264:	4619      	mov	r1, r3
 8009266:	f7f7 fc8d 	bl	8000b84 <__aeabi_d2uiz>
 800926a:	4603      	mov	r3, r0
 800926c:	4618      	mov	r0, r3
 800926e:	f7fe fecf 	bl	8008010 <SX1276SetChannel>
                    break;
 8009272:	e019      	b.n	80092a8 <SX1276SetRx+0x2b8>
                case 6: // 62.5 kHz
                    SX1276Write( REG_LR_TEST2F, 0x40 );
 8009274:	2140      	movs	r1, #64	@ 0x40
 8009276:	202f      	movs	r0, #47	@ 0x2f
 8009278:	f000 fa7a 	bl	8009770 <SX1276Write>
                    break;
 800927c:	e014      	b.n	80092a8 <SX1276SetRx+0x2b8>
                case 7: // 125 kHz
                    SX1276Write( REG_LR_TEST2F, 0x40 );
 800927e:	2140      	movs	r1, #64	@ 0x40
 8009280:	202f      	movs	r0, #47	@ 0x2f
 8009282:	f000 fa75 	bl	8009770 <SX1276Write>
                    break;
 8009286:	e00f      	b.n	80092a8 <SX1276SetRx+0x2b8>
                case 8: // 250 kHz
                    SX1276Write( REG_LR_TEST2F, 0x40 );
 8009288:	2140      	movs	r1, #64	@ 0x40
 800928a:	202f      	movs	r0, #47	@ 0x2f
 800928c:	f000 fa70 	bl	8009770 <SX1276Write>
                    break;
 8009290:	e00a      	b.n	80092a8 <SX1276SetRx+0x2b8>
                }
            }
            else
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 8009292:	2031      	movs	r0, #49	@ 0x31
 8009294:	f000 fa7e 	bl	8009794 <SX1276Read>
 8009298:	4603      	mov	r3, r0
 800929a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800929e:	b2db      	uxtb	r3, r3
 80092a0:	4619      	mov	r1, r3
 80092a2:	2031      	movs	r0, #49	@ 0x31
 80092a4:	f000 fa64 	bl	8009770 <SX1276Write>
            }

            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 80092a8:	4b19      	ldr	r3, [pc, #100]	@ (8009310 <SX1276SetRx+0x320>)
 80092aa:	f893 3162 	ldrb.w	r3, [r3, #354]	@ 0x162
 80092ae:	73fb      	strb	r3, [r7, #15]

            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80092b0:	4b17      	ldr	r3, [pc, #92]	@ (8009310 <SX1276SetRx+0x320>)
 80092b2:	f893 315f 	ldrb.w	r3, [r3, #351]	@ 0x15f
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d02c      	beq.n	8009314 <SX1276SetRx+0x324>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 80092ba:	211d      	movs	r1, #29
 80092bc:	2011      	movs	r0, #17
 80092be:	f000 fa57 	bl	8009770 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 80092c2:	2040      	movs	r0, #64	@ 0x40
 80092c4:	f000 fa66 	bl	8009794 <SX1276Read>
 80092c8:	4603      	mov	r3, r0
 80092ca:	f003 0333 	and.w	r3, r3, #51	@ 0x33
 80092ce:	b2db      	uxtb	r3, r3
 80092d0:	4619      	mov	r1, r3
 80092d2:	2040      	movs	r0, #64	@ 0x40
 80092d4:	f000 fa4c 	bl	8009770 <SX1276Write>
 80092d8:	e02b      	b.n	8009332 <SX1276SetRx+0x342>
 80092da:	bf00      	nop
 80092dc:	f3af 8000 	nop.w
 80092e0:	00000000 	.word	0x00000000
 80092e4:	40be8200 	.word	0x40be8200
 80092e8:	00000000 	.word	0x00000000
 80092ec:	40c45a00 	.word	0x40c45a00
 80092f0:	00000000 	.word	0x00000000
 80092f4:	40ce8200 	.word	0x40ce8200
 80092f8:	00000000 	.word	0x00000000
 80092fc:	40d45780 	.word	0x40d45780
 8009300:	00000000 	.word	0x00000000
 8009304:	40de8480 	.word	0x40de8480
 8009308:	00000000 	.word	0x00000000
 800930c:	40e458c0 	.word	0x40e458c0
 8009310:	20000424 	.word	0x20000424
            }
            else
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8009314:	211f      	movs	r1, #31
 8009316:	2011      	movs	r0, #17
 8009318:	f000 fa2a 	bl	8009770 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 800931c:	2040      	movs	r0, #64	@ 0x40
 800931e:	f000 fa39 	bl	8009794 <SX1276Read>
 8009322:	4603      	mov	r3, r0
 8009324:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009328:	b2db      	uxtb	r3, r3
 800932a:	4619      	mov	r1, r3
 800932c:	2040      	movs	r0, #64	@ 0x40
 800932e:	f000 fa1f 	bl	8009770 <SX1276Write>
            }
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 8009332:	2100      	movs	r1, #0
 8009334:	200f      	movs	r0, #15
 8009336:	f000 fa1b 	bl	8009770 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 800933a:	2100      	movs	r1, #0
 800933c:	200d      	movs	r0, #13
 800933e:	f000 fa17 	bl	8009770 <SX1276Write>
        }
        break;
 8009342:	bf00      	nop
    }

    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 8009344:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009348:	2100      	movs	r1, #0
 800934a:	484a      	ldr	r0, [pc, #296]	@ (8009474 <SX1276SetRx+0x484>)
 800934c:	f001 fa48 	bl	800a7e0 <memset>

    SX1276.Settings.State = RF_RX_RUNNING;
 8009350:	4b49      	ldr	r3, [pc, #292]	@ (8009478 <SX1276SetRx+0x488>)
 8009352:	2201      	movs	r2, #1
 8009354:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
    if( timeout != 0 )
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d006      	beq.n	800936c <SX1276SetRx+0x37c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 800935e:	6879      	ldr	r1, [r7, #4]
 8009360:	4846      	ldr	r0, [pc, #280]	@ (800947c <SX1276SetRx+0x48c>)
 8009362:	f7fe fd99 	bl	8007e98 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 8009366:	4845      	ldr	r0, [pc, #276]	@ (800947c <SX1276SetRx+0x48c>)
 8009368:	f7fe fb90 	bl	8007a8c <TimerStart>
    }

    if( SX1276.Settings.Modem == MODEM_FSK )
 800936c:	4b42      	ldr	r3, [pc, #264]	@ (8009478 <SX1276SetRx+0x488>)
 800936e:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 8009372:	2b00      	cmp	r3, #0
 8009374:	d16f      	bne.n	8009456 <SX1276SetRx+0x466>
    {
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8009376:	2005      	movs	r0, #5
 8009378:	f000 f98a 	bl	8009690 <SX1276SetOpMode>

        if( rxContinuous == false )
 800937c:	7bfb      	ldrb	r3, [r7, #15]
 800937e:	f083 0301 	eor.w	r3, r3, #1
 8009382:	b2db      	uxtb	r3, r3
 8009384:	2b00      	cmp	r3, #0
 8009386:	d070      	beq.n	800946a <SX1276SetRx+0x47a>
        {
            TimerSetValue( &RxTimeoutSyncWord, ceil( ( 8.0 * ( SX1276.Settings.Fsk.PreambleLen +
 8009388:	4b3b      	ldr	r3, [pc, #236]	@ (8009478 <SX1276SetRx+0x488>)
 800938a:	f8b3 3130 	ldrh.w	r3, [r3, #304]	@ 0x130
 800938e:	4618      	mov	r0, r3
 8009390:	f7f7 f8cc 	bl	800052c <__aeabi_i2d>
 8009394:	4604      	mov	r4, r0
 8009396:	460d      	mov	r5, r1
                                                             ( ( SX1276Read( REG_SYNCCONFIG ) &
 8009398:	2027      	movs	r0, #39	@ 0x27
 800939a:	f000 f9fb 	bl	8009794 <SX1276Read>
 800939e:	4603      	mov	r3, r0
 80093a0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
                                                                ~RF_SYNCCONFIG_SYNCSIZE_MASK ) +
 80093a4:	4618      	mov	r0, r3
 80093a6:	f7f7 f8c1 	bl	800052c <__aeabi_i2d>
 80093aa:	f04f 0200 	mov.w	r2, #0
 80093ae:	4b34      	ldr	r3, [pc, #208]	@ (8009480 <SX1276SetRx+0x490>)
 80093b0:	f7f6 ff70 	bl	8000294 <__adddf3>
 80093b4:	4602      	mov	r2, r0
 80093b6:	460b      	mov	r3, r1
            TimerSetValue( &RxTimeoutSyncWord, ceil( ( 8.0 * ( SX1276.Settings.Fsk.PreambleLen +
 80093b8:	4620      	mov	r0, r4
 80093ba:	4629      	mov	r1, r5
 80093bc:	f7f6 ff6a 	bl	8000294 <__adddf3>
 80093c0:	4602      	mov	r2, r0
 80093c2:	460b      	mov	r3, r1
 80093c4:	4610      	mov	r0, r2
 80093c6:	4619      	mov	r1, r3
                                                                1.0 ) + 10.0 ) /
 80093c8:	f04f 0200 	mov.w	r2, #0
 80093cc:	4b2d      	ldr	r3, [pc, #180]	@ (8009484 <SX1276SetRx+0x494>)
 80093ce:	f7f6 ff61 	bl	8000294 <__adddf3>
 80093d2:	4602      	mov	r2, r0
 80093d4:	460b      	mov	r3, r1
 80093d6:	4610      	mov	r0, r2
 80093d8:	4619      	mov	r1, r3
            TimerSetValue( &RxTimeoutSyncWord, ceil( ( 8.0 * ( SX1276.Settings.Fsk.PreambleLen +
 80093da:	f04f 0200 	mov.w	r2, #0
 80093de:	4b2a      	ldr	r3, [pc, #168]	@ (8009488 <SX1276SetRx+0x498>)
 80093e0:	f7f7 f90e 	bl	8000600 <__aeabi_dmul>
 80093e4:	4602      	mov	r2, r0
 80093e6:	460b      	mov	r3, r1
 80093e8:	4614      	mov	r4, r2
 80093ea:	461d      	mov	r5, r3
                                                             ( double )SX1276.Settings.Fsk.Datarate ) * 1e3 ) + 4 );
 80093ec:	4b22      	ldr	r3, [pc, #136]	@ (8009478 <SX1276SetRx+0x488>)
 80093ee:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 80093f2:	4618      	mov	r0, r3
 80093f4:	f7f7 f88a 	bl	800050c <__aeabi_ui2d>
 80093f8:	4602      	mov	r2, r0
 80093fa:	460b      	mov	r3, r1
                                                                1.0 ) + 10.0 ) /
 80093fc:	4620      	mov	r0, r4
 80093fe:	4629      	mov	r1, r5
 8009400:	f7f7 fa28 	bl	8000854 <__aeabi_ddiv>
 8009404:	4602      	mov	r2, r0
 8009406:	460b      	mov	r3, r1
 8009408:	4610      	mov	r0, r2
 800940a:	4619      	mov	r1, r3
            TimerSetValue( &RxTimeoutSyncWord, ceil( ( 8.0 * ( SX1276.Settings.Fsk.PreambleLen +
 800940c:	f04f 0200 	mov.w	r2, #0
 8009410:	4b1e      	ldr	r3, [pc, #120]	@ (800948c <SX1276SetRx+0x49c>)
 8009412:	f7f7 f8f5 	bl	8000600 <__aeabi_dmul>
 8009416:	4602      	mov	r2, r0
 8009418:	460b      	mov	r3, r1
 800941a:	ec43 2b17 	vmov	d7, r2, r3
 800941e:	eeb0 0a47 	vmov.f32	s0, s14
 8009422:	eef0 0a67 	vmov.f32	s1, s15
 8009426:	f002 f927 	bl	800b678 <ceil>
 800942a:	ec51 0b10 	vmov	r0, r1, d0
                                                             ( double )SX1276.Settings.Fsk.Datarate ) * 1e3 ) + 4 );
 800942e:	f04f 0200 	mov.w	r2, #0
 8009432:	4b17      	ldr	r3, [pc, #92]	@ (8009490 <SX1276SetRx+0x4a0>)
 8009434:	f7f6 ff2e 	bl	8000294 <__adddf3>
 8009438:	4602      	mov	r2, r0
 800943a:	460b      	mov	r3, r1
            TimerSetValue( &RxTimeoutSyncWord, ceil( ( 8.0 * ( SX1276.Settings.Fsk.PreambleLen +
 800943c:	4610      	mov	r0, r2
 800943e:	4619      	mov	r1, r3
 8009440:	f7f7 fba0 	bl	8000b84 <__aeabi_d2uiz>
 8009444:	4603      	mov	r3, r0
 8009446:	4619      	mov	r1, r3
 8009448:	4812      	ldr	r0, [pc, #72]	@ (8009494 <SX1276SetRx+0x4a4>)
 800944a:	f7fe fd25 	bl	8007e98 <TimerSetValue>
            TimerStart( &RxTimeoutSyncWord );
 800944e:	4811      	ldr	r0, [pc, #68]	@ (8009494 <SX1276SetRx+0x4a4>)
 8009450:	f7fe fb1c 	bl	8007a8c <TimerStart>
        else
        {
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
        }
    }
}
 8009454:	e009      	b.n	800946a <SX1276SetRx+0x47a>
        if( rxContinuous == true )
 8009456:	7bfb      	ldrb	r3, [r7, #15]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d003      	beq.n	8009464 <SX1276SetRx+0x474>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 800945c:	2005      	movs	r0, #5
 800945e:	f000 f917 	bl	8009690 <SX1276SetOpMode>
}
 8009462:	e002      	b.n	800946a <SX1276SetRx+0x47a>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 8009464:	2006      	movs	r0, #6
 8009466:	f000 f913 	bl	8009690 <SX1276SetOpMode>
}
 800946a:	bf00      	nop
 800946c:	3710      	adds	r7, #16
 800946e:	46bd      	mov	sp, r7
 8009470:	bdb0      	pop	{r4, r5, r7, pc}
 8009472:	bf00      	nop
 8009474:	20000324 	.word	0x20000324
 8009478:	20000424 	.word	0x20000424
 800947c:	200005a8 	.word	0x200005a8
 8009480:	3ff00000 	.word	0x3ff00000
 8009484:	40240000 	.word	0x40240000
 8009488:	40200000 	.word	0x40200000
 800948c:	408f4000 	.word	0x408f4000
 8009490:	40100000 	.word	0x40100000
 8009494:	200005bc 	.word	0x200005bc

08009498 <SX1276SetTx>:

void SX1276SetTx( uint32_t timeout )
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b082      	sub	sp, #8
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
    TimerSetValue( &TxTimeoutTimer, timeout );
 80094a0:	6879      	ldr	r1, [r7, #4]
 80094a2:	4837      	ldr	r0, [pc, #220]	@ (8009580 <SX1276SetTx+0xe8>)
 80094a4:	f7fe fcf8 	bl	8007e98 <TimerSetValue>

    switch( SX1276.Settings.Modem )
 80094a8:	4b36      	ldr	r3, [pc, #216]	@ (8009584 <SX1276SetTx+0xec>)
 80094aa:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d002      	beq.n	80094b8 <SX1276SetTx+0x20>
 80094b2:	2b01      	cmp	r3, #1
 80094b4:	d026      	beq.n	8009504 <SX1276SetTx+0x6c>
 80094b6:	e054      	b.n	8009562 <SX1276SetTx+0xca>
            // DIO1=FifoEmpty
            // DIO2=FifoFull
            // DIO3=FifoEmpty
            // DIO4=LowBat
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80094b8:	2040      	movs	r0, #64	@ 0x40
 80094ba:	f000 f96b 	bl	8009794 <SX1276Read>
 80094be:	4603      	mov	r3, r0
 80094c0:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
 80094c2:	f003 0303 	and.w	r3, r3, #3
 80094c6:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
 80094c8:	f043 0310 	orr.w	r3, r3, #16
 80094cc:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80094ce:	b2db      	uxtb	r3, r3
 80094d0:	4619      	mov	r1, r3
 80094d2:	2040      	movs	r0, #64	@ 0x40
 80094d4:	f000 f94c 	bl	8009770 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO1_01 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 80094d8:	2041      	movs	r0, #65	@ 0x41
 80094da:	f000 f95b 	bl	8009794 <SX1276Read>
 80094de:	4603      	mov	r3, r0
 80094e0:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80094e4:	b2db      	uxtb	r3, r3
 80094e6:	4619      	mov	r1, r3
 80094e8:	2041      	movs	r0, #65	@ 0x41
 80094ea:	f000 f941 	bl	8009770 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) );
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 80094ee:	2035      	movs	r0, #53	@ 0x35
 80094f0:	f000 f950 	bl	8009794 <SX1276Read>
 80094f4:	4603      	mov	r3, r0
 80094f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80094fa:	b2da      	uxtb	r2, r3
 80094fc:	4b21      	ldr	r3, [pc, #132]	@ (8009584 <SX1276SetTx+0xec>)
 80094fe:	f883 214a 	strb.w	r2, [r3, #330]	@ 0x14a
        }
        break;
 8009502:	e02e      	b.n	8009562 <SX1276SetTx+0xca>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8009504:	4b1f      	ldr	r3, [pc, #124]	@ (8009584 <SX1276SetTx+0xec>)
 8009506:	f893 315f 	ldrb.w	r3, [r3, #351]	@ 0x15f
 800950a:	2b00      	cmp	r3, #0
 800950c:	d014      	beq.n	8009538 <SX1276SetTx+0xa0>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800950e:	21f5      	movs	r1, #245	@ 0xf5
 8009510:	2011      	movs	r0, #17
 8009512:	f000 f92d 	bl	8009770 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=TxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 8009516:	2040      	movs	r0, #64	@ 0x40
 8009518:	f000 f93c 	bl	8009794 <SX1276Read>
 800951c:	4603      	mov	r3, r0
 800951e:	b25b      	sxtb	r3, r3
 8009520:	f003 0333 	and.w	r3, r3, #51	@ 0x33
 8009524:	b25b      	sxtb	r3, r3
 8009526:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800952a:	b25b      	sxtb	r3, r3
 800952c:	b2db      	uxtb	r3, r3
 800952e:	4619      	mov	r1, r3
 8009530:	2040      	movs	r0, #64	@ 0x40
 8009532:	f000 f91d 	bl	8009770 <SX1276Write>

                // DIO0=TxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
            }
        }
        break;
 8009536:	e013      	b.n	8009560 <SX1276SetTx+0xc8>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8009538:	21f7      	movs	r1, #247	@ 0xf7
 800953a:	2011      	movs	r0, #17
 800953c:	f000 f918 	bl	8009770 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8009540:	2040      	movs	r0, #64	@ 0x40
 8009542:	f000 f927 	bl	8009794 <SX1276Read>
 8009546:	4603      	mov	r3, r0
 8009548:	b25b      	sxtb	r3, r3
 800954a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800954e:	b25b      	sxtb	r3, r3
 8009550:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009554:	b25b      	sxtb	r3, r3
 8009556:	b2db      	uxtb	r3, r3
 8009558:	4619      	mov	r1, r3
 800955a:	2040      	movs	r0, #64	@ 0x40
 800955c:	f000 f908 	bl	8009770 <SX1276Write>
        break;
 8009560:	bf00      	nop
    }

    SX1276.Settings.State = RF_TX_RUNNING;
 8009562:	4b08      	ldr	r3, [pc, #32]	@ (8009584 <SX1276SetTx+0xec>)
 8009564:	2202      	movs	r2, #2
 8009566:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
    TimerStart( &TxTimeoutTimer );
 800956a:	4805      	ldr	r0, [pc, #20]	@ (8009580 <SX1276SetTx+0xe8>)
 800956c:	f7fe fa8e 	bl	8007a8c <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8009570:	2003      	movs	r0, #3
 8009572:	f000 f88d 	bl	8009690 <SX1276SetOpMode>
}
 8009576:	bf00      	nop
 8009578:	3708      	adds	r7, #8
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}
 800957e:	bf00      	nop
 8009580:	20000594 	.word	0x20000594
 8009584:	20000424 	.word	0x20000424

08009588 <SX1276StartCad>:

void SX1276StartCad( void )
{
 8009588:	b580      	push	{r7, lr}
 800958a:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 800958c:	4b10      	ldr	r3, [pc, #64]	@ (80095d0 <SX1276StartCad+0x48>)
 800958e:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 8009592:	2b00      	cmp	r3, #0
 8009594:	d019      	beq.n	80095ca <SX1276StartCad+0x42>
 8009596:	2b01      	cmp	r3, #1
 8009598:	d000      	beq.n	800959c <SX1276StartCad+0x14>
            SX1276.Settings.State = RF_CAD;
            SX1276SetOpMode( RFLR_OPMODE_CAD );
        }
        break;
    default:
        break;
 800959a:	e017      	b.n	80095cc <SX1276StartCad+0x44>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800959c:	21fa      	movs	r1, #250	@ 0xfa
 800959e:	2011      	movs	r0, #17
 80095a0:	f000 f8e6 	bl	8009770 <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 80095a4:	2040      	movs	r0, #64	@ 0x40
 80095a6:	f000 f8f5 	bl	8009794 <SX1276Read>
 80095aa:	4603      	mov	r3, r0
 80095ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80095b0:	b2db      	uxtb	r3, r3
 80095b2:	4619      	mov	r1, r3
 80095b4:	2040      	movs	r0, #64	@ 0x40
 80095b6:	f000 f8db 	bl	8009770 <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 80095ba:	4b05      	ldr	r3, [pc, #20]	@ (80095d0 <SX1276StartCad+0x48>)
 80095bc:	2203      	movs	r2, #3
 80095be:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 80095c2:	2007      	movs	r0, #7
 80095c4:	f000 f864 	bl	8009690 <SX1276SetOpMode>
        break;
 80095c8:	e000      	b.n	80095cc <SX1276StartCad+0x44>
        break;
 80095ca:	bf00      	nop
    }
}
 80095cc:	bf00      	nop
 80095ce:	bd80      	pop	{r7, pc}
 80095d0:	20000424 	.word	0x20000424

080095d4 <SX1276ReadRssi>:

int16_t SX1276ReadRssi( RadioModems_t modem )
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b084      	sub	sp, #16
 80095d8:	af00      	add	r7, sp, #0
 80095da:	4603      	mov	r3, r0
 80095dc:	71fb      	strb	r3, [r7, #7]
    int16_t rssi = 0;
 80095de:	2300      	movs	r3, #0
 80095e0:	81fb      	strh	r3, [r7, #14]

    switch( modem )
 80095e2:	79fb      	ldrb	r3, [r7, #7]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d002      	beq.n	80095ee <SX1276ReadRssi+0x1a>
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	d00a      	beq.n	8009602 <SX1276ReadRssi+0x2e>
 80095ec:	e01f      	b.n	800962e <SX1276ReadRssi+0x5a>
    {
    case MODEM_FSK:
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 80095ee:	2011      	movs	r0, #17
 80095f0:	f000 f8d0 	bl	8009794 <SX1276Read>
 80095f4:	4603      	mov	r3, r0
 80095f6:	085b      	lsrs	r3, r3, #1
 80095f8:	b2db      	uxtb	r3, r3
 80095fa:	425b      	negs	r3, r3
 80095fc:	b29b      	uxth	r3, r3
 80095fe:	81fb      	strh	r3, [r7, #14]
        break;
 8009600:	e019      	b.n	8009636 <SX1276ReadRssi+0x62>
    case MODEM_LORA:
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8009602:	4b10      	ldr	r3, [pc, #64]	@ (8009644 <SX1276ReadRssi+0x70>)
 8009604:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8009608:	4a0f      	ldr	r2, [pc, #60]	@ (8009648 <SX1276ReadRssi+0x74>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d907      	bls.n	800961e <SX1276ReadRssi+0x4a>
        {
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 800960e:	201b      	movs	r0, #27
 8009610:	f000 f8c0 	bl	8009794 <SX1276Read>
 8009614:	4603      	mov	r3, r0
 8009616:	3b9d      	subs	r3, #157	@ 0x9d
 8009618:	b29b      	uxth	r3, r3
 800961a:	81fb      	strh	r3, [r7, #14]
        }
        else
        {
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
        }
        break;
 800961c:	e00b      	b.n	8009636 <SX1276ReadRssi+0x62>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 800961e:	201b      	movs	r0, #27
 8009620:	f000 f8b8 	bl	8009794 <SX1276Read>
 8009624:	4603      	mov	r3, r0
 8009626:	3ba4      	subs	r3, #164	@ 0xa4
 8009628:	b29b      	uxth	r3, r3
 800962a:	81fb      	strh	r3, [r7, #14]
        break;
 800962c:	e003      	b.n	8009636 <SX1276ReadRssi+0x62>
    default:
        rssi = -1;
 800962e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009632:	81fb      	strh	r3, [r7, #14]
        break;
 8009634:	bf00      	nop
    }
    return rssi;
 8009636:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800963a:	4618      	mov	r0, r3
 800963c:	3710      	adds	r7, #16
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}
 8009642:	bf00      	nop
 8009644:	20000424 	.word	0x20000424
 8009648:	1f4add40 	.word	0x1f4add40

0800964c <SX1276Reset>:

void SX1276Reset( void )
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b082      	sub	sp, #8
 8009650:	af02      	add	r7, sp, #8
    // Set RESET pin to 0
    GpioInit( &SX1276.Reset, RADIO_RESET, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 8009652:	2300      	movs	r3, #0
 8009654:	9301      	str	r3, [sp, #4]
 8009656:	2300      	movs	r3, #0
 8009658:	9300      	str	r3, [sp, #0]
 800965a:	2300      	movs	r3, #0
 800965c:	2201      	movs	r2, #1
 800965e:	210b      	movs	r1, #11
 8009660:	480a      	ldr	r0, [pc, #40]	@ (800968c <SX1276Reset+0x40>)
 8009662:	f7fd fab1 	bl	8006bc8 <GpioInit>

    // Wait 1 ms
    DelayMs( 1 );
 8009666:	2001      	movs	r0, #1
 8009668:	f7fc ffa0 	bl	80065ac <DelayMs>

    // Configure RESET as input
    GpioInit( &SX1276.Reset, RADIO_RESET, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
 800966c:	2301      	movs	r3, #1
 800966e:	9301      	str	r3, [sp, #4]
 8009670:	2300      	movs	r3, #0
 8009672:	9300      	str	r3, [sp, #0]
 8009674:	2300      	movs	r3, #0
 8009676:	2200      	movs	r2, #0
 8009678:	210b      	movs	r1, #11
 800967a:	4804      	ldr	r0, [pc, #16]	@ (800968c <SX1276Reset+0x40>)
 800967c:	f7fd faa4 	bl	8006bc8 <GpioInit>

    // Wait 6 ms
    DelayMs( 6 );
 8009680:	2006      	movs	r0, #6
 8009682:	f7fc ff93 	bl	80065ac <DelayMs>
}
 8009686:	bf00      	nop
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}
 800968c:	20000424 	.word	0x20000424

08009690 <SX1276SetOpMode>:

void SX1276SetOpMode( uint8_t opMode )
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b082      	sub	sp, #8
 8009694:	af00      	add	r7, sp, #0
 8009696:	4603      	mov	r3, r0
 8009698:	71fb      	strb	r3, [r7, #7]
    if( opMode == RF_OPMODE_SLEEP )
 800969a:	79fb      	ldrb	r3, [r7, #7]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d103      	bne.n	80096a8 <SX1276SetOpMode+0x18>
    {
        SX1276SetAntSwLowPower( true );
 80096a0:	2001      	movs	r0, #1
 80096a2:	f7fe f951 	bl	8007948 <SX1276SetAntSwLowPower>
 80096a6:	e00c      	b.n	80096c2 <SX1276SetOpMode+0x32>
    }
    else
    {
        SX1276SetAntSwLowPower( false );
 80096a8:	2000      	movs	r0, #0
 80096aa:	f7fe f94d 	bl	8007948 <SX1276SetAntSwLowPower>
        if( opMode == RF_OPMODE_TRANSMITTER )
 80096ae:	79fb      	ldrb	r3, [r7, #7]
 80096b0:	2b03      	cmp	r3, #3
 80096b2:	d103      	bne.n	80096bc <SX1276SetOpMode+0x2c>
        {
            SX1276SetAntSw( 1 );
 80096b4:	2001      	movs	r0, #1
 80096b6:	f7fe f9a1 	bl	80079fc <SX1276SetAntSw>
 80096ba:	e002      	b.n	80096c2 <SX1276SetOpMode+0x32>
        }
        else
        {
            SX1276SetAntSw( 0 );
 80096bc:	2000      	movs	r0, #0
 80096be:	f7fe f99d 	bl	80079fc <SX1276SetAntSw>
        }
    }
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 80096c2:	2001      	movs	r0, #1
 80096c4:	f000 f866 	bl	8009794 <SX1276Read>
 80096c8:	4603      	mov	r3, r0
 80096ca:	b25b      	sxtb	r3, r3
 80096cc:	f023 0307 	bic.w	r3, r3, #7
 80096d0:	b25a      	sxtb	r2, r3
 80096d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096d6:	4313      	orrs	r3, r2
 80096d8:	b25b      	sxtb	r3, r3
 80096da:	b2db      	uxtb	r3, r3
 80096dc:	4619      	mov	r1, r3
 80096de:	2001      	movs	r0, #1
 80096e0:	f000 f846 	bl	8009770 <SX1276Write>
}
 80096e4:	bf00      	nop
 80096e6:	3708      	adds	r7, #8
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}

080096ec <SX1276SetModem>:

void SX1276SetModem( RadioModems_t modem )
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b082      	sub	sp, #8
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	4603      	mov	r3, r0
 80096f4:	71fb      	strb	r3, [r7, #7]
/*    if( SX1276.Settings.Modem == modem )
    {
        return;
    }
PKDEBUG */
    SX1276.Settings.Modem = modem;
 80096f6:	4a1d      	ldr	r2, [pc, #116]	@ (800976c <SX1276SetModem+0x80>)
 80096f8:	79fb      	ldrb	r3, [r7, #7]
 80096fa:	f882 3115 	strb.w	r3, [r2, #277]	@ 0x115
    switch( SX1276.Settings.Modem )
 80096fe:	4b1b      	ldr	r3, [pc, #108]	@ (800976c <SX1276SetModem+0x80>)
 8009700:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 8009704:	2b01      	cmp	r3, #1
 8009706:	d016      	beq.n	8009736 <SX1276SetModem+0x4a>
    {
    default:
    case MODEM_FSK:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8009708:	2000      	movs	r0, #0
 800970a:	f7ff ffc1 	bl	8009690 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 800970e:	2001      	movs	r0, #1
 8009710:	f000 f840 	bl	8009794 <SX1276Read>
 8009714:	4603      	mov	r3, r0
 8009716:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800971a:	b2db      	uxtb	r3, r3
 800971c:	4619      	mov	r1, r3
 800971e:	2001      	movs	r0, #1
 8009720:	f000 f826 	bl	8009770 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8009724:	2100      	movs	r1, #0
 8009726:	2040      	movs	r0, #64	@ 0x40
 8009728:	f000 f822 	bl	8009770 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 800972c:	2130      	movs	r1, #48	@ 0x30
 800972e:	2041      	movs	r0, #65	@ 0x41
 8009730:	f000 f81e 	bl	8009770 <SX1276Write>
        break;
 8009734:	e016      	b.n	8009764 <SX1276SetModem+0x78>
    case MODEM_LORA:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8009736:	2000      	movs	r0, #0
 8009738:	f7ff ffaa 	bl	8009690 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 800973c:	2001      	movs	r0, #1
 800973e:	f000 f829 	bl	8009794 <SX1276Read>
 8009742:	4603      	mov	r3, r0
 8009744:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009748:	b2db      	uxtb	r3, r3
 800974a:	4619      	mov	r1, r3
 800974c:	2001      	movs	r0, #1
 800974e:	f000 f80f 	bl	8009770 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8009752:	2100      	movs	r1, #0
 8009754:	2040      	movs	r0, #64	@ 0x40
 8009756:	f000 f80b 	bl	8009770 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 800975a:	2100      	movs	r1, #0
 800975c:	2041      	movs	r0, #65	@ 0x41
 800975e:	f000 f807 	bl	8009770 <SX1276Write>
        break;
 8009762:	bf00      	nop
    }
}
 8009764:	bf00      	nop
 8009766:	3708      	adds	r7, #8
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}
 800976c:	20000424 	.word	0x20000424

08009770 <SX1276Write>:

void SX1276Write( uint8_t addr, uint8_t data )
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b082      	sub	sp, #8
 8009774:	af00      	add	r7, sp, #0
 8009776:	4603      	mov	r3, r0
 8009778:	460a      	mov	r2, r1
 800977a:	71fb      	strb	r3, [r7, #7]
 800977c:	4613      	mov	r3, r2
 800977e:	71bb      	strb	r3, [r7, #6]
    SX1276WriteBuffer( addr, &data, 1 );
 8009780:	1db9      	adds	r1, r7, #6
 8009782:	79fb      	ldrb	r3, [r7, #7]
 8009784:	2201      	movs	r2, #1
 8009786:	4618      	mov	r0, r3
 8009788:	f000 f816 	bl	80097b8 <SX1276WriteBuffer>
}
 800978c:	bf00      	nop
 800978e:	3708      	adds	r7, #8
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}

08009794 <SX1276Read>:

uint8_t SX1276Read( uint8_t addr )
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b084      	sub	sp, #16
 8009798:	af00      	add	r7, sp, #0
 800979a:	4603      	mov	r3, r0
 800979c:	71fb      	strb	r3, [r7, #7]
    uint8_t data;
    SX1276ReadBuffer( addr, &data, 1 );
 800979e:	f107 010f 	add.w	r1, r7, #15
 80097a2:	79fb      	ldrb	r3, [r7, #7]
 80097a4:	2201      	movs	r2, #1
 80097a6:	4618      	mov	r0, r3
 80097a8:	f000 f832 	bl	8009810 <SX1276ReadBuffer>
    return data;
 80097ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3710      	adds	r7, #16
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}
	...

080097b8 <SX1276WriteBuffer>:

void SX1276WriteBuffer( uint8_t addr, uint8_t *buffer, uint8_t size )
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b082      	sub	sp, #8
 80097bc:	af00      	add	r7, sp, #0
 80097be:	4603      	mov	r3, r0
 80097c0:	6039      	str	r1, [r7, #0]
 80097c2:	71fb      	strb	r3, [r7, #7]
 80097c4:	4613      	mov	r3, r2
 80097c6:	71bb      	strb	r3, [r7, #6]
//    uint8_t i;

    //NSS = 0;
    GpioWrite( &SX1276.Spi.Nss, 0 );
 80097c8:	2100      	movs	r1, #0
 80097ca:	480f      	ldr	r0, [pc, #60]	@ (8009808 <SX1276WriteBuffer+0x50>)
 80097cc:	f7fd fa3b 	bl	8006c46 <GpioWrite>
/*    SpiInOut( &SX1276.Spi, addr | 0x80 );
    for( i = 0; i < size; i++ )
    {
        SpiInOut( &SX1276.Spi, buffer[i] );
    }    */
    addr |= 0x80;
 80097d0:	79fb      	ldrb	r3, [r7, #7]
 80097d2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80097d6:	b2db      	uxtb	r3, r3
 80097d8:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit( &SX1276.Spi.Spi, &addr, 1, HAL_MAX_DELAY);
 80097da:	1df9      	adds	r1, r7, #7
 80097dc:	f04f 33ff 	mov.w	r3, #4294967295
 80097e0:	2201      	movs	r2, #1
 80097e2:	480a      	ldr	r0, [pc, #40]	@ (800980c <SX1276WriteBuffer+0x54>)
 80097e4:	f7fc f99a 	bl	8005b1c <HAL_SPI_Transmit>
    HAL_SPI_Transmit( &SX1276.Spi.Spi, buffer, size, HAL_MAX_DELAY);
 80097e8:	79bb      	ldrb	r3, [r7, #6]
 80097ea:	b29a      	uxth	r2, r3
 80097ec:	f04f 33ff 	mov.w	r3, #4294967295
 80097f0:	6839      	ldr	r1, [r7, #0]
 80097f2:	4806      	ldr	r0, [pc, #24]	@ (800980c <SX1276WriteBuffer+0x54>)
 80097f4:	f7fc f992 	bl	8005b1c <HAL_SPI_Transmit>

    //NSS = 1;
    GpioWrite( &SX1276.Spi.Nss, 1 );
 80097f8:	2101      	movs	r1, #1
 80097fa:	4803      	ldr	r0, [pc, #12]	@ (8009808 <SX1276WriteBuffer+0x50>)
 80097fc:	f7fd fa23 	bl	8006c46 <GpioWrite>
}
 8009800:	bf00      	nop
 8009802:	3708      	adds	r7, #8
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}
 8009808:	2000052c 	.word	0x2000052c
 800980c:	20000478 	.word	0x20000478

08009810 <SX1276ReadBuffer>:

void SX1276ReadBuffer( uint8_t addr, uint8_t *buffer, uint8_t size )
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b082      	sub	sp, #8
 8009814:	af00      	add	r7, sp, #0
 8009816:	4603      	mov	r3, r0
 8009818:	6039      	str	r1, [r7, #0]
 800981a:	71fb      	strb	r3, [r7, #7]
 800981c:	4613      	mov	r3, r2
 800981e:	71bb      	strb	r3, [r7, #6]
//    uint8_t i;

    //NSS = 0;
    GpioWrite( &SX1276.Spi.Nss, 0 );
 8009820:	2100      	movs	r1, #0
 8009822:	4816      	ldr	r0, [pc, #88]	@ (800987c <SX1276ReadBuffer+0x6c>)
 8009824:	f7fd fa0f 	bl	8006c46 <GpioWrite>

//    SpiInOut( &SX1276.Spi, addr & 0x7F );
    addr &= 0x7f;
 8009828:	79fb      	ldrb	r3, [r7, #7]
 800982a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800982e:	b2db      	uxtb	r3, r3
 8009830:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit( &SX1276.Spi.Spi, &addr, 1, HAL_MAX_DELAY);
 8009832:	1df9      	adds	r1, r7, #7
 8009834:	f04f 33ff 	mov.w	r3, #4294967295
 8009838:	2201      	movs	r2, #1
 800983a:	4811      	ldr	r0, [pc, #68]	@ (8009880 <SX1276ReadBuffer+0x70>)
 800983c:	f7fc f96e 	bl	8005b1c <HAL_SPI_Transmit>
    while(HAL_SPI_GetState(&SX1276.Spi.Spi) != HAL_SPI_STATE_READY);
 8009840:	bf00      	nop
 8009842:	480f      	ldr	r0, [pc, #60]	@ (8009880 <SX1276ReadBuffer+0x70>)
 8009844:	f7fc fd1c 	bl	8006280 <HAL_SPI_GetState>
 8009848:	4603      	mov	r3, r0
 800984a:	2b01      	cmp	r3, #1
 800984c:	d1f9      	bne.n	8009842 <SX1276ReadBuffer+0x32>
    HAL_SPI_Receive( &SX1276.Spi.Spi, buffer, size, HAL_MAX_DELAY);
 800984e:	79bb      	ldrb	r3, [r7, #6]
 8009850:	b29a      	uxth	r2, r3
 8009852:	f04f 33ff 	mov.w	r3, #4294967295
 8009856:	6839      	ldr	r1, [r7, #0]
 8009858:	4809      	ldr	r0, [pc, #36]	@ (8009880 <SX1276ReadBuffer+0x70>)
 800985a:	f7fc fb6f 	bl	8005f3c <HAL_SPI_Receive>
    while(HAL_SPI_GetState(&SX1276.Spi.Spi) != HAL_SPI_STATE_READY);
 800985e:	bf00      	nop
 8009860:	4807      	ldr	r0, [pc, #28]	@ (8009880 <SX1276ReadBuffer+0x70>)
 8009862:	f7fc fd0d 	bl	8006280 <HAL_SPI_GetState>
 8009866:	4603      	mov	r3, r0
 8009868:	2b01      	cmp	r3, #1
 800986a:	d1f9      	bne.n	8009860 <SX1276ReadBuffer+0x50>
//    {
//        buffer[i] = SpiInOut( &SX1276.Spi, 0 );
//    }

    //NSS = 1;
    GpioWrite( &SX1276.Spi.Nss, 1 );
 800986c:	2101      	movs	r1, #1
 800986e:	4803      	ldr	r0, [pc, #12]	@ (800987c <SX1276ReadBuffer+0x6c>)
 8009870:	f7fd f9e9 	bl	8006c46 <GpioWrite>
}
 8009874:	bf00      	nop
 8009876:	3708      	adds	r7, #8
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}
 800987c:	2000052c 	.word	0x2000052c
 8009880:	20000478 	.word	0x20000478

08009884 <SX1276WriteFifo>:

void SX1276WriteFifo( uint8_t *buffer, uint8_t size )
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b082      	sub	sp, #8
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
 800988c:	460b      	mov	r3, r1
 800988e:	70fb      	strb	r3, [r7, #3]
    SX1276WriteBuffer( 0, buffer, size );
 8009890:	78fb      	ldrb	r3, [r7, #3]
 8009892:	461a      	mov	r2, r3
 8009894:	6879      	ldr	r1, [r7, #4]
 8009896:	2000      	movs	r0, #0
 8009898:	f7ff ff8e 	bl	80097b8 <SX1276WriteBuffer>
}
 800989c:	bf00      	nop
 800989e:	3708      	adds	r7, #8
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}

080098a4 <SX1276ReadFifo>:

void SX1276ReadFifo( uint8_t *buffer, uint8_t size )
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b082      	sub	sp, #8
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
 80098ac:	460b      	mov	r3, r1
 80098ae:	70fb      	strb	r3, [r7, #3]
    SX1276ReadBuffer( 0, buffer, size );
 80098b0:	78fb      	ldrb	r3, [r7, #3]
 80098b2:	461a      	mov	r2, r3
 80098b4:	6879      	ldr	r1, [r7, #4]
 80098b6:	2000      	movs	r0, #0
 80098b8:	f7ff ffaa 	bl	8009810 <SX1276ReadBuffer>
}
 80098bc:	bf00      	nop
 80098be:	3708      	adds	r7, #8
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}

080098c4 <SX1276SetMaxPayloadLength>:

void SX1276SetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b082      	sub	sp, #8
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	4603      	mov	r3, r0
 80098cc:	460a      	mov	r2, r1
 80098ce:	71fb      	strb	r3, [r7, #7]
 80098d0:	4613      	mov	r3, r2
 80098d2:	71bb      	strb	r3, [r7, #6]
    SX1276SetModem( modem );
 80098d4:	79fb      	ldrb	r3, [r7, #7]
 80098d6:	4618      	mov	r0, r3
 80098d8:	f7ff ff08 	bl	80096ec <SX1276SetModem>

    switch( modem )
 80098dc:	79fb      	ldrb	r3, [r7, #7]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d002      	beq.n	80098e8 <SX1276SetMaxPayloadLength+0x24>
 80098e2:	2b01      	cmp	r3, #1
 80098e4:	d00e      	beq.n	8009904 <SX1276SetMaxPayloadLength+0x40>
        break;
    case MODEM_LORA:
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
        break;
    }
}
 80098e6:	e014      	b.n	8009912 <SX1276SetMaxPayloadLength+0x4e>
        if( SX1276.Settings.Fsk.FixLen == false )
 80098e8:	4b0c      	ldr	r3, [pc, #48]	@ (800991c <SX1276SetMaxPayloadLength+0x58>)
 80098ea:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 80098ee:	f083 0301 	eor.w	r3, r3, #1
 80098f2:	b2db      	uxtb	r3, r3
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d00b      	beq.n	8009910 <SX1276SetMaxPayloadLength+0x4c>
            SX1276Write( REG_PAYLOADLENGTH, max );
 80098f8:	79bb      	ldrb	r3, [r7, #6]
 80098fa:	4619      	mov	r1, r3
 80098fc:	2032      	movs	r0, #50	@ 0x32
 80098fe:	f7ff ff37 	bl	8009770 <SX1276Write>
        break;
 8009902:	e005      	b.n	8009910 <SX1276SetMaxPayloadLength+0x4c>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 8009904:	79bb      	ldrb	r3, [r7, #6]
 8009906:	4619      	mov	r1, r3
 8009908:	2023      	movs	r0, #35	@ 0x23
 800990a:	f7ff ff31 	bl	8009770 <SX1276Write>
        break;
 800990e:	e000      	b.n	8009912 <SX1276SetMaxPayloadLength+0x4e>
        break;
 8009910:	bf00      	nop
}
 8009912:	bf00      	nop
 8009914:	3708      	adds	r7, #8
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
 800991a:	bf00      	nop
 800991c:	20000424 	.word	0x20000424

08009920 <SX1276OnTimeoutIrq>:

void SX1276OnTimeoutIrq( void )
{
 8009920:	b580      	push	{r7, lr}
 8009922:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.State )
 8009924:	4b32      	ldr	r3, [pc, #200]	@ (80099f0 <SX1276OnTimeoutIrq+0xd0>)
 8009926:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 800992a:	2b01      	cmp	r3, #1
 800992c:	d002      	beq.n	8009934 <SX1276OnTimeoutIrq+0x14>
 800992e:	2b02      	cmp	r3, #2
 8009930:	d046      	beq.n	80099c0 <SX1276OnTimeoutIrq+0xa0>
        {
            RadioEvents->TxTimeout( );
        }
        break;
    default:
        break;
 8009932:	e05a      	b.n	80099ea <SX1276OnTimeoutIrq+0xca>
        if( SX1276.Settings.Modem == MODEM_FSK )
 8009934:	4b2e      	ldr	r3, [pc, #184]	@ (80099f0 <SX1276OnTimeoutIrq+0xd0>)
 8009936:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 800993a:	2b00      	cmp	r3, #0
 800993c:	d132      	bne.n	80099a4 <SX1276OnTimeoutIrq+0x84>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800993e:	4b2c      	ldr	r3, [pc, #176]	@ (80099f0 <SX1276OnTimeoutIrq+0xd0>)
 8009940:	2200      	movs	r2, #0
 8009942:	f883 213c 	strb.w	r2, [r3, #316]	@ 0x13c
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8009946:	4b2a      	ldr	r3, [pc, #168]	@ (80099f0 <SX1276OnTimeoutIrq+0xd0>)
 8009948:	2200      	movs	r2, #0
 800994a:	f883 213d 	strb.w	r2, [r3, #317]	@ 0x13d
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800994e:	4b28      	ldr	r3, [pc, #160]	@ (80099f0 <SX1276OnTimeoutIrq+0xd0>)
 8009950:	2200      	movs	r2, #0
 8009952:	f8a3 2148 	strh.w	r2, [r3, #328]	@ 0x148
            SX1276.Settings.FskPacketHandler.Size = 0;
 8009956:	4b26      	ldr	r3, [pc, #152]	@ (80099f0 <SX1276OnTimeoutIrq+0xd0>)
 8009958:	2200      	movs	r2, #0
 800995a:	f8a3 2146 	strh.w	r2, [r3, #326]	@ 0x146
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 800995e:	210b      	movs	r1, #11
 8009960:	203e      	movs	r0, #62	@ 0x3e
 8009962:	f7ff ff05 	bl	8009770 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8009966:	2110      	movs	r1, #16
 8009968:	203f      	movs	r0, #63	@ 0x3f
 800996a:	f7ff ff01 	bl	8009770 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 800996e:	4b20      	ldr	r3, [pc, #128]	@ (80099f0 <SX1276OnTimeoutIrq+0xd0>)
 8009970:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 8009974:	2b00      	cmp	r3, #0
 8009976:	d00e      	beq.n	8009996 <SX1276OnTimeoutIrq+0x76>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8009978:	200d      	movs	r0, #13
 800997a:	f7ff ff0b 	bl	8009794 <SX1276Read>
 800997e:	4603      	mov	r3, r0
 8009980:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009984:	b2db      	uxtb	r3, r3
 8009986:	4619      	mov	r1, r3
 8009988:	200d      	movs	r0, #13
 800998a:	f7ff fef1 	bl	8009770 <SX1276Write>
                TimerStart( &RxTimeoutSyncWord );
 800998e:	4819      	ldr	r0, [pc, #100]	@ (80099f4 <SX1276OnTimeoutIrq+0xd4>)
 8009990:	f7fe f87c 	bl	8007a8c <TimerStart>
 8009994:	e006      	b.n	80099a4 <SX1276OnTimeoutIrq+0x84>
                SX1276.Settings.State = RF_IDLE;
 8009996:	4b16      	ldr	r3, [pc, #88]	@ (80099f0 <SX1276OnTimeoutIrq+0xd0>)
 8009998:	2200      	movs	r2, #0
 800999a:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                TimerStop( &RxTimeoutSyncWord );
 800999e:	4815      	ldr	r0, [pc, #84]	@ (80099f4 <SX1276OnTimeoutIrq+0xd4>)
 80099a0:	f7fe f9bc 	bl	8007d1c <TimerStop>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80099a4:	4b14      	ldr	r3, [pc, #80]	@ (80099f8 <SX1276OnTimeoutIrq+0xd8>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d01b      	beq.n	80099e4 <SX1276OnTimeoutIrq+0xc4>
 80099ac:	4b12      	ldr	r3, [pc, #72]	@ (80099f8 <SX1276OnTimeoutIrq+0xd8>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	68db      	ldr	r3, [r3, #12]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d016      	beq.n	80099e4 <SX1276OnTimeoutIrq+0xc4>
            RadioEvents->RxTimeout( );
 80099b6:	4b10      	ldr	r3, [pc, #64]	@ (80099f8 <SX1276OnTimeoutIrq+0xd8>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	68db      	ldr	r3, [r3, #12]
 80099bc:	4798      	blx	r3
        break;
 80099be:	e011      	b.n	80099e4 <SX1276OnTimeoutIrq+0xc4>
        SX1276.Settings.State = RF_IDLE;
 80099c0:	4b0b      	ldr	r3, [pc, #44]	@ (80099f0 <SX1276OnTimeoutIrq+0xd0>)
 80099c2:	2200      	movs	r2, #0
 80099c4:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80099c8:	4b0b      	ldr	r3, [pc, #44]	@ (80099f8 <SX1276OnTimeoutIrq+0xd8>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d00b      	beq.n	80099e8 <SX1276OnTimeoutIrq+0xc8>
 80099d0:	4b09      	ldr	r3, [pc, #36]	@ (80099f8 <SX1276OnTimeoutIrq+0xd8>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	685b      	ldr	r3, [r3, #4]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d006      	beq.n	80099e8 <SX1276OnTimeoutIrq+0xc8>
            RadioEvents->TxTimeout( );
 80099da:	4b07      	ldr	r3, [pc, #28]	@ (80099f8 <SX1276OnTimeoutIrq+0xd8>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	685b      	ldr	r3, [r3, #4]
 80099e0:	4798      	blx	r3
        break;
 80099e2:	e001      	b.n	80099e8 <SX1276OnTimeoutIrq+0xc8>
        break;
 80099e4:	bf00      	nop
 80099e6:	e000      	b.n	80099ea <SX1276OnTimeoutIrq+0xca>
        break;
 80099e8:	bf00      	nop
    }
}
 80099ea:	bf00      	nop
 80099ec:	bd80      	pop	{r7, pc}
 80099ee:	bf00      	nop
 80099f0:	20000424 	.word	0x20000424
 80099f4:	200005bc 	.word	0x200005bc
 80099f8:	20000320 	.word	0x20000320

080099fc <SX1276OnDio0Irq>:

void SX1276OnDio0Irq( void )
{
 80099fc:	b590      	push	{r4, r7, lr}
 80099fe:	b083      	sub	sp, #12
 8009a00:	af00      	add	r7, sp, #0
    volatile uint8_t irqFlags = 0;
 8009a02:	2300      	movs	r3, #0
 8009a04:	70fb      	strb	r3, [r7, #3]

    switch( SX1276.Settings.State )
 8009a06:	4ba7      	ldr	r3, [pc, #668]	@ (8009ca4 <SX1276OnDio0Irq+0x2a8>)
 8009a08:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 8009a0c:	2b01      	cmp	r3, #1
 8009a0e:	d003      	beq.n	8009a18 <SX1276OnDio0Irq+0x1c>
 8009a10:	2b02      	cmp	r3, #2
 8009a12:	f000 81f0 	beq.w	8009df6 <SX1276OnDio0Irq+0x3fa>
                }
                break;
            }
            break;
        default:
            break;
 8009a16:	e20d      	b.n	8009e34 <SX1276OnDio0Irq+0x438>
            switch( SX1276.Settings.Modem )
 8009a18:	4ba2      	ldr	r3, [pc, #648]	@ (8009ca4 <SX1276OnDio0Irq+0x2a8>)
 8009a1a:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d003      	beq.n	8009a2a <SX1276OnDio0Irq+0x2e>
 8009a22:	2b01      	cmp	r3, #1
 8009a24:	f000 80ef 	beq.w	8009c06 <SX1276OnDio0Irq+0x20a>
                break;
 8009a28:	e1e4      	b.n	8009df4 <SX1276OnDio0Irq+0x3f8>
                if( SX1276.Settings.Fsk.CrcOn == true )
 8009a2a:	4b9e      	ldr	r3, [pc, #632]	@ (8009ca4 <SX1276OnDio0Irq+0x2a8>)
 8009a2c:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d051      	beq.n	8009ad8 <SX1276OnDio0Irq+0xdc>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 8009a34:	203f      	movs	r0, #63	@ 0x3f
 8009a36:	f7ff fead 	bl	8009794 <SX1276Read>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	70fb      	strb	r3, [r7, #3]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 8009a3e:	78fb      	ldrb	r3, [r7, #3]
 8009a40:	b2db      	uxtb	r3, r3
 8009a42:	f003 0302 	and.w	r3, r3, #2
 8009a46:	2b02      	cmp	r3, #2
 8009a48:	d046      	beq.n	8009ad8 <SX1276OnDio0Irq+0xdc>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8009a4a:	210b      	movs	r1, #11
 8009a4c:	203e      	movs	r0, #62	@ 0x3e
 8009a4e:	f7ff fe8f 	bl	8009770 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8009a52:	2110      	movs	r1, #16
 8009a54:	203f      	movs	r0, #63	@ 0x3f
 8009a56:	f7ff fe8b 	bl	8009770 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 8009a5a:	4893      	ldr	r0, [pc, #588]	@ (8009ca8 <SX1276OnDio0Irq+0x2ac>)
 8009a5c:	f7fe f95e 	bl	8007d1c <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 8009a60:	4b90      	ldr	r3, [pc, #576]	@ (8009ca4 <SX1276OnDio0Irq+0x2a8>)
 8009a62:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 8009a66:	f083 0301 	eor.w	r3, r3, #1
 8009a6a:	b2db      	uxtb	r3, r3
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d007      	beq.n	8009a80 <SX1276OnDio0Irq+0x84>
                            TimerStop( &RxTimeoutSyncWord );
 8009a70:	488e      	ldr	r0, [pc, #568]	@ (8009cac <SX1276OnDio0Irq+0x2b0>)
 8009a72:	f7fe f953 	bl	8007d1c <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 8009a76:	4b8b      	ldr	r3, [pc, #556]	@ (8009ca4 <SX1276OnDio0Irq+0x2a8>)
 8009a78:	2200      	movs	r2, #0
 8009a7a:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
 8009a7e:	e00d      	b.n	8009a9c <SX1276OnDio0Irq+0xa0>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8009a80:	200d      	movs	r0, #13
 8009a82:	f7ff fe87 	bl	8009794 <SX1276Read>
 8009a86:	4603      	mov	r3, r0
 8009a88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a8c:	b2db      	uxtb	r3, r3
 8009a8e:	4619      	mov	r1, r3
 8009a90:	200d      	movs	r0, #13
 8009a92:	f7ff fe6d 	bl	8009770 <SX1276Write>
                            TimerStart( &RxTimeoutSyncWord );
 8009a96:	4885      	ldr	r0, [pc, #532]	@ (8009cac <SX1276OnDio0Irq+0x2b0>)
 8009a98:	f7fd fff8 	bl	8007a8c <TimerStart>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8009a9c:	4b84      	ldr	r3, [pc, #528]	@ (8009cb0 <SX1276OnDio0Irq+0x2b4>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d008      	beq.n	8009ab6 <SX1276OnDio0Irq+0xba>
 8009aa4:	4b82      	ldr	r3, [pc, #520]	@ (8009cb0 <SX1276OnDio0Irq+0x2b4>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	691b      	ldr	r3, [r3, #16]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d003      	beq.n	8009ab6 <SX1276OnDio0Irq+0xba>
                            RadioEvents->RxError( );
 8009aae:	4b80      	ldr	r3, [pc, #512]	@ (8009cb0 <SX1276OnDio0Irq+0x2b4>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	691b      	ldr	r3, [r3, #16]
 8009ab4:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8009ab6:	4b7b      	ldr	r3, [pc, #492]	@ (8009ca4 <SX1276OnDio0Irq+0x2a8>)
 8009ab8:	2200      	movs	r2, #0
 8009aba:	f883 213c 	strb.w	r2, [r3, #316]	@ 0x13c
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8009abe:	4b79      	ldr	r3, [pc, #484]	@ (8009ca4 <SX1276OnDio0Irq+0x2a8>)
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	f883 213d 	strb.w	r2, [r3, #317]	@ 0x13d
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8009ac6:	4b77      	ldr	r3, [pc, #476]	@ (8009ca4 <SX1276OnDio0Irq+0x2a8>)
 8009ac8:	2200      	movs	r2, #0
 8009aca:	f8a3 2148 	strh.w	r2, [r3, #328]	@ 0x148
                        SX1276.Settings.FskPacketHandler.Size = 0;
 8009ace:	4b75      	ldr	r3, [pc, #468]	@ (8009ca4 <SX1276OnDio0Irq+0x2a8>)
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	f8a3 2146 	strh.w	r2, [r3, #326]	@ 0x146
                        break;
 8009ad6:	e18d      	b.n	8009df4 <SX1276OnDio0Irq+0x3f8>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8009ad8:	4b72      	ldr	r3, [pc, #456]	@ (8009ca4 <SX1276OnDio0Irq+0x2a8>)
 8009ada:	f8b3 3146 	ldrh.w	r3, [r3, #326]	@ 0x146
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d133      	bne.n	8009b4a <SX1276OnDio0Irq+0x14e>
 8009ae2:	4b70      	ldr	r3, [pc, #448]	@ (8009ca4 <SX1276OnDio0Irq+0x2a8>)
 8009ae4:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d12e      	bne.n	8009b4a <SX1276OnDio0Irq+0x14e>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8009aec:	4b6d      	ldr	r3, [pc, #436]	@ (8009ca4 <SX1276OnDio0Irq+0x2a8>)
 8009aee:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8009af2:	f083 0301 	eor.w	r3, r3, #1
 8009af6:	b2db      	uxtb	r3, r3
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d004      	beq.n	8009b06 <SX1276OnDio0Irq+0x10a>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 8009afc:	2101      	movs	r1, #1
 8009afe:	486d      	ldr	r0, [pc, #436]	@ (8009cb4 <SX1276OnDio0Irq+0x2b8>)
 8009b00:	f7ff fed0 	bl	80098a4 <SX1276ReadFifo>
 8009b04:	e007      	b.n	8009b16 <SX1276OnDio0Irq+0x11a>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8009b06:	2032      	movs	r0, #50	@ 0x32
 8009b08:	f7ff fe44 	bl	8009794 <SX1276Read>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	461a      	mov	r2, r3
 8009b10:	4b64      	ldr	r3, [pc, #400]	@ (8009ca4 <SX1276OnDio0Irq+0x2a8>)
 8009b12:	f8a3 2146 	strh.w	r2, [r3, #326]	@ 0x146
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8009b16:	4b63      	ldr	r3, [pc, #396]	@ (8009ca4 <SX1276OnDio0Irq+0x2a8>)
 8009b18:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 8009b1c:	461a      	mov	r2, r3
 8009b1e:	4b66      	ldr	r3, [pc, #408]	@ (8009cb8 <SX1276OnDio0Irq+0x2bc>)
 8009b20:	18d0      	adds	r0, r2, r3
 8009b22:	4b60      	ldr	r3, [pc, #384]	@ (8009ca4 <SX1276OnDio0Irq+0x2a8>)
 8009b24:	f8b3 3146 	ldrh.w	r3, [r3, #326]	@ 0x146
 8009b28:	b2da      	uxtb	r2, r3
 8009b2a:	4b5e      	ldr	r3, [pc, #376]	@ (8009ca4 <SX1276OnDio0Irq+0x2a8>)
 8009b2c:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 8009b30:	b2db      	uxtb	r3, r3
 8009b32:	1ad3      	subs	r3, r2, r3
 8009b34:	b2db      	uxtb	r3, r3
 8009b36:	4619      	mov	r1, r3
 8009b38:	f7ff feb4 	bl	80098a4 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8009b3c:	4b59      	ldr	r3, [pc, #356]	@ (8009ca4 <SX1276OnDio0Irq+0x2a8>)
 8009b3e:	f8b3 2146 	ldrh.w	r2, [r3, #326]	@ 0x146
 8009b42:	4b58      	ldr	r3, [pc, #352]	@ (8009ca4 <SX1276OnDio0Irq+0x2a8>)
 8009b44:	f8a3 2148 	strh.w	r2, [r3, #328]	@ 0x148
 8009b48:	e018      	b.n	8009b7c <SX1276OnDio0Irq+0x180>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8009b4a:	4b56      	ldr	r3, [pc, #344]	@ (8009ca4 <SX1276OnDio0Irq+0x2a8>)
 8009b4c:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 8009b50:	461a      	mov	r2, r3
 8009b52:	4b59      	ldr	r3, [pc, #356]	@ (8009cb8 <SX1276OnDio0Irq+0x2bc>)
 8009b54:	18d0      	adds	r0, r2, r3
 8009b56:	4b53      	ldr	r3, [pc, #332]	@ (8009ca4 <SX1276OnDio0Irq+0x2a8>)
 8009b58:	f8b3 3146 	ldrh.w	r3, [r3, #326]	@ 0x146
 8009b5c:	b2da      	uxtb	r2, r3
 8009b5e:	4b51      	ldr	r3, [pc, #324]	@ (8009ca4 <SX1276OnDio0Irq+0x2a8>)
 8009b60:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 8009b64:	b2db      	uxtb	r3, r3
 8009b66:	1ad3      	subs	r3, r2, r3
 8009b68:	b2db      	uxtb	r3, r3
 8009b6a:	4619      	mov	r1, r3
 8009b6c:	f7ff fe9a 	bl	80098a4 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8009b70:	4b4c      	ldr	r3, [pc, #304]	@ (8009ca4 <SX1276OnDio0Irq+0x2a8>)
 8009b72:	f8b3 2146 	ldrh.w	r2, [r3, #326]	@ 0x146
 8009b76:	4b4b      	ldr	r3, [pc, #300]	@ (8009ca4 <SX1276OnDio0Irq+0x2a8>)
 8009b78:	f8a3 2148 	strh.w	r2, [r3, #328]	@ 0x148
                if( SX1276.Settings.Fsk.RxContinuous == false )
 8009b7c:	4b49      	ldr	r3, [pc, #292]	@ (8009ca4 <SX1276OnDio0Irq+0x2a8>)
 8009b7e:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 8009b82:	f083 0301 	eor.w	r3, r3, #1
 8009b86:	b2db      	uxtb	r3, r3
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d007      	beq.n	8009b9c <SX1276OnDio0Irq+0x1a0>
                    SX1276.Settings.State = RF_IDLE;
 8009b8c:	4b45      	ldr	r3, [pc, #276]	@ (8009ca4 <SX1276OnDio0Irq+0x2a8>)
 8009b8e:	2200      	movs	r2, #0
 8009b90:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                    TimerStart( &RxTimeoutSyncWord );
 8009b94:	4845      	ldr	r0, [pc, #276]	@ (8009cac <SX1276OnDio0Irq+0x2b0>)
 8009b96:	f7fd ff79 	bl	8007a8c <TimerStart>
 8009b9a:	e00a      	b.n	8009bb2 <SX1276OnDio0Irq+0x1b6>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8009b9c:	200d      	movs	r0, #13
 8009b9e:	f7ff fdf9 	bl	8009794 <SX1276Read>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ba8:	b2db      	uxtb	r3, r3
 8009baa:	4619      	mov	r1, r3
 8009bac:	200d      	movs	r0, #13
 8009bae:	f7ff fddf 	bl	8009770 <SX1276Write>
                TimerStop( &RxTimeoutTimer );
 8009bb2:	483d      	ldr	r0, [pc, #244]	@ (8009ca8 <SX1276OnDio0Irq+0x2ac>)
 8009bb4:	f7fe f8b2 	bl	8007d1c <TimerStop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8009bb8:	4b3d      	ldr	r3, [pc, #244]	@ (8009cb0 <SX1276OnDio0Irq+0x2b4>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d011      	beq.n	8009be4 <SX1276OnDio0Irq+0x1e8>
 8009bc0:	4b3b      	ldr	r3, [pc, #236]	@ (8009cb0 <SX1276OnDio0Irq+0x2b4>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	689b      	ldr	r3, [r3, #8]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d00c      	beq.n	8009be4 <SX1276OnDio0Irq+0x1e8>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 8009bca:	4b39      	ldr	r3, [pc, #228]	@ (8009cb0 <SX1276OnDio0Irq+0x2b4>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	689c      	ldr	r4, [r3, #8]
 8009bd0:	4b34      	ldr	r3, [pc, #208]	@ (8009ca4 <SX1276OnDio0Irq+0x2a8>)
 8009bd2:	f8b3 1146 	ldrh.w	r1, [r3, #326]	@ 0x146
 8009bd6:	4b33      	ldr	r3, [pc, #204]	@ (8009ca4 <SX1276OnDio0Irq+0x2a8>)
 8009bd8:	f993 313e 	ldrsb.w	r3, [r3, #318]	@ 0x13e
 8009bdc:	461a      	mov	r2, r3
 8009bde:	2300      	movs	r3, #0
 8009be0:	4835      	ldr	r0, [pc, #212]	@ (8009cb8 <SX1276OnDio0Irq+0x2bc>)
 8009be2:	47a0      	blx	r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8009be4:	4b2f      	ldr	r3, [pc, #188]	@ (8009ca4 <SX1276OnDio0Irq+0x2a8>)
 8009be6:	2200      	movs	r2, #0
 8009be8:	f883 213c 	strb.w	r2, [r3, #316]	@ 0x13c
                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8009bec:	4b2d      	ldr	r3, [pc, #180]	@ (8009ca4 <SX1276OnDio0Irq+0x2a8>)
 8009bee:	2200      	movs	r2, #0
 8009bf0:	f883 213d 	strb.w	r2, [r3, #317]	@ 0x13d
                SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8009bf4:	4b2b      	ldr	r3, [pc, #172]	@ (8009ca4 <SX1276OnDio0Irq+0x2a8>)
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	f8a3 2148 	strh.w	r2, [r3, #328]	@ 0x148
                SX1276.Settings.FskPacketHandler.Size = 0;
 8009bfc:	4b29      	ldr	r3, [pc, #164]	@ (8009ca4 <SX1276OnDio0Irq+0x2a8>)
 8009bfe:	2200      	movs	r2, #0
 8009c00:	f8a3 2146 	strh.w	r2, [r3, #326]	@ 0x146
                break;
 8009c04:	e0f6      	b.n	8009df4 <SX1276OnDio0Irq+0x3f8>
                    int8_t snr = 0;
 8009c06:	2300      	movs	r3, #0
 8009c08:	71fb      	strb	r3, [r7, #7]
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 8009c0a:	2140      	movs	r1, #64	@ 0x40
 8009c0c:	2012      	movs	r0, #18
 8009c0e:	f7ff fdaf 	bl	8009770 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 8009c12:	2012      	movs	r0, #18
 8009c14:	f7ff fdbe 	bl	8009794 <SX1276Read>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	70fb      	strb	r3, [r7, #3]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 8009c1c:	78fb      	ldrb	r3, [r7, #3]
 8009c1e:	b2db      	uxtb	r3, r3
 8009c20:	f003 0320 	and.w	r3, r3, #32
 8009c24:	2b20      	cmp	r3, #32
 8009c26:	d122      	bne.n	8009c6e <SX1276OnDio0Irq+0x272>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 8009c28:	2120      	movs	r1, #32
 8009c2a:	2012      	movs	r0, #18
 8009c2c:	f7ff fda0 	bl	8009770 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 8009c30:	4b1c      	ldr	r3, [pc, #112]	@ (8009ca4 <SX1276OnDio0Irq+0x2a8>)
 8009c32:	f893 3162 	ldrb.w	r3, [r3, #354]	@ 0x162
 8009c36:	f083 0301 	eor.w	r3, r3, #1
 8009c3a:	b2db      	uxtb	r3, r3
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d003      	beq.n	8009c48 <SX1276OnDio0Irq+0x24c>
                            SX1276.Settings.State = RF_IDLE;
 8009c40:	4b18      	ldr	r3, [pc, #96]	@ (8009ca4 <SX1276OnDio0Irq+0x2a8>)
 8009c42:	2200      	movs	r2, #0
 8009c44:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                        TimerStop( &RxTimeoutTimer );
 8009c48:	4817      	ldr	r0, [pc, #92]	@ (8009ca8 <SX1276OnDio0Irq+0x2ac>)
 8009c4a:	f7fe f867 	bl	8007d1c <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8009c4e:	4b18      	ldr	r3, [pc, #96]	@ (8009cb0 <SX1276OnDio0Irq+0x2b4>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	f000 80cb 	beq.w	8009dee <SX1276OnDio0Irq+0x3f2>
 8009c58:	4b15      	ldr	r3, [pc, #84]	@ (8009cb0 <SX1276OnDio0Irq+0x2b4>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	691b      	ldr	r3, [r3, #16]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	f000 80c5 	beq.w	8009dee <SX1276OnDio0Irq+0x3f2>
                            RadioEvents->RxError( );
 8009c64:	4b12      	ldr	r3, [pc, #72]	@ (8009cb0 <SX1276OnDio0Irq+0x2b4>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	691b      	ldr	r3, [r3, #16]
 8009c6a:	4798      	blx	r3
                        break;
 8009c6c:	e0bf      	b.n	8009dee <SX1276OnDio0Irq+0x3f2>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = SX1276Read( REG_LR_PKTSNRVALUE );
 8009c6e:	2019      	movs	r0, #25
 8009c70:	f7ff fd90 	bl	8009794 <SX1276Read>
 8009c74:	4603      	mov	r3, r0
 8009c76:	b25a      	sxtb	r2, r3
 8009c78:	4b0a      	ldr	r3, [pc, #40]	@ (8009ca4 <SX1276OnDio0Irq+0x2a8>)
 8009c7a:	f883 2168 	strb.w	r2, [r3, #360]	@ 0x168
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue & 0x80 ) // The SNR sign bit is 1
 8009c7e:	4b09      	ldr	r3, [pc, #36]	@ (8009ca4 <SX1276OnDio0Irq+0x2a8>)
 8009c80:	f993 3168 	ldrsb.w	r3, [r3, #360]	@ 0x168
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	da19      	bge.n	8009cbc <SX1276OnDio0Irq+0x2c0>
                        snr = ( ( ~SX1276.Settings.LoRaPacketHandler.SnrValue + 1 ) & 0xFF ) >> 2;
 8009c88:	4b06      	ldr	r3, [pc, #24]	@ (8009ca4 <SX1276OnDio0Irq+0x2a8>)
 8009c8a:	f993 3168 	ldrsb.w	r3, [r3, #360]	@ 0x168
 8009c8e:	425b      	negs	r3, r3
 8009c90:	109b      	asrs	r3, r3, #2
 8009c92:	b25b      	sxtb	r3, r3
 8009c94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009c98:	71fb      	strb	r3, [r7, #7]
                        snr = -snr;
 8009c9a:	79fb      	ldrb	r3, [r7, #7]
 8009c9c:	425b      	negs	r3, r3
 8009c9e:	b2db      	uxtb	r3, r3
 8009ca0:	71fb      	strb	r3, [r7, #7]
 8009ca2:	e013      	b.n	8009ccc <SX1276OnDio0Irq+0x2d0>
 8009ca4:	20000424 	.word	0x20000424
 8009ca8:	200005a8 	.word	0x200005a8
 8009cac:	200005bc 	.word	0x200005bc
 8009cb0:	20000320 	.word	0x20000320
 8009cb4:	2000056a 	.word	0x2000056a
 8009cb8:	20000324 	.word	0x20000324
                        snr = ( SX1276.Settings.LoRaPacketHandler.SnrValue & 0xFF ) >> 2;
 8009cbc:	4b5f      	ldr	r3, [pc, #380]	@ (8009e3c <SX1276OnDio0Irq+0x440>)
 8009cbe:	f993 3168 	ldrsb.w	r3, [r3, #360]	@ 0x168
 8009cc2:	109b      	asrs	r3, r3, #2
 8009cc4:	b25b      	sxtb	r3, r3
 8009cc6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009cca:	71fb      	strb	r3, [r7, #7]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 8009ccc:	201a      	movs	r0, #26
 8009cce:	f7ff fd61 	bl	8009794 <SX1276Read>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	80bb      	strh	r3, [r7, #4]
                    if( snr < 0 )
 8009cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	da2d      	bge.n	8009d3a <SX1276OnDio0Irq+0x33e>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8009cde:	4b57      	ldr	r3, [pc, #348]	@ (8009e3c <SX1276OnDio0Irq+0x440>)
 8009ce0:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8009ce4:	4a56      	ldr	r2, [pc, #344]	@ (8009e40 <SX1276OnDio0Irq+0x444>)
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d913      	bls.n	8009d12 <SX1276OnDio0Irq+0x316>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 8009cea:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009cee:	111b      	asrs	r3, r3, #4
 8009cf0:	b21b      	sxth	r3, r3
 8009cf2:	b29a      	uxth	r2, r3
 8009cf4:	88bb      	ldrh	r3, [r7, #4]
 8009cf6:	4413      	add	r3, r2
 8009cf8:	b29a      	uxth	r2, r3
 8009cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009cfe:	b29b      	uxth	r3, r3
 8009d00:	4413      	add	r3, r2
 8009d02:	b29b      	uxth	r3, r3
 8009d04:	3b9d      	subs	r3, #157	@ 0x9d
 8009d06:	b29b      	uxth	r3, r3
 8009d08:	b21a      	sxth	r2, r3
 8009d0a:	4b4c      	ldr	r3, [pc, #304]	@ (8009e3c <SX1276OnDio0Irq+0x440>)
 8009d0c:	f8a3 216a 	strh.w	r2, [r3, #362]	@ 0x16a
 8009d10:	e036      	b.n	8009d80 <SX1276OnDio0Irq+0x384>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 8009d12:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009d16:	111b      	asrs	r3, r3, #4
 8009d18:	b21b      	sxth	r3, r3
 8009d1a:	b29a      	uxth	r2, r3
 8009d1c:	88bb      	ldrh	r3, [r7, #4]
 8009d1e:	4413      	add	r3, r2
 8009d20:	b29a      	uxth	r2, r3
 8009d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d26:	b29b      	uxth	r3, r3
 8009d28:	4413      	add	r3, r2
 8009d2a:	b29b      	uxth	r3, r3
 8009d2c:	3ba4      	subs	r3, #164	@ 0xa4
 8009d2e:	b29b      	uxth	r3, r3
 8009d30:	b21a      	sxth	r2, r3
 8009d32:	4b42      	ldr	r3, [pc, #264]	@ (8009e3c <SX1276OnDio0Irq+0x440>)
 8009d34:	f8a3 216a 	strh.w	r2, [r3, #362]	@ 0x16a
 8009d38:	e022      	b.n	8009d80 <SX1276OnDio0Irq+0x384>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8009d3a:	4b40      	ldr	r3, [pc, #256]	@ (8009e3c <SX1276OnDio0Irq+0x440>)
 8009d3c:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8009d40:	4a3f      	ldr	r2, [pc, #252]	@ (8009e40 <SX1276OnDio0Irq+0x444>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d90e      	bls.n	8009d64 <SX1276OnDio0Irq+0x368>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 8009d46:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009d4a:	111b      	asrs	r3, r3, #4
 8009d4c:	b21b      	sxth	r3, r3
 8009d4e:	b29a      	uxth	r2, r3
 8009d50:	88bb      	ldrh	r3, [r7, #4]
 8009d52:	4413      	add	r3, r2
 8009d54:	b29b      	uxth	r3, r3
 8009d56:	3b9d      	subs	r3, #157	@ 0x9d
 8009d58:	b29b      	uxth	r3, r3
 8009d5a:	b21a      	sxth	r2, r3
 8009d5c:	4b37      	ldr	r3, [pc, #220]	@ (8009e3c <SX1276OnDio0Irq+0x440>)
 8009d5e:	f8a3 216a 	strh.w	r2, [r3, #362]	@ 0x16a
 8009d62:	e00d      	b.n	8009d80 <SX1276OnDio0Irq+0x384>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 8009d64:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009d68:	111b      	asrs	r3, r3, #4
 8009d6a:	b21b      	sxth	r3, r3
 8009d6c:	b29a      	uxth	r2, r3
 8009d6e:	88bb      	ldrh	r3, [r7, #4]
 8009d70:	4413      	add	r3, r2
 8009d72:	b29b      	uxth	r3, r3
 8009d74:	3ba4      	subs	r3, #164	@ 0xa4
 8009d76:	b29b      	uxth	r3, r3
 8009d78:	b21a      	sxth	r2, r3
 8009d7a:	4b30      	ldr	r3, [pc, #192]	@ (8009e3c <SX1276OnDio0Irq+0x440>)
 8009d7c:	f8a3 216a 	strh.w	r2, [r3, #362]	@ 0x16a
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 8009d80:	2013      	movs	r0, #19
 8009d82:	f7ff fd07 	bl	8009794 <SX1276Read>
 8009d86:	4603      	mov	r3, r0
 8009d88:	461a      	mov	r2, r3
 8009d8a:	4b2c      	ldr	r3, [pc, #176]	@ (8009e3c <SX1276OnDio0Irq+0x440>)
 8009d8c:	f883 216c 	strb.w	r2, [r3, #364]	@ 0x16c
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 8009d90:	4b2a      	ldr	r3, [pc, #168]	@ (8009e3c <SX1276OnDio0Irq+0x440>)
 8009d92:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
 8009d96:	4619      	mov	r1, r3
 8009d98:	482a      	ldr	r0, [pc, #168]	@ (8009e44 <SX1276OnDio0Irq+0x448>)
 8009d9a:	f7ff fd83 	bl	80098a4 <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 8009d9e:	4b27      	ldr	r3, [pc, #156]	@ (8009e3c <SX1276OnDio0Irq+0x440>)
 8009da0:	f893 3162 	ldrb.w	r3, [r3, #354]	@ 0x162
 8009da4:	f083 0301 	eor.w	r3, r3, #1
 8009da8:	b2db      	uxtb	r3, r3
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d003      	beq.n	8009db6 <SX1276OnDio0Irq+0x3ba>
                        SX1276.Settings.State = RF_IDLE;
 8009dae:	4b23      	ldr	r3, [pc, #140]	@ (8009e3c <SX1276OnDio0Irq+0x440>)
 8009db0:	2200      	movs	r2, #0
 8009db2:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                    TimerStop( &RxTimeoutTimer );
 8009db6:	4824      	ldr	r0, [pc, #144]	@ (8009e48 <SX1276OnDio0Irq+0x44c>)
 8009db8:	f7fd ffb0 	bl	8007d1c <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8009dbc:	4b23      	ldr	r3, [pc, #140]	@ (8009e4c <SX1276OnDio0Irq+0x450>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d016      	beq.n	8009df2 <SX1276OnDio0Irq+0x3f6>
 8009dc4:	4b21      	ldr	r3, [pc, #132]	@ (8009e4c <SX1276OnDio0Irq+0x450>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	689b      	ldr	r3, [r3, #8]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d011      	beq.n	8009df2 <SX1276OnDio0Irq+0x3f6>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 8009dce:	4b1f      	ldr	r3, [pc, #124]	@ (8009e4c <SX1276OnDio0Irq+0x450>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	689c      	ldr	r4, [r3, #8]
 8009dd4:	4b19      	ldr	r3, [pc, #100]	@ (8009e3c <SX1276OnDio0Irq+0x440>)
 8009dd6:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
 8009dda:	4619      	mov	r1, r3
 8009ddc:	4b17      	ldr	r3, [pc, #92]	@ (8009e3c <SX1276OnDio0Irq+0x440>)
 8009dde:	f9b3 216a 	ldrsh.w	r2, [r3, #362]	@ 0x16a
 8009de2:	4b16      	ldr	r3, [pc, #88]	@ (8009e3c <SX1276OnDio0Irq+0x440>)
 8009de4:	f993 3168 	ldrsb.w	r3, [r3, #360]	@ 0x168
 8009de8:	4816      	ldr	r0, [pc, #88]	@ (8009e44 <SX1276OnDio0Irq+0x448>)
 8009dea:	47a0      	blx	r4
                break;
 8009dec:	e001      	b.n	8009df2 <SX1276OnDio0Irq+0x3f6>
                        break;
 8009dee:	bf00      	nop
 8009df0:	e020      	b.n	8009e34 <SX1276OnDio0Irq+0x438>
                break;
 8009df2:	bf00      	nop
            break;
 8009df4:	e01e      	b.n	8009e34 <SX1276OnDio0Irq+0x438>
            TimerStop( &TxTimeoutTimer );
 8009df6:	4816      	ldr	r0, [pc, #88]	@ (8009e50 <SX1276OnDio0Irq+0x454>)
 8009df8:	f7fd ff90 	bl	8007d1c <TimerStop>
            switch( SX1276.Settings.Modem )
 8009dfc:	4b0f      	ldr	r3, [pc, #60]	@ (8009e3c <SX1276OnDio0Irq+0x440>)
 8009dfe:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 8009e02:	2b01      	cmp	r3, #1
 8009e04:	d103      	bne.n	8009e0e <SX1276OnDio0Irq+0x412>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 8009e06:	2108      	movs	r1, #8
 8009e08:	2012      	movs	r0, #18
 8009e0a:	f7ff fcb1 	bl	8009770 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8009e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8009e3c <SX1276OnDio0Irq+0x440>)
 8009e10:	2200      	movs	r2, #0
 8009e12:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8009e16:	4b0d      	ldr	r3, [pc, #52]	@ (8009e4c <SX1276OnDio0Irq+0x450>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d008      	beq.n	8009e30 <SX1276OnDio0Irq+0x434>
 8009e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8009e4c <SX1276OnDio0Irq+0x450>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d003      	beq.n	8009e30 <SX1276OnDio0Irq+0x434>
                    RadioEvents->TxDone( );
 8009e28:	4b08      	ldr	r3, [pc, #32]	@ (8009e4c <SX1276OnDio0Irq+0x450>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	4798      	blx	r3
                break;
 8009e30:	bf00      	nop
            break;
 8009e32:	bf00      	nop
    }
}
 8009e34:	bf00      	nop
 8009e36:	370c      	adds	r7, #12
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd90      	pop	{r4, r7, pc}
 8009e3c:	20000424 	.word	0x20000424
 8009e40:	1f4add40 	.word	0x1f4add40
 8009e44:	20000324 	.word	0x20000324
 8009e48:	200005a8 	.word	0x200005a8
 8009e4c:	20000320 	.word	0x20000320
 8009e50:	20000594 	.word	0x20000594

08009e54 <SX1276OnDio1Irq>:

void SX1276OnDio1Irq( void )
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.State )
 8009e58:	4b69      	ldr	r3, [pc, #420]	@ (800a000 <SX1276OnDio1Irq+0x1ac>)
 8009e5a:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 8009e5e:	2b01      	cmp	r3, #1
 8009e60:	d003      	beq.n	8009e6a <SX1276OnDio1Irq+0x16>
 8009e62:	2b02      	cmp	r3, #2
 8009e64:	f000 8082 	beq.w	8009f6c <SX1276OnDio1Irq+0x118>
            default:
                break;
            }
            break;
        default:
            break;
 8009e68:	e0c8      	b.n	8009ffc <SX1276OnDio1Irq+0x1a8>
            switch( SX1276.Settings.Modem )
 8009e6a:	4b65      	ldr	r3, [pc, #404]	@ (800a000 <SX1276OnDio1Irq+0x1ac>)
 8009e6c:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d002      	beq.n	8009e7a <SX1276OnDio1Irq+0x26>
 8009e74:	2b01      	cmp	r3, #1
 8009e76:	d05f      	beq.n	8009f38 <SX1276OnDio1Irq+0xe4>
                break;
 8009e78:	e077      	b.n	8009f6a <SX1276OnDio1Irq+0x116>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8009e7a:	4b61      	ldr	r3, [pc, #388]	@ (800a000 <SX1276OnDio1Irq+0x1ac>)
 8009e7c:	f8b3 3146 	ldrh.w	r3, [r3, #326]	@ 0x146
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d119      	bne.n	8009eb8 <SX1276OnDio1Irq+0x64>
 8009e84:	4b5e      	ldr	r3, [pc, #376]	@ (800a000 <SX1276OnDio1Irq+0x1ac>)
 8009e86:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d114      	bne.n	8009eb8 <SX1276OnDio1Irq+0x64>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8009e8e:	4b5c      	ldr	r3, [pc, #368]	@ (800a000 <SX1276OnDio1Irq+0x1ac>)
 8009e90:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8009e94:	f083 0301 	eor.w	r3, r3, #1
 8009e98:	b2db      	uxtb	r3, r3
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d004      	beq.n	8009ea8 <SX1276OnDio1Irq+0x54>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 8009e9e:	2101      	movs	r1, #1
 8009ea0:	4858      	ldr	r0, [pc, #352]	@ (800a004 <SX1276OnDio1Irq+0x1b0>)
 8009ea2:	f7ff fcff 	bl	80098a4 <SX1276ReadFifo>
 8009ea6:	e007      	b.n	8009eb8 <SX1276OnDio1Irq+0x64>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8009ea8:	2032      	movs	r0, #50	@ 0x32
 8009eaa:	f7ff fc73 	bl	8009794 <SX1276Read>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	461a      	mov	r2, r3
 8009eb2:	4b53      	ldr	r3, [pc, #332]	@ (800a000 <SX1276OnDio1Irq+0x1ac>)
 8009eb4:	f8a3 2146 	strh.w	r2, [r3, #326]	@ 0x146
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.FifoThresh )
 8009eb8:	4b51      	ldr	r3, [pc, #324]	@ (800a000 <SX1276OnDio1Irq+0x1ac>)
 8009eba:	f8b3 3146 	ldrh.w	r3, [r3, #326]	@ 0x146
 8009ebe:	461a      	mov	r2, r3
 8009ec0:	4b4f      	ldr	r3, [pc, #316]	@ (800a000 <SX1276OnDio1Irq+0x1ac>)
 8009ec2:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 8009ec6:	1ad3      	subs	r3, r2, r3
 8009ec8:	4a4d      	ldr	r2, [pc, #308]	@ (800a000 <SX1276OnDio1Irq+0x1ac>)
 8009eca:	f892 214a 	ldrb.w	r2, [r2, #330]	@ 0x14a
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	dd18      	ble.n	8009f04 <SX1276OnDio1Irq+0xb0>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh );
 8009ed2:	4b4b      	ldr	r3, [pc, #300]	@ (800a000 <SX1276OnDio1Irq+0x1ac>)
 8009ed4:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 8009ed8:	461a      	mov	r2, r3
 8009eda:	4b4b      	ldr	r3, [pc, #300]	@ (800a008 <SX1276OnDio1Irq+0x1b4>)
 8009edc:	4413      	add	r3, r2
 8009ede:	4a48      	ldr	r2, [pc, #288]	@ (800a000 <SX1276OnDio1Irq+0x1ac>)
 8009ee0:	f892 214a 	ldrb.w	r2, [r2, #330]	@ 0x14a
 8009ee4:	4611      	mov	r1, r2
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f7ff fcdc 	bl	80098a4 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh;
 8009eec:	4b44      	ldr	r3, [pc, #272]	@ (800a000 <SX1276OnDio1Irq+0x1ac>)
 8009eee:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 8009ef2:	4a43      	ldr	r2, [pc, #268]	@ (800a000 <SX1276OnDio1Irq+0x1ac>)
 8009ef4:	f892 214a 	ldrb.w	r2, [r2, #330]	@ 0x14a
 8009ef8:	4413      	add	r3, r2
 8009efa:	b29a      	uxth	r2, r3
 8009efc:	4b40      	ldr	r3, [pc, #256]	@ (800a000 <SX1276OnDio1Irq+0x1ac>)
 8009efe:	f8a3 2148 	strh.w	r2, [r3, #328]	@ 0x148
                break;
 8009f02:	e032      	b.n	8009f6a <SX1276OnDio1Irq+0x116>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8009f04:	4b3e      	ldr	r3, [pc, #248]	@ (800a000 <SX1276OnDio1Irq+0x1ac>)
 8009f06:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 8009f0a:	461a      	mov	r2, r3
 8009f0c:	4b3e      	ldr	r3, [pc, #248]	@ (800a008 <SX1276OnDio1Irq+0x1b4>)
 8009f0e:	18d0      	adds	r0, r2, r3
 8009f10:	4b3b      	ldr	r3, [pc, #236]	@ (800a000 <SX1276OnDio1Irq+0x1ac>)
 8009f12:	f8b3 3146 	ldrh.w	r3, [r3, #326]	@ 0x146
 8009f16:	b2da      	uxtb	r2, r3
 8009f18:	4b39      	ldr	r3, [pc, #228]	@ (800a000 <SX1276OnDio1Irq+0x1ac>)
 8009f1a:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 8009f1e:	b2db      	uxtb	r3, r3
 8009f20:	1ad3      	subs	r3, r2, r3
 8009f22:	b2db      	uxtb	r3, r3
 8009f24:	4619      	mov	r1, r3
 8009f26:	f7ff fcbd 	bl	80098a4 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8009f2a:	4b35      	ldr	r3, [pc, #212]	@ (800a000 <SX1276OnDio1Irq+0x1ac>)
 8009f2c:	f8b3 2146 	ldrh.w	r2, [r3, #326]	@ 0x146
 8009f30:	4b33      	ldr	r3, [pc, #204]	@ (800a000 <SX1276OnDio1Irq+0x1ac>)
 8009f32:	f8a3 2148 	strh.w	r2, [r3, #328]	@ 0x148
                break;
 8009f36:	e018      	b.n	8009f6a <SX1276OnDio1Irq+0x116>
                TimerStop( &RxTimeoutTimer );
 8009f38:	4834      	ldr	r0, [pc, #208]	@ (800a00c <SX1276OnDio1Irq+0x1b8>)
 8009f3a:	f7fd feef 	bl	8007d1c <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 8009f3e:	2180      	movs	r1, #128	@ 0x80
 8009f40:	2012      	movs	r0, #18
 8009f42:	f7ff fc15 	bl	8009770 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8009f46:	4b2e      	ldr	r3, [pc, #184]	@ (800a000 <SX1276OnDio1Irq+0x1ac>)
 8009f48:	2200      	movs	r2, #0
 8009f4a:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8009f4e:	4b30      	ldr	r3, [pc, #192]	@ (800a010 <SX1276OnDio1Irq+0x1bc>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d008      	beq.n	8009f68 <SX1276OnDio1Irq+0x114>
 8009f56:	4b2e      	ldr	r3, [pc, #184]	@ (800a010 <SX1276OnDio1Irq+0x1bc>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	68db      	ldr	r3, [r3, #12]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d003      	beq.n	8009f68 <SX1276OnDio1Irq+0x114>
                    RadioEvents->RxTimeout( );
 8009f60:	4b2b      	ldr	r3, [pc, #172]	@ (800a010 <SX1276OnDio1Irq+0x1bc>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	68db      	ldr	r3, [r3, #12]
 8009f66:	4798      	blx	r3
                break;
 8009f68:	bf00      	nop
            break;
 8009f6a:	e047      	b.n	8009ffc <SX1276OnDio1Irq+0x1a8>
            switch( SX1276.Settings.Modem )
 8009f6c:	4b24      	ldr	r3, [pc, #144]	@ (800a000 <SX1276OnDio1Irq+0x1ac>)
 8009f6e:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d001      	beq.n	8009f7a <SX1276OnDio1Irq+0x126>
 8009f76:	2b01      	cmp	r3, #1
                break;
 8009f78:	e03f      	b.n	8009ffa <SX1276OnDio1Irq+0x1a6>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 8009f7a:	4b21      	ldr	r3, [pc, #132]	@ (800a000 <SX1276OnDio1Irq+0x1ac>)
 8009f7c:	f8b3 3146 	ldrh.w	r3, [r3, #326]	@ 0x146
 8009f80:	461a      	mov	r2, r3
 8009f82:	4b1f      	ldr	r3, [pc, #124]	@ (800a000 <SX1276OnDio1Irq+0x1ac>)
 8009f84:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 8009f88:	1ad3      	subs	r3, r2, r3
 8009f8a:	4a1d      	ldr	r2, [pc, #116]	@ (800a000 <SX1276OnDio1Irq+0x1ac>)
 8009f8c:	f892 214b 	ldrb.w	r2, [r2, #331]	@ 0x14b
 8009f90:	4293      	cmp	r3, r2
 8009f92:	dd18      	ble.n	8009fc6 <SX1276OnDio1Irq+0x172>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 8009f94:	4b1a      	ldr	r3, [pc, #104]	@ (800a000 <SX1276OnDio1Irq+0x1ac>)
 8009f96:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	4b1a      	ldr	r3, [pc, #104]	@ (800a008 <SX1276OnDio1Irq+0x1b4>)
 8009f9e:	4413      	add	r3, r2
 8009fa0:	4a17      	ldr	r2, [pc, #92]	@ (800a000 <SX1276OnDio1Irq+0x1ac>)
 8009fa2:	f892 214b 	ldrb.w	r2, [r2, #331]	@ 0x14b
 8009fa6:	4611      	mov	r1, r2
 8009fa8:	4618      	mov	r0, r3
 8009faa:	f7ff fc6b 	bl	8009884 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8009fae:	4b14      	ldr	r3, [pc, #80]	@ (800a000 <SX1276OnDio1Irq+0x1ac>)
 8009fb0:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 8009fb4:	4a12      	ldr	r2, [pc, #72]	@ (800a000 <SX1276OnDio1Irq+0x1ac>)
 8009fb6:	f892 214b 	ldrb.w	r2, [r2, #331]	@ 0x14b
 8009fba:	4413      	add	r3, r2
 8009fbc:	b29a      	uxth	r2, r3
 8009fbe:	4b10      	ldr	r3, [pc, #64]	@ (800a000 <SX1276OnDio1Irq+0x1ac>)
 8009fc0:	f8a3 2148 	strh.w	r2, [r3, #328]	@ 0x148
                break;
 8009fc4:	e018      	b.n	8009ff8 <SX1276OnDio1Irq+0x1a4>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8009fc6:	4b0e      	ldr	r3, [pc, #56]	@ (800a000 <SX1276OnDio1Irq+0x1ac>)
 8009fc8:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 8009fcc:	461a      	mov	r2, r3
 8009fce:	4b0e      	ldr	r3, [pc, #56]	@ (800a008 <SX1276OnDio1Irq+0x1b4>)
 8009fd0:	18d0      	adds	r0, r2, r3
 8009fd2:	4b0b      	ldr	r3, [pc, #44]	@ (800a000 <SX1276OnDio1Irq+0x1ac>)
 8009fd4:	f8b3 3146 	ldrh.w	r3, [r3, #326]	@ 0x146
 8009fd8:	b2da      	uxtb	r2, r3
 8009fda:	4b09      	ldr	r3, [pc, #36]	@ (800a000 <SX1276OnDio1Irq+0x1ac>)
 8009fdc:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 8009fe0:	b2db      	uxtb	r3, r3
 8009fe2:	1ad3      	subs	r3, r2, r3
 8009fe4:	b2db      	uxtb	r3, r3
 8009fe6:	4619      	mov	r1, r3
 8009fe8:	f7ff fc4c 	bl	8009884 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 8009fec:	4b04      	ldr	r3, [pc, #16]	@ (800a000 <SX1276OnDio1Irq+0x1ac>)
 8009fee:	f8b3 2146 	ldrh.w	r2, [r3, #326]	@ 0x146
 8009ff2:	4b03      	ldr	r3, [pc, #12]	@ (800a000 <SX1276OnDio1Irq+0x1ac>)
 8009ff4:	f8a3 2148 	strh.w	r2, [r3, #328]	@ 0x148
                break;
 8009ff8:	bf00      	nop
            break;
 8009ffa:	bf00      	nop
    }
}
 8009ffc:	bf00      	nop
 8009ffe:	bd80      	pop	{r7, pc}
 800a000:	20000424 	.word	0x20000424
 800a004:	2000056a 	.word	0x2000056a
 800a008:	20000324 	.word	0x20000324
 800a00c:	200005a8 	.word	0x200005a8
 800a010:	20000320 	.word	0x20000320
 800a014:	00000000 	.word	0x00000000

0800a018 <SX1276OnDio2Irq>:

void SX1276OnDio2Irq( void )
{
 800a018:	b598      	push	{r3, r4, r7, lr}
 800a01a:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.State )
 800a01c:	4b5a      	ldr	r3, [pc, #360]	@ (800a188 <SX1276OnDio2Irq+0x170>)
 800a01e:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 800a022:	2b01      	cmp	r3, #1
 800a024:	d002      	beq.n	800a02c <SX1276OnDio2Irq+0x14>
 800a026:	2b02      	cmp	r3, #2
 800a028:	d07b      	beq.n	800a122 <SX1276OnDio2Irq+0x10a>
            default:
                break;
            }
            break;
        default:
            break;
 800a02a:	e0a6      	b.n	800a17a <SX1276OnDio2Irq+0x162>
            switch( SX1276.Settings.Modem )
 800a02c:	4b56      	ldr	r3, [pc, #344]	@ (800a188 <SX1276OnDio2Irq+0x170>)
 800a02e:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 800a032:	2b00      	cmp	r3, #0
 800a034:	d002      	beq.n	800a03c <SX1276OnDio2Irq+0x24>
 800a036:	2b01      	cmp	r3, #1
 800a038:	d050      	beq.n	800a0dc <SX1276OnDio2Irq+0xc4>
                break;
 800a03a:	e071      	b.n	800a120 <SX1276OnDio2Irq+0x108>
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected == true ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == false ) )
 800a03c:	4b52      	ldr	r3, [pc, #328]	@ (800a188 <SX1276OnDio2Irq+0x170>)
 800a03e:	f893 313c 	ldrb.w	r3, [r3, #316]	@ 0x13c
 800a042:	2b01      	cmp	r3, #1
 800a044:	d169      	bne.n	800a11a <SX1276OnDio2Irq+0x102>
 800a046:	4b50      	ldr	r3, [pc, #320]	@ (800a188 <SX1276OnDio2Irq+0x170>)
 800a048:	f893 313d 	ldrb.w	r3, [r3, #317]	@ 0x13d
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d164      	bne.n	800a11a <SX1276OnDio2Irq+0x102>
                    TimerStop( &RxTimeoutSyncWord );
 800a050:	484e      	ldr	r0, [pc, #312]	@ (800a18c <SX1276OnDio2Irq+0x174>)
 800a052:	f7fd fe63 	bl	8007d1c <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 800a056:	4b4c      	ldr	r3, [pc, #304]	@ (800a188 <SX1276OnDio2Irq+0x170>)
 800a058:	2201      	movs	r2, #1
 800a05a:	f883 213d 	strb.w	r2, [r3, #317]	@ 0x13d
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 800a05e:	2011      	movs	r0, #17
 800a060:	f7ff fb98 	bl	8009794 <SX1276Read>
 800a064:	4603      	mov	r3, r0
 800a066:	085b      	lsrs	r3, r3, #1
 800a068:	b2db      	uxtb	r3, r3
 800a06a:	425b      	negs	r3, r3
 800a06c:	b2db      	uxtb	r3, r3
 800a06e:	b25a      	sxtb	r2, r3
 800a070:	4b45      	ldr	r3, [pc, #276]	@ (800a188 <SX1276OnDio2Irq+0x170>)
 800a072:	f883 213e 	strb.w	r2, [r3, #318]	@ 0x13e
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )( double )( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 800a076:	201b      	movs	r0, #27
 800a078:	f7ff fb8c 	bl	8009794 <SX1276Read>
 800a07c:	4603      	mov	r3, r0
 800a07e:	021c      	lsls	r4, r3, #8
                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) ) *
 800a080:	201c      	movs	r0, #28
 800a082:	f7ff fb87 	bl	8009794 <SX1276Read>
 800a086:	4603      	mov	r3, r0
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )( double )( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 800a088:	4323      	orrs	r3, r4
 800a08a:	4618      	mov	r0, r3
 800a08c:	f7f6 fa4e 	bl	800052c <__aeabi_i2d>
 800a090:	4602      	mov	r2, r0
 800a092:	460b      	mov	r3, r1
 800a094:	4610      	mov	r0, r2
 800a096:	4619      	mov	r1, r3
 800a098:	f7f6 fd4c 	bl	8000b34 <__aeabi_d2iz>
 800a09c:	4603      	mov	r3, r0
                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) ) *
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f7f6 fa44 	bl	800052c <__aeabi_i2d>
 800a0a4:	a336      	add	r3, pc, #216	@ (adr r3, 800a180 <SX1276OnDio2Irq+0x168>)
 800a0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0aa:	f7f6 faa9 	bl	8000600 <__aeabi_dmul>
 800a0ae:	4602      	mov	r2, r0
 800a0b0:	460b      	mov	r3, r1
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )( double )( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 800a0b2:	4610      	mov	r0, r2
 800a0b4:	4619      	mov	r1, r3
 800a0b6:	f7f6 fd3d 	bl	8000b34 <__aeabi_d2iz>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	4a32      	ldr	r2, [pc, #200]	@ (800a188 <SX1276OnDio2Irq+0x170>)
 800a0be:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 800a0c2:	200c      	movs	r0, #12
 800a0c4:	f7ff fb66 	bl	8009794 <SX1276Read>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	095b      	lsrs	r3, r3, #5
 800a0cc:	b2db      	uxtb	r3, r3
 800a0ce:	f003 0307 	and.w	r3, r3, #7
 800a0d2:	b2da      	uxtb	r2, r3
 800a0d4:	4b2c      	ldr	r3, [pc, #176]	@ (800a188 <SX1276OnDio2Irq+0x170>)
 800a0d6:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
                break;
 800a0da:	e01e      	b.n	800a11a <SX1276OnDio2Irq+0x102>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 800a0dc:	4b2a      	ldr	r3, [pc, #168]	@ (800a188 <SX1276OnDio2Irq+0x170>)
 800a0de:	f893 315f 	ldrb.w	r3, [r3, #351]	@ 0x15f
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d01b      	beq.n	800a11e <SX1276OnDio2Irq+0x106>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 800a0e6:	2102      	movs	r1, #2
 800a0e8:	2012      	movs	r0, #18
 800a0ea:	f7ff fb41 	bl	8009770 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 800a0ee:	4b28      	ldr	r3, [pc, #160]	@ (800a190 <SX1276OnDio2Irq+0x178>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d013      	beq.n	800a11e <SX1276OnDio2Irq+0x106>
 800a0f6:	4b26      	ldr	r3, [pc, #152]	@ (800a190 <SX1276OnDio2Irq+0x178>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	695b      	ldr	r3, [r3, #20]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d00e      	beq.n	800a11e <SX1276OnDio2Irq+0x106>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 800a100:	4b23      	ldr	r3, [pc, #140]	@ (800a190 <SX1276OnDio2Irq+0x178>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	695c      	ldr	r4, [r3, #20]
 800a106:	201c      	movs	r0, #28
 800a108:	f7ff fb44 	bl	8009794 <SX1276Read>
 800a10c:	4603      	mov	r3, r0
 800a10e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a112:	b2db      	uxtb	r3, r3
 800a114:	4618      	mov	r0, r3
 800a116:	47a0      	blx	r4
                break;
 800a118:	e001      	b.n	800a11e <SX1276OnDio2Irq+0x106>
                break;
 800a11a:	bf00      	nop
 800a11c:	e02d      	b.n	800a17a <SX1276OnDio2Irq+0x162>
                break;
 800a11e:	bf00      	nop
            break;
 800a120:	e02b      	b.n	800a17a <SX1276OnDio2Irq+0x162>
            switch( SX1276.Settings.Modem )
 800a122:	4b19      	ldr	r3, [pc, #100]	@ (800a188 <SX1276OnDio2Irq+0x170>)
 800a124:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d020      	beq.n	800a16e <SX1276OnDio2Irq+0x156>
 800a12c:	2b01      	cmp	r3, #1
 800a12e:	d120      	bne.n	800a172 <SX1276OnDio2Irq+0x15a>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 800a130:	4b15      	ldr	r3, [pc, #84]	@ (800a188 <SX1276OnDio2Irq+0x170>)
 800a132:	f893 315f 	ldrb.w	r3, [r3, #351]	@ 0x15f
 800a136:	2b00      	cmp	r3, #0
 800a138:	d01d      	beq.n	800a176 <SX1276OnDio2Irq+0x15e>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 800a13a:	2102      	movs	r1, #2
 800a13c:	2012      	movs	r0, #18
 800a13e:	f7ff fb17 	bl	8009770 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 800a142:	4b13      	ldr	r3, [pc, #76]	@ (800a190 <SX1276OnDio2Irq+0x178>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d015      	beq.n	800a176 <SX1276OnDio2Irq+0x15e>
 800a14a:	4b11      	ldr	r3, [pc, #68]	@ (800a190 <SX1276OnDio2Irq+0x178>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	695b      	ldr	r3, [r3, #20]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d010      	beq.n	800a176 <SX1276OnDio2Irq+0x15e>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 800a154:	4b0e      	ldr	r3, [pc, #56]	@ (800a190 <SX1276OnDio2Irq+0x178>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	695c      	ldr	r4, [r3, #20]
 800a15a:	201c      	movs	r0, #28
 800a15c:	f7ff fb1a 	bl	8009794 <SX1276Read>
 800a160:	4603      	mov	r3, r0
 800a162:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a166:	b2db      	uxtb	r3, r3
 800a168:	4618      	mov	r0, r3
 800a16a:	47a0      	blx	r4
                break;
 800a16c:	e003      	b.n	800a176 <SX1276OnDio2Irq+0x15e>
                break;
 800a16e:	bf00      	nop
 800a170:	e002      	b.n	800a178 <SX1276OnDio2Irq+0x160>
                break;
 800a172:	bf00      	nop
 800a174:	e000      	b.n	800a178 <SX1276OnDio2Irq+0x160>
                break;
 800a176:	bf00      	nop
            break;
 800a178:	bf00      	nop
    }
}
 800a17a:	bf00      	nop
 800a17c:	bd98      	pop	{r3, r4, r7, pc}
 800a17e:	bf00      	nop
 800a180:	00000000 	.word	0x00000000
 800a184:	404e8480 	.word	0x404e8480
 800a188:	20000424 	.word	0x20000424
 800a18c:	200005bc 	.word	0x200005bc
 800a190:	20000320 	.word	0x20000320

0800a194 <SX1276OnDio3Irq>:

void SX1276OnDio3Irq( void )
{
 800a194:	b580      	push	{r7, lr}
 800a196:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 800a198:	4b1d      	ldr	r3, [pc, #116]	@ (800a210 <SX1276OnDio3Irq+0x7c>)
 800a19a:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d030      	beq.n	800a204 <SX1276OnDio3Irq+0x70>
 800a1a2:	2b01      	cmp	r3, #1
 800a1a4:	d000      	beq.n	800a1a8 <SX1276OnDio3Irq+0x14>
                RadioEvents->CadDone( false );
            }
        }
        break;
    default:
        break;
 800a1a6:	e030      	b.n	800a20a <SX1276OnDio3Irq+0x76>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 800a1a8:	2012      	movs	r0, #18
 800a1aa:	f7ff faf3 	bl	8009794 <SX1276Read>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	f003 0301 	and.w	r3, r3, #1
 800a1b4:	2b01      	cmp	r3, #1
 800a1b6:	d112      	bne.n	800a1de <SX1276OnDio3Irq+0x4a>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 800a1b8:	2105      	movs	r1, #5
 800a1ba:	2012      	movs	r0, #18
 800a1bc:	f7ff fad8 	bl	8009770 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800a1c0:	4b14      	ldr	r3, [pc, #80]	@ (800a214 <SX1276OnDio3Irq+0x80>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d01f      	beq.n	800a208 <SX1276OnDio3Irq+0x74>
 800a1c8:	4b12      	ldr	r3, [pc, #72]	@ (800a214 <SX1276OnDio3Irq+0x80>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	699b      	ldr	r3, [r3, #24]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d01a      	beq.n	800a208 <SX1276OnDio3Irq+0x74>
                RadioEvents->CadDone( true );
 800a1d2:	4b10      	ldr	r3, [pc, #64]	@ (800a214 <SX1276OnDio3Irq+0x80>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	699b      	ldr	r3, [r3, #24]
 800a1d8:	2001      	movs	r0, #1
 800a1da:	4798      	blx	r3
        break;
 800a1dc:	e014      	b.n	800a208 <SX1276OnDio3Irq+0x74>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 800a1de:	2104      	movs	r1, #4
 800a1e0:	2012      	movs	r0, #18
 800a1e2:	f7ff fac5 	bl	8009770 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800a1e6:	4b0b      	ldr	r3, [pc, #44]	@ (800a214 <SX1276OnDio3Irq+0x80>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d00c      	beq.n	800a208 <SX1276OnDio3Irq+0x74>
 800a1ee:	4b09      	ldr	r3, [pc, #36]	@ (800a214 <SX1276OnDio3Irq+0x80>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	699b      	ldr	r3, [r3, #24]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d007      	beq.n	800a208 <SX1276OnDio3Irq+0x74>
                RadioEvents->CadDone( false );
 800a1f8:	4b06      	ldr	r3, [pc, #24]	@ (800a214 <SX1276OnDio3Irq+0x80>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	699b      	ldr	r3, [r3, #24]
 800a1fe:	2000      	movs	r0, #0
 800a200:	4798      	blx	r3
        break;
 800a202:	e001      	b.n	800a208 <SX1276OnDio3Irq+0x74>
        break;
 800a204:	bf00      	nop
 800a206:	e000      	b.n	800a20a <SX1276OnDio3Irq+0x76>
        break;
 800a208:	bf00      	nop
    }
}
 800a20a:	bf00      	nop
 800a20c:	bd80      	pop	{r7, pc}
 800a20e:	bf00      	nop
 800a210:	20000424 	.word	0x20000424
 800a214:	20000320 	.word	0x20000320

0800a218 <SX1276OnDio4Irq>:

void SX1276OnDio4Irq( void )
{
 800a218:	b480      	push	{r7}
 800a21a:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 800a21c:	4b0c      	ldr	r3, [pc, #48]	@ (800a250 <SX1276OnDio4Irq+0x38>)
 800a21e:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 800a222:	2b00      	cmp	r3, #0
 800a224:	d002      	beq.n	800a22c <SX1276OnDio4Irq+0x14>
 800a226:	2b01      	cmp	r3, #1
 800a228:	d00a      	beq.n	800a240 <SX1276OnDio4Irq+0x28>
        }
        break;
    case MODEM_LORA:
        break;
    default:
        break;
 800a22a:	e00c      	b.n	800a246 <SX1276OnDio4Irq+0x2e>
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 800a22c:	4b08      	ldr	r3, [pc, #32]	@ (800a250 <SX1276OnDio4Irq+0x38>)
 800a22e:	f893 313c 	ldrb.w	r3, [r3, #316]	@ 0x13c
 800a232:	2b00      	cmp	r3, #0
 800a234:	d106      	bne.n	800a244 <SX1276OnDio4Irq+0x2c>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 800a236:	4b06      	ldr	r3, [pc, #24]	@ (800a250 <SX1276OnDio4Irq+0x38>)
 800a238:	2201      	movs	r2, #1
 800a23a:	f883 213c 	strb.w	r2, [r3, #316]	@ 0x13c
        break;
 800a23e:	e001      	b.n	800a244 <SX1276OnDio4Irq+0x2c>
        break;
 800a240:	bf00      	nop
 800a242:	e000      	b.n	800a246 <SX1276OnDio4Irq+0x2e>
        break;
 800a244:	bf00      	nop
    }
}
 800a246:	bf00      	nop
 800a248:	46bd      	mov	sp, r7
 800a24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24e:	4770      	bx	lr
 800a250:	20000424 	.word	0x20000424

0800a254 <atoi>:
 800a254:	220a      	movs	r2, #10
 800a256:	2100      	movs	r1, #0
 800a258:	f000 b87a 	b.w	800a350 <strtol>

0800a25c <_strtol_l.constprop.0>:
 800a25c:	2b24      	cmp	r3, #36	@ 0x24
 800a25e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a262:	4686      	mov	lr, r0
 800a264:	4690      	mov	r8, r2
 800a266:	d801      	bhi.n	800a26c <_strtol_l.constprop.0+0x10>
 800a268:	2b01      	cmp	r3, #1
 800a26a:	d106      	bne.n	800a27a <_strtol_l.constprop.0+0x1e>
 800a26c:	f000 fb06 	bl	800a87c <__errno>
 800a270:	2316      	movs	r3, #22
 800a272:	6003      	str	r3, [r0, #0]
 800a274:	2000      	movs	r0, #0
 800a276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a27a:	460d      	mov	r5, r1
 800a27c:	4833      	ldr	r0, [pc, #204]	@ (800a34c <_strtol_l.constprop.0+0xf0>)
 800a27e:	462a      	mov	r2, r5
 800a280:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a284:	5d06      	ldrb	r6, [r0, r4]
 800a286:	f016 0608 	ands.w	r6, r6, #8
 800a28a:	d1f8      	bne.n	800a27e <_strtol_l.constprop.0+0x22>
 800a28c:	2c2d      	cmp	r4, #45	@ 0x2d
 800a28e:	d12d      	bne.n	800a2ec <_strtol_l.constprop.0+0x90>
 800a290:	782c      	ldrb	r4, [r5, #0]
 800a292:	2601      	movs	r6, #1
 800a294:	1c95      	adds	r5, r2, #2
 800a296:	f033 0210 	bics.w	r2, r3, #16
 800a29a:	d109      	bne.n	800a2b0 <_strtol_l.constprop.0+0x54>
 800a29c:	2c30      	cmp	r4, #48	@ 0x30
 800a29e:	d12a      	bne.n	800a2f6 <_strtol_l.constprop.0+0x9a>
 800a2a0:	782a      	ldrb	r2, [r5, #0]
 800a2a2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a2a6:	2a58      	cmp	r2, #88	@ 0x58
 800a2a8:	d125      	bne.n	800a2f6 <_strtol_l.constprop.0+0x9a>
 800a2aa:	786c      	ldrb	r4, [r5, #1]
 800a2ac:	2310      	movs	r3, #16
 800a2ae:	3502      	adds	r5, #2
 800a2b0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a2ba:	4610      	mov	r0, r2
 800a2bc:	fbbc f9f3 	udiv	r9, ip, r3
 800a2c0:	fb03 ca19 	mls	sl, r3, r9, ip
 800a2c4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a2c8:	2f09      	cmp	r7, #9
 800a2ca:	d81b      	bhi.n	800a304 <_strtol_l.constprop.0+0xa8>
 800a2cc:	463c      	mov	r4, r7
 800a2ce:	42a3      	cmp	r3, r4
 800a2d0:	dd27      	ble.n	800a322 <_strtol_l.constprop.0+0xc6>
 800a2d2:	1c57      	adds	r7, r2, #1
 800a2d4:	d007      	beq.n	800a2e6 <_strtol_l.constprop.0+0x8a>
 800a2d6:	4581      	cmp	r9, r0
 800a2d8:	d320      	bcc.n	800a31c <_strtol_l.constprop.0+0xc0>
 800a2da:	d101      	bne.n	800a2e0 <_strtol_l.constprop.0+0x84>
 800a2dc:	45a2      	cmp	sl, r4
 800a2de:	db1d      	blt.n	800a31c <_strtol_l.constprop.0+0xc0>
 800a2e0:	fb00 4003 	mla	r0, r0, r3, r4
 800a2e4:	2201      	movs	r2, #1
 800a2e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a2ea:	e7eb      	b.n	800a2c4 <_strtol_l.constprop.0+0x68>
 800a2ec:	2c2b      	cmp	r4, #43	@ 0x2b
 800a2ee:	bf04      	itt	eq
 800a2f0:	782c      	ldrbeq	r4, [r5, #0]
 800a2f2:	1c95      	addeq	r5, r2, #2
 800a2f4:	e7cf      	b.n	800a296 <_strtol_l.constprop.0+0x3a>
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d1da      	bne.n	800a2b0 <_strtol_l.constprop.0+0x54>
 800a2fa:	2c30      	cmp	r4, #48	@ 0x30
 800a2fc:	bf0c      	ite	eq
 800a2fe:	2308      	moveq	r3, #8
 800a300:	230a      	movne	r3, #10
 800a302:	e7d5      	b.n	800a2b0 <_strtol_l.constprop.0+0x54>
 800a304:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a308:	2f19      	cmp	r7, #25
 800a30a:	d801      	bhi.n	800a310 <_strtol_l.constprop.0+0xb4>
 800a30c:	3c37      	subs	r4, #55	@ 0x37
 800a30e:	e7de      	b.n	800a2ce <_strtol_l.constprop.0+0x72>
 800a310:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a314:	2f19      	cmp	r7, #25
 800a316:	d804      	bhi.n	800a322 <_strtol_l.constprop.0+0xc6>
 800a318:	3c57      	subs	r4, #87	@ 0x57
 800a31a:	e7d8      	b.n	800a2ce <_strtol_l.constprop.0+0x72>
 800a31c:	f04f 32ff 	mov.w	r2, #4294967295
 800a320:	e7e1      	b.n	800a2e6 <_strtol_l.constprop.0+0x8a>
 800a322:	1c53      	adds	r3, r2, #1
 800a324:	d108      	bne.n	800a338 <_strtol_l.constprop.0+0xdc>
 800a326:	2322      	movs	r3, #34	@ 0x22
 800a328:	4660      	mov	r0, ip
 800a32a:	f8ce 3000 	str.w	r3, [lr]
 800a32e:	f1b8 0f00 	cmp.w	r8, #0
 800a332:	d0a0      	beq.n	800a276 <_strtol_l.constprop.0+0x1a>
 800a334:	1e69      	subs	r1, r5, #1
 800a336:	e006      	b.n	800a346 <_strtol_l.constprop.0+0xea>
 800a338:	b106      	cbz	r6, 800a33c <_strtol_l.constprop.0+0xe0>
 800a33a:	4240      	negs	r0, r0
 800a33c:	f1b8 0f00 	cmp.w	r8, #0
 800a340:	d099      	beq.n	800a276 <_strtol_l.constprop.0+0x1a>
 800a342:	2a00      	cmp	r2, #0
 800a344:	d1f6      	bne.n	800a334 <_strtol_l.constprop.0+0xd8>
 800a346:	f8c8 1000 	str.w	r1, [r8]
 800a34a:	e794      	b.n	800a276 <_strtol_l.constprop.0+0x1a>
 800a34c:	0800bb9d 	.word	0x0800bb9d

0800a350 <strtol>:
 800a350:	4613      	mov	r3, r2
 800a352:	460a      	mov	r2, r1
 800a354:	4601      	mov	r1, r0
 800a356:	4802      	ldr	r0, [pc, #8]	@ (800a360 <strtol+0x10>)
 800a358:	6800      	ldr	r0, [r0, #0]
 800a35a:	f7ff bf7f 	b.w	800a25c <_strtol_l.constprop.0>
 800a35e:	bf00      	nop
 800a360:	2000004c 	.word	0x2000004c

0800a364 <std>:
 800a364:	2300      	movs	r3, #0
 800a366:	b510      	push	{r4, lr}
 800a368:	4604      	mov	r4, r0
 800a36a:	6083      	str	r3, [r0, #8]
 800a36c:	8181      	strh	r1, [r0, #12]
 800a36e:	4619      	mov	r1, r3
 800a370:	6643      	str	r3, [r0, #100]	@ 0x64
 800a372:	81c2      	strh	r2, [r0, #14]
 800a374:	2208      	movs	r2, #8
 800a376:	6183      	str	r3, [r0, #24]
 800a378:	e9c0 3300 	strd	r3, r3, [r0]
 800a37c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a380:	305c      	adds	r0, #92	@ 0x5c
 800a382:	f000 fa2d 	bl	800a7e0 <memset>
 800a386:	4b0d      	ldr	r3, [pc, #52]	@ (800a3bc <std+0x58>)
 800a388:	6224      	str	r4, [r4, #32]
 800a38a:	6263      	str	r3, [r4, #36]	@ 0x24
 800a38c:	4b0c      	ldr	r3, [pc, #48]	@ (800a3c0 <std+0x5c>)
 800a38e:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a390:	4b0c      	ldr	r3, [pc, #48]	@ (800a3c4 <std+0x60>)
 800a392:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a394:	4b0c      	ldr	r3, [pc, #48]	@ (800a3c8 <std+0x64>)
 800a396:	6323      	str	r3, [r4, #48]	@ 0x30
 800a398:	4b0c      	ldr	r3, [pc, #48]	@ (800a3cc <std+0x68>)
 800a39a:	429c      	cmp	r4, r3
 800a39c:	d006      	beq.n	800a3ac <std+0x48>
 800a39e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a3a2:	4294      	cmp	r4, r2
 800a3a4:	d002      	beq.n	800a3ac <std+0x48>
 800a3a6:	33d0      	adds	r3, #208	@ 0xd0
 800a3a8:	429c      	cmp	r4, r3
 800a3aa:	d105      	bne.n	800a3b8 <std+0x54>
 800a3ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a3b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3b4:	f000 ba8c 	b.w	800a8d0 <__retarget_lock_init_recursive>
 800a3b8:	bd10      	pop	{r4, pc}
 800a3ba:	bf00      	nop
 800a3bc:	0800a631 	.word	0x0800a631
 800a3c0:	0800a653 	.word	0x0800a653
 800a3c4:	0800a68b 	.word	0x0800a68b
 800a3c8:	0800a6af 	.word	0x0800a6af
 800a3cc:	200005d0 	.word	0x200005d0

0800a3d0 <stdio_exit_handler>:
 800a3d0:	4a02      	ldr	r2, [pc, #8]	@ (800a3dc <stdio_exit_handler+0xc>)
 800a3d2:	4903      	ldr	r1, [pc, #12]	@ (800a3e0 <stdio_exit_handler+0x10>)
 800a3d4:	4803      	ldr	r0, [pc, #12]	@ (800a3e4 <stdio_exit_handler+0x14>)
 800a3d6:	f000 b869 	b.w	800a4ac <_fwalk_sglue>
 800a3da:	bf00      	nop
 800a3dc:	20000040 	.word	0x20000040
 800a3e0:	0800b429 	.word	0x0800b429
 800a3e4:	20000050 	.word	0x20000050

0800a3e8 <cleanup_stdio>:
 800a3e8:	6841      	ldr	r1, [r0, #4]
 800a3ea:	4b0c      	ldr	r3, [pc, #48]	@ (800a41c <cleanup_stdio+0x34>)
 800a3ec:	4299      	cmp	r1, r3
 800a3ee:	b510      	push	{r4, lr}
 800a3f0:	4604      	mov	r4, r0
 800a3f2:	d001      	beq.n	800a3f8 <cleanup_stdio+0x10>
 800a3f4:	f001 f818 	bl	800b428 <_fflush_r>
 800a3f8:	68a1      	ldr	r1, [r4, #8]
 800a3fa:	4b09      	ldr	r3, [pc, #36]	@ (800a420 <cleanup_stdio+0x38>)
 800a3fc:	4299      	cmp	r1, r3
 800a3fe:	d002      	beq.n	800a406 <cleanup_stdio+0x1e>
 800a400:	4620      	mov	r0, r4
 800a402:	f001 f811 	bl	800b428 <_fflush_r>
 800a406:	68e1      	ldr	r1, [r4, #12]
 800a408:	4b06      	ldr	r3, [pc, #24]	@ (800a424 <cleanup_stdio+0x3c>)
 800a40a:	4299      	cmp	r1, r3
 800a40c:	d004      	beq.n	800a418 <cleanup_stdio+0x30>
 800a40e:	4620      	mov	r0, r4
 800a410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a414:	f001 b808 	b.w	800b428 <_fflush_r>
 800a418:	bd10      	pop	{r4, pc}
 800a41a:	bf00      	nop
 800a41c:	200005d0 	.word	0x200005d0
 800a420:	20000638 	.word	0x20000638
 800a424:	200006a0 	.word	0x200006a0

0800a428 <global_stdio_init.part.0>:
 800a428:	b510      	push	{r4, lr}
 800a42a:	4b0b      	ldr	r3, [pc, #44]	@ (800a458 <global_stdio_init.part.0+0x30>)
 800a42c:	2104      	movs	r1, #4
 800a42e:	4c0b      	ldr	r4, [pc, #44]	@ (800a45c <global_stdio_init.part.0+0x34>)
 800a430:	4a0b      	ldr	r2, [pc, #44]	@ (800a460 <global_stdio_init.part.0+0x38>)
 800a432:	4620      	mov	r0, r4
 800a434:	601a      	str	r2, [r3, #0]
 800a436:	2200      	movs	r2, #0
 800a438:	f7ff ff94 	bl	800a364 <std>
 800a43c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a440:	2201      	movs	r2, #1
 800a442:	2109      	movs	r1, #9
 800a444:	f7ff ff8e 	bl	800a364 <std>
 800a448:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a44c:	2202      	movs	r2, #2
 800a44e:	2112      	movs	r1, #18
 800a450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a454:	f7ff bf86 	b.w	800a364 <std>
 800a458:	20000708 	.word	0x20000708
 800a45c:	200005d0 	.word	0x200005d0
 800a460:	0800a3d1 	.word	0x0800a3d1

0800a464 <__sfp_lock_acquire>:
 800a464:	4801      	ldr	r0, [pc, #4]	@ (800a46c <__sfp_lock_acquire+0x8>)
 800a466:	f000 ba34 	b.w	800a8d2 <__retarget_lock_acquire_recursive>
 800a46a:	bf00      	nop
 800a46c:	20000711 	.word	0x20000711

0800a470 <__sfp_lock_release>:
 800a470:	4801      	ldr	r0, [pc, #4]	@ (800a478 <__sfp_lock_release+0x8>)
 800a472:	f000 ba2f 	b.w	800a8d4 <__retarget_lock_release_recursive>
 800a476:	bf00      	nop
 800a478:	20000711 	.word	0x20000711

0800a47c <__sinit>:
 800a47c:	b510      	push	{r4, lr}
 800a47e:	4604      	mov	r4, r0
 800a480:	f7ff fff0 	bl	800a464 <__sfp_lock_acquire>
 800a484:	6a23      	ldr	r3, [r4, #32]
 800a486:	b11b      	cbz	r3, 800a490 <__sinit+0x14>
 800a488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a48c:	f7ff bff0 	b.w	800a470 <__sfp_lock_release>
 800a490:	4b04      	ldr	r3, [pc, #16]	@ (800a4a4 <__sinit+0x28>)
 800a492:	6223      	str	r3, [r4, #32]
 800a494:	4b04      	ldr	r3, [pc, #16]	@ (800a4a8 <__sinit+0x2c>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d1f5      	bne.n	800a488 <__sinit+0xc>
 800a49c:	f7ff ffc4 	bl	800a428 <global_stdio_init.part.0>
 800a4a0:	e7f2      	b.n	800a488 <__sinit+0xc>
 800a4a2:	bf00      	nop
 800a4a4:	0800a3e9 	.word	0x0800a3e9
 800a4a8:	20000708 	.word	0x20000708

0800a4ac <_fwalk_sglue>:
 800a4ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4b0:	4607      	mov	r7, r0
 800a4b2:	4688      	mov	r8, r1
 800a4b4:	4614      	mov	r4, r2
 800a4b6:	2600      	movs	r6, #0
 800a4b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a4bc:	f1b9 0901 	subs.w	r9, r9, #1
 800a4c0:	d505      	bpl.n	800a4ce <_fwalk_sglue+0x22>
 800a4c2:	6824      	ldr	r4, [r4, #0]
 800a4c4:	2c00      	cmp	r4, #0
 800a4c6:	d1f7      	bne.n	800a4b8 <_fwalk_sglue+0xc>
 800a4c8:	4630      	mov	r0, r6
 800a4ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4ce:	89ab      	ldrh	r3, [r5, #12]
 800a4d0:	2b01      	cmp	r3, #1
 800a4d2:	d907      	bls.n	800a4e4 <_fwalk_sglue+0x38>
 800a4d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a4d8:	3301      	adds	r3, #1
 800a4da:	d003      	beq.n	800a4e4 <_fwalk_sglue+0x38>
 800a4dc:	4629      	mov	r1, r5
 800a4de:	4638      	mov	r0, r7
 800a4e0:	47c0      	blx	r8
 800a4e2:	4306      	orrs	r6, r0
 800a4e4:	3568      	adds	r5, #104	@ 0x68
 800a4e6:	e7e9      	b.n	800a4bc <_fwalk_sglue+0x10>

0800a4e8 <iprintf>:
 800a4e8:	b40f      	push	{r0, r1, r2, r3}
 800a4ea:	b507      	push	{r0, r1, r2, lr}
 800a4ec:	4906      	ldr	r1, [pc, #24]	@ (800a508 <iprintf+0x20>)
 800a4ee:	ab04      	add	r3, sp, #16
 800a4f0:	6808      	ldr	r0, [r1, #0]
 800a4f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4f6:	6881      	ldr	r1, [r0, #8]
 800a4f8:	9301      	str	r3, [sp, #4]
 800a4fa:	f000 fc67 	bl	800adcc <_vfiprintf_r>
 800a4fe:	b003      	add	sp, #12
 800a500:	f85d eb04 	ldr.w	lr, [sp], #4
 800a504:	b004      	add	sp, #16
 800a506:	4770      	bx	lr
 800a508:	2000004c 	.word	0x2000004c

0800a50c <_puts_r>:
 800a50c:	6a03      	ldr	r3, [r0, #32]
 800a50e:	b570      	push	{r4, r5, r6, lr}
 800a510:	4605      	mov	r5, r0
 800a512:	460e      	mov	r6, r1
 800a514:	6884      	ldr	r4, [r0, #8]
 800a516:	b90b      	cbnz	r3, 800a51c <_puts_r+0x10>
 800a518:	f7ff ffb0 	bl	800a47c <__sinit>
 800a51c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a51e:	07db      	lsls	r3, r3, #31
 800a520:	d405      	bmi.n	800a52e <_puts_r+0x22>
 800a522:	89a3      	ldrh	r3, [r4, #12]
 800a524:	0598      	lsls	r0, r3, #22
 800a526:	d402      	bmi.n	800a52e <_puts_r+0x22>
 800a528:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a52a:	f000 f9d2 	bl	800a8d2 <__retarget_lock_acquire_recursive>
 800a52e:	89a3      	ldrh	r3, [r4, #12]
 800a530:	0719      	lsls	r1, r3, #28
 800a532:	d502      	bpl.n	800a53a <_puts_r+0x2e>
 800a534:	6923      	ldr	r3, [r4, #16]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d135      	bne.n	800a5a6 <_puts_r+0x9a>
 800a53a:	4621      	mov	r1, r4
 800a53c:	4628      	mov	r0, r5
 800a53e:	f000 f8f9 	bl	800a734 <__swsetup_r>
 800a542:	b380      	cbz	r0, 800a5a6 <_puts_r+0x9a>
 800a544:	f04f 35ff 	mov.w	r5, #4294967295
 800a548:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a54a:	07da      	lsls	r2, r3, #31
 800a54c:	d405      	bmi.n	800a55a <_puts_r+0x4e>
 800a54e:	89a3      	ldrh	r3, [r4, #12]
 800a550:	059b      	lsls	r3, r3, #22
 800a552:	d402      	bmi.n	800a55a <_puts_r+0x4e>
 800a554:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a556:	f000 f9bd 	bl	800a8d4 <__retarget_lock_release_recursive>
 800a55a:	4628      	mov	r0, r5
 800a55c:	bd70      	pop	{r4, r5, r6, pc}
 800a55e:	2b00      	cmp	r3, #0
 800a560:	da04      	bge.n	800a56c <_puts_r+0x60>
 800a562:	69a2      	ldr	r2, [r4, #24]
 800a564:	429a      	cmp	r2, r3
 800a566:	dc17      	bgt.n	800a598 <_puts_r+0x8c>
 800a568:	290a      	cmp	r1, #10
 800a56a:	d015      	beq.n	800a598 <_puts_r+0x8c>
 800a56c:	6823      	ldr	r3, [r4, #0]
 800a56e:	1c5a      	adds	r2, r3, #1
 800a570:	6022      	str	r2, [r4, #0]
 800a572:	7019      	strb	r1, [r3, #0]
 800a574:	68a3      	ldr	r3, [r4, #8]
 800a576:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a57a:	3b01      	subs	r3, #1
 800a57c:	60a3      	str	r3, [r4, #8]
 800a57e:	2900      	cmp	r1, #0
 800a580:	d1ed      	bne.n	800a55e <_puts_r+0x52>
 800a582:	2b00      	cmp	r3, #0
 800a584:	da11      	bge.n	800a5aa <_puts_r+0x9e>
 800a586:	4622      	mov	r2, r4
 800a588:	210a      	movs	r1, #10
 800a58a:	4628      	mov	r0, r5
 800a58c:	f000 f893 	bl	800a6b6 <__swbuf_r>
 800a590:	3001      	adds	r0, #1
 800a592:	d0d7      	beq.n	800a544 <_puts_r+0x38>
 800a594:	250a      	movs	r5, #10
 800a596:	e7d7      	b.n	800a548 <_puts_r+0x3c>
 800a598:	4622      	mov	r2, r4
 800a59a:	4628      	mov	r0, r5
 800a59c:	f000 f88b 	bl	800a6b6 <__swbuf_r>
 800a5a0:	3001      	adds	r0, #1
 800a5a2:	d1e7      	bne.n	800a574 <_puts_r+0x68>
 800a5a4:	e7ce      	b.n	800a544 <_puts_r+0x38>
 800a5a6:	3e01      	subs	r6, #1
 800a5a8:	e7e4      	b.n	800a574 <_puts_r+0x68>
 800a5aa:	6823      	ldr	r3, [r4, #0]
 800a5ac:	1c5a      	adds	r2, r3, #1
 800a5ae:	6022      	str	r2, [r4, #0]
 800a5b0:	220a      	movs	r2, #10
 800a5b2:	701a      	strb	r2, [r3, #0]
 800a5b4:	e7ee      	b.n	800a594 <_puts_r+0x88>
	...

0800a5b8 <puts>:
 800a5b8:	4b02      	ldr	r3, [pc, #8]	@ (800a5c4 <puts+0xc>)
 800a5ba:	4601      	mov	r1, r0
 800a5bc:	6818      	ldr	r0, [r3, #0]
 800a5be:	f7ff bfa5 	b.w	800a50c <_puts_r>
 800a5c2:	bf00      	nop
 800a5c4:	2000004c 	.word	0x2000004c

0800a5c8 <sniprintf>:
 800a5c8:	b40c      	push	{r2, r3}
 800a5ca:	4b18      	ldr	r3, [pc, #96]	@ (800a62c <sniprintf+0x64>)
 800a5cc:	b530      	push	{r4, r5, lr}
 800a5ce:	1e0c      	subs	r4, r1, #0
 800a5d0:	b09d      	sub	sp, #116	@ 0x74
 800a5d2:	681d      	ldr	r5, [r3, #0]
 800a5d4:	da08      	bge.n	800a5e8 <sniprintf+0x20>
 800a5d6:	238b      	movs	r3, #139	@ 0x8b
 800a5d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a5dc:	602b      	str	r3, [r5, #0]
 800a5de:	b01d      	add	sp, #116	@ 0x74
 800a5e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a5e4:	b002      	add	sp, #8
 800a5e6:	4770      	bx	lr
 800a5e8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a5ec:	9002      	str	r0, [sp, #8]
 800a5ee:	9006      	str	r0, [sp, #24]
 800a5f0:	a902      	add	r1, sp, #8
 800a5f2:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a5f6:	bf14      	ite	ne
 800a5f8:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a5fc:	4623      	moveq	r3, r4
 800a5fe:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a600:	4628      	mov	r0, r5
 800a602:	9304      	str	r3, [sp, #16]
 800a604:	9307      	str	r3, [sp, #28]
 800a606:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a60a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a60e:	ab21      	add	r3, sp, #132	@ 0x84
 800a610:	9301      	str	r3, [sp, #4]
 800a612:	f000 fab5 	bl	800ab80 <_svfiprintf_r>
 800a616:	1c43      	adds	r3, r0, #1
 800a618:	bfbc      	itt	lt
 800a61a:	238b      	movlt	r3, #139	@ 0x8b
 800a61c:	602b      	strlt	r3, [r5, #0]
 800a61e:	2c00      	cmp	r4, #0
 800a620:	d0dd      	beq.n	800a5de <sniprintf+0x16>
 800a622:	9b02      	ldr	r3, [sp, #8]
 800a624:	2200      	movs	r2, #0
 800a626:	701a      	strb	r2, [r3, #0]
 800a628:	e7d9      	b.n	800a5de <sniprintf+0x16>
 800a62a:	bf00      	nop
 800a62c:	2000004c 	.word	0x2000004c

0800a630 <__sread>:
 800a630:	b510      	push	{r4, lr}
 800a632:	460c      	mov	r4, r1
 800a634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a638:	f000 f8fc 	bl	800a834 <_read_r>
 800a63c:	2800      	cmp	r0, #0
 800a63e:	bfab      	itete	ge
 800a640:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a642:	89a3      	ldrhlt	r3, [r4, #12]
 800a644:	181b      	addge	r3, r3, r0
 800a646:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a64a:	bfac      	ite	ge
 800a64c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a64e:	81a3      	strhlt	r3, [r4, #12]
 800a650:	bd10      	pop	{r4, pc}

0800a652 <__swrite>:
 800a652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a656:	461f      	mov	r7, r3
 800a658:	898b      	ldrh	r3, [r1, #12]
 800a65a:	4605      	mov	r5, r0
 800a65c:	460c      	mov	r4, r1
 800a65e:	05db      	lsls	r3, r3, #23
 800a660:	4616      	mov	r6, r2
 800a662:	d505      	bpl.n	800a670 <__swrite+0x1e>
 800a664:	2302      	movs	r3, #2
 800a666:	2200      	movs	r2, #0
 800a668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a66c:	f000 f8d0 	bl	800a810 <_lseek_r>
 800a670:	89a3      	ldrh	r3, [r4, #12]
 800a672:	4632      	mov	r2, r6
 800a674:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a678:	4628      	mov	r0, r5
 800a67a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a67e:	81a3      	strh	r3, [r4, #12]
 800a680:	463b      	mov	r3, r7
 800a682:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a686:	f000 b8e7 	b.w	800a858 <_write_r>

0800a68a <__sseek>:
 800a68a:	b510      	push	{r4, lr}
 800a68c:	460c      	mov	r4, r1
 800a68e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a692:	f000 f8bd 	bl	800a810 <_lseek_r>
 800a696:	1c43      	adds	r3, r0, #1
 800a698:	89a3      	ldrh	r3, [r4, #12]
 800a69a:	bf15      	itete	ne
 800a69c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a69e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a6a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a6a6:	81a3      	strheq	r3, [r4, #12]
 800a6a8:	bf18      	it	ne
 800a6aa:	81a3      	strhne	r3, [r4, #12]
 800a6ac:	bd10      	pop	{r4, pc}

0800a6ae <__sclose>:
 800a6ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6b2:	f000 b89d 	b.w	800a7f0 <_close_r>

0800a6b6 <__swbuf_r>:
 800a6b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6b8:	460e      	mov	r6, r1
 800a6ba:	4614      	mov	r4, r2
 800a6bc:	4605      	mov	r5, r0
 800a6be:	b118      	cbz	r0, 800a6c8 <__swbuf_r+0x12>
 800a6c0:	6a03      	ldr	r3, [r0, #32]
 800a6c2:	b90b      	cbnz	r3, 800a6c8 <__swbuf_r+0x12>
 800a6c4:	f7ff feda 	bl	800a47c <__sinit>
 800a6c8:	69a3      	ldr	r3, [r4, #24]
 800a6ca:	60a3      	str	r3, [r4, #8]
 800a6cc:	89a3      	ldrh	r3, [r4, #12]
 800a6ce:	071a      	lsls	r2, r3, #28
 800a6d0:	d501      	bpl.n	800a6d6 <__swbuf_r+0x20>
 800a6d2:	6923      	ldr	r3, [r4, #16]
 800a6d4:	b943      	cbnz	r3, 800a6e8 <__swbuf_r+0x32>
 800a6d6:	4621      	mov	r1, r4
 800a6d8:	4628      	mov	r0, r5
 800a6da:	f000 f82b 	bl	800a734 <__swsetup_r>
 800a6de:	b118      	cbz	r0, 800a6e8 <__swbuf_r+0x32>
 800a6e0:	f04f 37ff 	mov.w	r7, #4294967295
 800a6e4:	4638      	mov	r0, r7
 800a6e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6e8:	6823      	ldr	r3, [r4, #0]
 800a6ea:	b2f6      	uxtb	r6, r6
 800a6ec:	6922      	ldr	r2, [r4, #16]
 800a6ee:	4637      	mov	r7, r6
 800a6f0:	1a98      	subs	r0, r3, r2
 800a6f2:	6963      	ldr	r3, [r4, #20]
 800a6f4:	4283      	cmp	r3, r0
 800a6f6:	dc05      	bgt.n	800a704 <__swbuf_r+0x4e>
 800a6f8:	4621      	mov	r1, r4
 800a6fa:	4628      	mov	r0, r5
 800a6fc:	f000 fe94 	bl	800b428 <_fflush_r>
 800a700:	2800      	cmp	r0, #0
 800a702:	d1ed      	bne.n	800a6e0 <__swbuf_r+0x2a>
 800a704:	68a3      	ldr	r3, [r4, #8]
 800a706:	3b01      	subs	r3, #1
 800a708:	60a3      	str	r3, [r4, #8]
 800a70a:	6823      	ldr	r3, [r4, #0]
 800a70c:	1c5a      	adds	r2, r3, #1
 800a70e:	6022      	str	r2, [r4, #0]
 800a710:	701e      	strb	r6, [r3, #0]
 800a712:	1c43      	adds	r3, r0, #1
 800a714:	6962      	ldr	r2, [r4, #20]
 800a716:	429a      	cmp	r2, r3
 800a718:	d004      	beq.n	800a724 <__swbuf_r+0x6e>
 800a71a:	89a3      	ldrh	r3, [r4, #12]
 800a71c:	07db      	lsls	r3, r3, #31
 800a71e:	d5e1      	bpl.n	800a6e4 <__swbuf_r+0x2e>
 800a720:	2e0a      	cmp	r6, #10
 800a722:	d1df      	bne.n	800a6e4 <__swbuf_r+0x2e>
 800a724:	4621      	mov	r1, r4
 800a726:	4628      	mov	r0, r5
 800a728:	f000 fe7e 	bl	800b428 <_fflush_r>
 800a72c:	2800      	cmp	r0, #0
 800a72e:	d0d9      	beq.n	800a6e4 <__swbuf_r+0x2e>
 800a730:	e7d6      	b.n	800a6e0 <__swbuf_r+0x2a>
	...

0800a734 <__swsetup_r>:
 800a734:	b538      	push	{r3, r4, r5, lr}
 800a736:	4b29      	ldr	r3, [pc, #164]	@ (800a7dc <__swsetup_r+0xa8>)
 800a738:	4605      	mov	r5, r0
 800a73a:	460c      	mov	r4, r1
 800a73c:	6818      	ldr	r0, [r3, #0]
 800a73e:	b118      	cbz	r0, 800a748 <__swsetup_r+0x14>
 800a740:	6a03      	ldr	r3, [r0, #32]
 800a742:	b90b      	cbnz	r3, 800a748 <__swsetup_r+0x14>
 800a744:	f7ff fe9a 	bl	800a47c <__sinit>
 800a748:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a74c:	0719      	lsls	r1, r3, #28
 800a74e:	d422      	bmi.n	800a796 <__swsetup_r+0x62>
 800a750:	06da      	lsls	r2, r3, #27
 800a752:	d407      	bmi.n	800a764 <__swsetup_r+0x30>
 800a754:	2209      	movs	r2, #9
 800a756:	602a      	str	r2, [r5, #0]
 800a758:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a75c:	f04f 30ff 	mov.w	r0, #4294967295
 800a760:	81a3      	strh	r3, [r4, #12]
 800a762:	e033      	b.n	800a7cc <__swsetup_r+0x98>
 800a764:	0758      	lsls	r0, r3, #29
 800a766:	d512      	bpl.n	800a78e <__swsetup_r+0x5a>
 800a768:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a76a:	b141      	cbz	r1, 800a77e <__swsetup_r+0x4a>
 800a76c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a770:	4299      	cmp	r1, r3
 800a772:	d002      	beq.n	800a77a <__swsetup_r+0x46>
 800a774:	4628      	mov	r0, r5
 800a776:	f000 f8af 	bl	800a8d8 <_free_r>
 800a77a:	2300      	movs	r3, #0
 800a77c:	6363      	str	r3, [r4, #52]	@ 0x34
 800a77e:	89a3      	ldrh	r3, [r4, #12]
 800a780:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a784:	81a3      	strh	r3, [r4, #12]
 800a786:	2300      	movs	r3, #0
 800a788:	6063      	str	r3, [r4, #4]
 800a78a:	6923      	ldr	r3, [r4, #16]
 800a78c:	6023      	str	r3, [r4, #0]
 800a78e:	89a3      	ldrh	r3, [r4, #12]
 800a790:	f043 0308 	orr.w	r3, r3, #8
 800a794:	81a3      	strh	r3, [r4, #12]
 800a796:	6923      	ldr	r3, [r4, #16]
 800a798:	b94b      	cbnz	r3, 800a7ae <__swsetup_r+0x7a>
 800a79a:	89a3      	ldrh	r3, [r4, #12]
 800a79c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a7a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a7a4:	d003      	beq.n	800a7ae <__swsetup_r+0x7a>
 800a7a6:	4621      	mov	r1, r4
 800a7a8:	4628      	mov	r0, r5
 800a7aa:	f000 fe8a 	bl	800b4c2 <__smakebuf_r>
 800a7ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7b2:	f013 0201 	ands.w	r2, r3, #1
 800a7b6:	d00a      	beq.n	800a7ce <__swsetup_r+0x9a>
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	60a2      	str	r2, [r4, #8]
 800a7bc:	6962      	ldr	r2, [r4, #20]
 800a7be:	4252      	negs	r2, r2
 800a7c0:	61a2      	str	r2, [r4, #24]
 800a7c2:	6922      	ldr	r2, [r4, #16]
 800a7c4:	b942      	cbnz	r2, 800a7d8 <__swsetup_r+0xa4>
 800a7c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a7ca:	d1c5      	bne.n	800a758 <__swsetup_r+0x24>
 800a7cc:	bd38      	pop	{r3, r4, r5, pc}
 800a7ce:	0799      	lsls	r1, r3, #30
 800a7d0:	bf58      	it	pl
 800a7d2:	6962      	ldrpl	r2, [r4, #20]
 800a7d4:	60a2      	str	r2, [r4, #8]
 800a7d6:	e7f4      	b.n	800a7c2 <__swsetup_r+0x8e>
 800a7d8:	2000      	movs	r0, #0
 800a7da:	e7f7      	b.n	800a7cc <__swsetup_r+0x98>
 800a7dc:	2000004c 	.word	0x2000004c

0800a7e0 <memset>:
 800a7e0:	4402      	add	r2, r0
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	d100      	bne.n	800a7ea <memset+0xa>
 800a7e8:	4770      	bx	lr
 800a7ea:	f803 1b01 	strb.w	r1, [r3], #1
 800a7ee:	e7f9      	b.n	800a7e4 <memset+0x4>

0800a7f0 <_close_r>:
 800a7f0:	b538      	push	{r3, r4, r5, lr}
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	4d05      	ldr	r5, [pc, #20]	@ (800a80c <_close_r+0x1c>)
 800a7f6:	4604      	mov	r4, r0
 800a7f8:	4608      	mov	r0, r1
 800a7fa:	602b      	str	r3, [r5, #0]
 800a7fc:	f7f7 f896 	bl	800192c <_close>
 800a800:	1c43      	adds	r3, r0, #1
 800a802:	d102      	bne.n	800a80a <_close_r+0x1a>
 800a804:	682b      	ldr	r3, [r5, #0]
 800a806:	b103      	cbz	r3, 800a80a <_close_r+0x1a>
 800a808:	6023      	str	r3, [r4, #0]
 800a80a:	bd38      	pop	{r3, r4, r5, pc}
 800a80c:	2000070c 	.word	0x2000070c

0800a810 <_lseek_r>:
 800a810:	b538      	push	{r3, r4, r5, lr}
 800a812:	4604      	mov	r4, r0
 800a814:	4d06      	ldr	r5, [pc, #24]	@ (800a830 <_lseek_r+0x20>)
 800a816:	4608      	mov	r0, r1
 800a818:	4611      	mov	r1, r2
 800a81a:	2200      	movs	r2, #0
 800a81c:	602a      	str	r2, [r5, #0]
 800a81e:	461a      	mov	r2, r3
 800a820:	f7f7 f8ab 	bl	800197a <_lseek>
 800a824:	1c43      	adds	r3, r0, #1
 800a826:	d102      	bne.n	800a82e <_lseek_r+0x1e>
 800a828:	682b      	ldr	r3, [r5, #0]
 800a82a:	b103      	cbz	r3, 800a82e <_lseek_r+0x1e>
 800a82c:	6023      	str	r3, [r4, #0]
 800a82e:	bd38      	pop	{r3, r4, r5, pc}
 800a830:	2000070c 	.word	0x2000070c

0800a834 <_read_r>:
 800a834:	b538      	push	{r3, r4, r5, lr}
 800a836:	4604      	mov	r4, r0
 800a838:	4d06      	ldr	r5, [pc, #24]	@ (800a854 <_read_r+0x20>)
 800a83a:	4608      	mov	r0, r1
 800a83c:	4611      	mov	r1, r2
 800a83e:	2200      	movs	r2, #0
 800a840:	602a      	str	r2, [r5, #0]
 800a842:	461a      	mov	r2, r3
 800a844:	f7f7 f839 	bl	80018ba <_read>
 800a848:	1c43      	adds	r3, r0, #1
 800a84a:	d102      	bne.n	800a852 <_read_r+0x1e>
 800a84c:	682b      	ldr	r3, [r5, #0]
 800a84e:	b103      	cbz	r3, 800a852 <_read_r+0x1e>
 800a850:	6023      	str	r3, [r4, #0]
 800a852:	bd38      	pop	{r3, r4, r5, pc}
 800a854:	2000070c 	.word	0x2000070c

0800a858 <_write_r>:
 800a858:	b538      	push	{r3, r4, r5, lr}
 800a85a:	4604      	mov	r4, r0
 800a85c:	4d06      	ldr	r5, [pc, #24]	@ (800a878 <_write_r+0x20>)
 800a85e:	4608      	mov	r0, r1
 800a860:	4611      	mov	r1, r2
 800a862:	2200      	movs	r2, #0
 800a864:	602a      	str	r2, [r5, #0]
 800a866:	461a      	mov	r2, r3
 800a868:	f7f7 f844 	bl	80018f4 <_write>
 800a86c:	1c43      	adds	r3, r0, #1
 800a86e:	d102      	bne.n	800a876 <_write_r+0x1e>
 800a870:	682b      	ldr	r3, [r5, #0]
 800a872:	b103      	cbz	r3, 800a876 <_write_r+0x1e>
 800a874:	6023      	str	r3, [r4, #0]
 800a876:	bd38      	pop	{r3, r4, r5, pc}
 800a878:	2000070c 	.word	0x2000070c

0800a87c <__errno>:
 800a87c:	4b01      	ldr	r3, [pc, #4]	@ (800a884 <__errno+0x8>)
 800a87e:	6818      	ldr	r0, [r3, #0]
 800a880:	4770      	bx	lr
 800a882:	bf00      	nop
 800a884:	2000004c 	.word	0x2000004c

0800a888 <__libc_init_array>:
 800a888:	b570      	push	{r4, r5, r6, lr}
 800a88a:	4d0d      	ldr	r5, [pc, #52]	@ (800a8c0 <__libc_init_array+0x38>)
 800a88c:	2600      	movs	r6, #0
 800a88e:	4c0d      	ldr	r4, [pc, #52]	@ (800a8c4 <__libc_init_array+0x3c>)
 800a890:	1b64      	subs	r4, r4, r5
 800a892:	10a4      	asrs	r4, r4, #2
 800a894:	42a6      	cmp	r6, r4
 800a896:	d109      	bne.n	800a8ac <__libc_init_array+0x24>
 800a898:	4d0b      	ldr	r5, [pc, #44]	@ (800a8c8 <__libc_init_array+0x40>)
 800a89a:	2600      	movs	r6, #0
 800a89c:	4c0b      	ldr	r4, [pc, #44]	@ (800a8cc <__libc_init_array+0x44>)
 800a89e:	f001 f82d 	bl	800b8fc <_init>
 800a8a2:	1b64      	subs	r4, r4, r5
 800a8a4:	10a4      	asrs	r4, r4, #2
 800a8a6:	42a6      	cmp	r6, r4
 800a8a8:	d105      	bne.n	800a8b6 <__libc_init_array+0x2e>
 800a8aa:	bd70      	pop	{r4, r5, r6, pc}
 800a8ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8b0:	3601      	adds	r6, #1
 800a8b2:	4798      	blx	r3
 800a8b4:	e7ee      	b.n	800a894 <__libc_init_array+0xc>
 800a8b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8ba:	3601      	adds	r6, #1
 800a8bc:	4798      	blx	r3
 800a8be:	e7f2      	b.n	800a8a6 <__libc_init_array+0x1e>
 800a8c0:	0800bcd8 	.word	0x0800bcd8
 800a8c4:	0800bcd8 	.word	0x0800bcd8
 800a8c8:	0800bcd8 	.word	0x0800bcd8
 800a8cc:	0800bcdc 	.word	0x0800bcdc

0800a8d0 <__retarget_lock_init_recursive>:
 800a8d0:	4770      	bx	lr

0800a8d2 <__retarget_lock_acquire_recursive>:
 800a8d2:	4770      	bx	lr

0800a8d4 <__retarget_lock_release_recursive>:
 800a8d4:	4770      	bx	lr
	...

0800a8d8 <_free_r>:
 800a8d8:	b538      	push	{r3, r4, r5, lr}
 800a8da:	4605      	mov	r5, r0
 800a8dc:	2900      	cmp	r1, #0
 800a8de:	d041      	beq.n	800a964 <_free_r+0x8c>
 800a8e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8e4:	1f0c      	subs	r4, r1, #4
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	bfb8      	it	lt
 800a8ea:	18e4      	addlt	r4, r4, r3
 800a8ec:	f000 f8e0 	bl	800aab0 <__malloc_lock>
 800a8f0:	4a1d      	ldr	r2, [pc, #116]	@ (800a968 <_free_r+0x90>)
 800a8f2:	6813      	ldr	r3, [r2, #0]
 800a8f4:	b933      	cbnz	r3, 800a904 <_free_r+0x2c>
 800a8f6:	6063      	str	r3, [r4, #4]
 800a8f8:	6014      	str	r4, [r2, #0]
 800a8fa:	4628      	mov	r0, r5
 800a8fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a900:	f000 b8dc 	b.w	800aabc <__malloc_unlock>
 800a904:	42a3      	cmp	r3, r4
 800a906:	d908      	bls.n	800a91a <_free_r+0x42>
 800a908:	6820      	ldr	r0, [r4, #0]
 800a90a:	1821      	adds	r1, r4, r0
 800a90c:	428b      	cmp	r3, r1
 800a90e:	bf01      	itttt	eq
 800a910:	6819      	ldreq	r1, [r3, #0]
 800a912:	685b      	ldreq	r3, [r3, #4]
 800a914:	1809      	addeq	r1, r1, r0
 800a916:	6021      	streq	r1, [r4, #0]
 800a918:	e7ed      	b.n	800a8f6 <_free_r+0x1e>
 800a91a:	461a      	mov	r2, r3
 800a91c:	685b      	ldr	r3, [r3, #4]
 800a91e:	b10b      	cbz	r3, 800a924 <_free_r+0x4c>
 800a920:	42a3      	cmp	r3, r4
 800a922:	d9fa      	bls.n	800a91a <_free_r+0x42>
 800a924:	6811      	ldr	r1, [r2, #0]
 800a926:	1850      	adds	r0, r2, r1
 800a928:	42a0      	cmp	r0, r4
 800a92a:	d10b      	bne.n	800a944 <_free_r+0x6c>
 800a92c:	6820      	ldr	r0, [r4, #0]
 800a92e:	4401      	add	r1, r0
 800a930:	1850      	adds	r0, r2, r1
 800a932:	6011      	str	r1, [r2, #0]
 800a934:	4283      	cmp	r3, r0
 800a936:	d1e0      	bne.n	800a8fa <_free_r+0x22>
 800a938:	6818      	ldr	r0, [r3, #0]
 800a93a:	685b      	ldr	r3, [r3, #4]
 800a93c:	4408      	add	r0, r1
 800a93e:	6053      	str	r3, [r2, #4]
 800a940:	6010      	str	r0, [r2, #0]
 800a942:	e7da      	b.n	800a8fa <_free_r+0x22>
 800a944:	d902      	bls.n	800a94c <_free_r+0x74>
 800a946:	230c      	movs	r3, #12
 800a948:	602b      	str	r3, [r5, #0]
 800a94a:	e7d6      	b.n	800a8fa <_free_r+0x22>
 800a94c:	6820      	ldr	r0, [r4, #0]
 800a94e:	1821      	adds	r1, r4, r0
 800a950:	428b      	cmp	r3, r1
 800a952:	bf02      	ittt	eq
 800a954:	6819      	ldreq	r1, [r3, #0]
 800a956:	685b      	ldreq	r3, [r3, #4]
 800a958:	1809      	addeq	r1, r1, r0
 800a95a:	6063      	str	r3, [r4, #4]
 800a95c:	bf08      	it	eq
 800a95e:	6021      	streq	r1, [r4, #0]
 800a960:	6054      	str	r4, [r2, #4]
 800a962:	e7ca      	b.n	800a8fa <_free_r+0x22>
 800a964:	bd38      	pop	{r3, r4, r5, pc}
 800a966:	bf00      	nop
 800a968:	20000718 	.word	0x20000718

0800a96c <sbrk_aligned>:
 800a96c:	b570      	push	{r4, r5, r6, lr}
 800a96e:	4e0f      	ldr	r6, [pc, #60]	@ (800a9ac <sbrk_aligned+0x40>)
 800a970:	460c      	mov	r4, r1
 800a972:	4605      	mov	r5, r0
 800a974:	6831      	ldr	r1, [r6, #0]
 800a976:	b911      	cbnz	r1, 800a97e <sbrk_aligned+0x12>
 800a978:	f000 fe1c 	bl	800b5b4 <_sbrk_r>
 800a97c:	6030      	str	r0, [r6, #0]
 800a97e:	4621      	mov	r1, r4
 800a980:	4628      	mov	r0, r5
 800a982:	f000 fe17 	bl	800b5b4 <_sbrk_r>
 800a986:	1c43      	adds	r3, r0, #1
 800a988:	d103      	bne.n	800a992 <sbrk_aligned+0x26>
 800a98a:	f04f 34ff 	mov.w	r4, #4294967295
 800a98e:	4620      	mov	r0, r4
 800a990:	bd70      	pop	{r4, r5, r6, pc}
 800a992:	1cc4      	adds	r4, r0, #3
 800a994:	f024 0403 	bic.w	r4, r4, #3
 800a998:	42a0      	cmp	r0, r4
 800a99a:	d0f8      	beq.n	800a98e <sbrk_aligned+0x22>
 800a99c:	1a21      	subs	r1, r4, r0
 800a99e:	4628      	mov	r0, r5
 800a9a0:	f000 fe08 	bl	800b5b4 <_sbrk_r>
 800a9a4:	3001      	adds	r0, #1
 800a9a6:	d1f2      	bne.n	800a98e <sbrk_aligned+0x22>
 800a9a8:	e7ef      	b.n	800a98a <sbrk_aligned+0x1e>
 800a9aa:	bf00      	nop
 800a9ac:	20000714 	.word	0x20000714

0800a9b0 <_malloc_r>:
 800a9b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9b4:	1ccd      	adds	r5, r1, #3
 800a9b6:	4606      	mov	r6, r0
 800a9b8:	f025 0503 	bic.w	r5, r5, #3
 800a9bc:	3508      	adds	r5, #8
 800a9be:	2d0c      	cmp	r5, #12
 800a9c0:	bf38      	it	cc
 800a9c2:	250c      	movcc	r5, #12
 800a9c4:	2d00      	cmp	r5, #0
 800a9c6:	db01      	blt.n	800a9cc <_malloc_r+0x1c>
 800a9c8:	42a9      	cmp	r1, r5
 800a9ca:	d904      	bls.n	800a9d6 <_malloc_r+0x26>
 800a9cc:	230c      	movs	r3, #12
 800a9ce:	6033      	str	r3, [r6, #0]
 800a9d0:	2000      	movs	r0, #0
 800a9d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aaac <_malloc_r+0xfc>
 800a9da:	f000 f869 	bl	800aab0 <__malloc_lock>
 800a9de:	f8d8 3000 	ldr.w	r3, [r8]
 800a9e2:	461c      	mov	r4, r3
 800a9e4:	bb44      	cbnz	r4, 800aa38 <_malloc_r+0x88>
 800a9e6:	4629      	mov	r1, r5
 800a9e8:	4630      	mov	r0, r6
 800a9ea:	f7ff ffbf 	bl	800a96c <sbrk_aligned>
 800a9ee:	1c43      	adds	r3, r0, #1
 800a9f0:	4604      	mov	r4, r0
 800a9f2:	d158      	bne.n	800aaa6 <_malloc_r+0xf6>
 800a9f4:	f8d8 4000 	ldr.w	r4, [r8]
 800a9f8:	4627      	mov	r7, r4
 800a9fa:	2f00      	cmp	r7, #0
 800a9fc:	d143      	bne.n	800aa86 <_malloc_r+0xd6>
 800a9fe:	2c00      	cmp	r4, #0
 800aa00:	d04b      	beq.n	800aa9a <_malloc_r+0xea>
 800aa02:	6823      	ldr	r3, [r4, #0]
 800aa04:	4639      	mov	r1, r7
 800aa06:	4630      	mov	r0, r6
 800aa08:	eb04 0903 	add.w	r9, r4, r3
 800aa0c:	f000 fdd2 	bl	800b5b4 <_sbrk_r>
 800aa10:	4581      	cmp	r9, r0
 800aa12:	d142      	bne.n	800aa9a <_malloc_r+0xea>
 800aa14:	6821      	ldr	r1, [r4, #0]
 800aa16:	4630      	mov	r0, r6
 800aa18:	1a6d      	subs	r5, r5, r1
 800aa1a:	4629      	mov	r1, r5
 800aa1c:	f7ff ffa6 	bl	800a96c <sbrk_aligned>
 800aa20:	3001      	adds	r0, #1
 800aa22:	d03a      	beq.n	800aa9a <_malloc_r+0xea>
 800aa24:	6823      	ldr	r3, [r4, #0]
 800aa26:	442b      	add	r3, r5
 800aa28:	6023      	str	r3, [r4, #0]
 800aa2a:	f8d8 3000 	ldr.w	r3, [r8]
 800aa2e:	685a      	ldr	r2, [r3, #4]
 800aa30:	bb62      	cbnz	r2, 800aa8c <_malloc_r+0xdc>
 800aa32:	f8c8 7000 	str.w	r7, [r8]
 800aa36:	e00f      	b.n	800aa58 <_malloc_r+0xa8>
 800aa38:	6822      	ldr	r2, [r4, #0]
 800aa3a:	1b52      	subs	r2, r2, r5
 800aa3c:	d420      	bmi.n	800aa80 <_malloc_r+0xd0>
 800aa3e:	2a0b      	cmp	r2, #11
 800aa40:	d917      	bls.n	800aa72 <_malloc_r+0xc2>
 800aa42:	1961      	adds	r1, r4, r5
 800aa44:	42a3      	cmp	r3, r4
 800aa46:	6025      	str	r5, [r4, #0]
 800aa48:	bf18      	it	ne
 800aa4a:	6059      	strne	r1, [r3, #4]
 800aa4c:	6863      	ldr	r3, [r4, #4]
 800aa4e:	bf08      	it	eq
 800aa50:	f8c8 1000 	streq.w	r1, [r8]
 800aa54:	5162      	str	r2, [r4, r5]
 800aa56:	604b      	str	r3, [r1, #4]
 800aa58:	4630      	mov	r0, r6
 800aa5a:	f000 f82f 	bl	800aabc <__malloc_unlock>
 800aa5e:	f104 000b 	add.w	r0, r4, #11
 800aa62:	1d23      	adds	r3, r4, #4
 800aa64:	f020 0007 	bic.w	r0, r0, #7
 800aa68:	1ac2      	subs	r2, r0, r3
 800aa6a:	bf1c      	itt	ne
 800aa6c:	1a1b      	subne	r3, r3, r0
 800aa6e:	50a3      	strne	r3, [r4, r2]
 800aa70:	e7af      	b.n	800a9d2 <_malloc_r+0x22>
 800aa72:	6862      	ldr	r2, [r4, #4]
 800aa74:	42a3      	cmp	r3, r4
 800aa76:	bf0c      	ite	eq
 800aa78:	f8c8 2000 	streq.w	r2, [r8]
 800aa7c:	605a      	strne	r2, [r3, #4]
 800aa7e:	e7eb      	b.n	800aa58 <_malloc_r+0xa8>
 800aa80:	4623      	mov	r3, r4
 800aa82:	6864      	ldr	r4, [r4, #4]
 800aa84:	e7ae      	b.n	800a9e4 <_malloc_r+0x34>
 800aa86:	463c      	mov	r4, r7
 800aa88:	687f      	ldr	r7, [r7, #4]
 800aa8a:	e7b6      	b.n	800a9fa <_malloc_r+0x4a>
 800aa8c:	461a      	mov	r2, r3
 800aa8e:	685b      	ldr	r3, [r3, #4]
 800aa90:	42a3      	cmp	r3, r4
 800aa92:	d1fb      	bne.n	800aa8c <_malloc_r+0xdc>
 800aa94:	2300      	movs	r3, #0
 800aa96:	6053      	str	r3, [r2, #4]
 800aa98:	e7de      	b.n	800aa58 <_malloc_r+0xa8>
 800aa9a:	230c      	movs	r3, #12
 800aa9c:	4630      	mov	r0, r6
 800aa9e:	6033      	str	r3, [r6, #0]
 800aaa0:	f000 f80c 	bl	800aabc <__malloc_unlock>
 800aaa4:	e794      	b.n	800a9d0 <_malloc_r+0x20>
 800aaa6:	6005      	str	r5, [r0, #0]
 800aaa8:	e7d6      	b.n	800aa58 <_malloc_r+0xa8>
 800aaaa:	bf00      	nop
 800aaac:	20000718 	.word	0x20000718

0800aab0 <__malloc_lock>:
 800aab0:	4801      	ldr	r0, [pc, #4]	@ (800aab8 <__malloc_lock+0x8>)
 800aab2:	f7ff bf0e 	b.w	800a8d2 <__retarget_lock_acquire_recursive>
 800aab6:	bf00      	nop
 800aab8:	20000710 	.word	0x20000710

0800aabc <__malloc_unlock>:
 800aabc:	4801      	ldr	r0, [pc, #4]	@ (800aac4 <__malloc_unlock+0x8>)
 800aabe:	f7ff bf09 	b.w	800a8d4 <__retarget_lock_release_recursive>
 800aac2:	bf00      	nop
 800aac4:	20000710 	.word	0x20000710

0800aac8 <__ssputs_r>:
 800aac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aacc:	461f      	mov	r7, r3
 800aace:	688e      	ldr	r6, [r1, #8]
 800aad0:	4682      	mov	sl, r0
 800aad2:	460c      	mov	r4, r1
 800aad4:	42be      	cmp	r6, r7
 800aad6:	4690      	mov	r8, r2
 800aad8:	680b      	ldr	r3, [r1, #0]
 800aada:	d82d      	bhi.n	800ab38 <__ssputs_r+0x70>
 800aadc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aae0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800aae4:	d026      	beq.n	800ab34 <__ssputs_r+0x6c>
 800aae6:	6965      	ldr	r5, [r4, #20]
 800aae8:	6909      	ldr	r1, [r1, #16]
 800aaea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aaee:	eba3 0901 	sub.w	r9, r3, r1
 800aaf2:	1c7b      	adds	r3, r7, #1
 800aaf4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aaf8:	444b      	add	r3, r9
 800aafa:	106d      	asrs	r5, r5, #1
 800aafc:	429d      	cmp	r5, r3
 800aafe:	bf38      	it	cc
 800ab00:	461d      	movcc	r5, r3
 800ab02:	0553      	lsls	r3, r2, #21
 800ab04:	d527      	bpl.n	800ab56 <__ssputs_r+0x8e>
 800ab06:	4629      	mov	r1, r5
 800ab08:	f7ff ff52 	bl	800a9b0 <_malloc_r>
 800ab0c:	4606      	mov	r6, r0
 800ab0e:	b360      	cbz	r0, 800ab6a <__ssputs_r+0xa2>
 800ab10:	464a      	mov	r2, r9
 800ab12:	6921      	ldr	r1, [r4, #16]
 800ab14:	f000 fd6c 	bl	800b5f0 <memcpy>
 800ab18:	89a3      	ldrh	r3, [r4, #12]
 800ab1a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ab1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab22:	81a3      	strh	r3, [r4, #12]
 800ab24:	6126      	str	r6, [r4, #16]
 800ab26:	444e      	add	r6, r9
 800ab28:	6165      	str	r5, [r4, #20]
 800ab2a:	eba5 0509 	sub.w	r5, r5, r9
 800ab2e:	6026      	str	r6, [r4, #0]
 800ab30:	463e      	mov	r6, r7
 800ab32:	60a5      	str	r5, [r4, #8]
 800ab34:	42be      	cmp	r6, r7
 800ab36:	d900      	bls.n	800ab3a <__ssputs_r+0x72>
 800ab38:	463e      	mov	r6, r7
 800ab3a:	4632      	mov	r2, r6
 800ab3c:	4641      	mov	r1, r8
 800ab3e:	6820      	ldr	r0, [r4, #0]
 800ab40:	f000 fcfb 	bl	800b53a <memmove>
 800ab44:	68a3      	ldr	r3, [r4, #8]
 800ab46:	2000      	movs	r0, #0
 800ab48:	1b9b      	subs	r3, r3, r6
 800ab4a:	60a3      	str	r3, [r4, #8]
 800ab4c:	6823      	ldr	r3, [r4, #0]
 800ab4e:	4433      	add	r3, r6
 800ab50:	6023      	str	r3, [r4, #0]
 800ab52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab56:	462a      	mov	r2, r5
 800ab58:	f000 fd57 	bl	800b60a <_realloc_r>
 800ab5c:	4606      	mov	r6, r0
 800ab5e:	2800      	cmp	r0, #0
 800ab60:	d1e0      	bne.n	800ab24 <__ssputs_r+0x5c>
 800ab62:	6921      	ldr	r1, [r4, #16]
 800ab64:	4650      	mov	r0, sl
 800ab66:	f7ff feb7 	bl	800a8d8 <_free_r>
 800ab6a:	230c      	movs	r3, #12
 800ab6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ab70:	f8ca 3000 	str.w	r3, [sl]
 800ab74:	89a3      	ldrh	r3, [r4, #12]
 800ab76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab7a:	81a3      	strh	r3, [r4, #12]
 800ab7c:	e7e9      	b.n	800ab52 <__ssputs_r+0x8a>
	...

0800ab80 <_svfiprintf_r>:
 800ab80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab84:	4698      	mov	r8, r3
 800ab86:	898b      	ldrh	r3, [r1, #12]
 800ab88:	b09d      	sub	sp, #116	@ 0x74
 800ab8a:	4607      	mov	r7, r0
 800ab8c:	061b      	lsls	r3, r3, #24
 800ab8e:	460d      	mov	r5, r1
 800ab90:	4614      	mov	r4, r2
 800ab92:	d510      	bpl.n	800abb6 <_svfiprintf_r+0x36>
 800ab94:	690b      	ldr	r3, [r1, #16]
 800ab96:	b973      	cbnz	r3, 800abb6 <_svfiprintf_r+0x36>
 800ab98:	2140      	movs	r1, #64	@ 0x40
 800ab9a:	f7ff ff09 	bl	800a9b0 <_malloc_r>
 800ab9e:	6028      	str	r0, [r5, #0]
 800aba0:	6128      	str	r0, [r5, #16]
 800aba2:	b930      	cbnz	r0, 800abb2 <_svfiprintf_r+0x32>
 800aba4:	230c      	movs	r3, #12
 800aba6:	603b      	str	r3, [r7, #0]
 800aba8:	f04f 30ff 	mov.w	r0, #4294967295
 800abac:	b01d      	add	sp, #116	@ 0x74
 800abae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abb2:	2340      	movs	r3, #64	@ 0x40
 800abb4:	616b      	str	r3, [r5, #20]
 800abb6:	2300      	movs	r3, #0
 800abb8:	f8cd 800c 	str.w	r8, [sp, #12]
 800abbc:	f04f 0901 	mov.w	r9, #1
 800abc0:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800ad64 <_svfiprintf_r+0x1e4>
 800abc4:	9309      	str	r3, [sp, #36]	@ 0x24
 800abc6:	2320      	movs	r3, #32
 800abc8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800abcc:	2330      	movs	r3, #48	@ 0x30
 800abce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800abd2:	4623      	mov	r3, r4
 800abd4:	469a      	mov	sl, r3
 800abd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800abda:	b10a      	cbz	r2, 800abe0 <_svfiprintf_r+0x60>
 800abdc:	2a25      	cmp	r2, #37	@ 0x25
 800abde:	d1f9      	bne.n	800abd4 <_svfiprintf_r+0x54>
 800abe0:	ebba 0b04 	subs.w	fp, sl, r4
 800abe4:	d00b      	beq.n	800abfe <_svfiprintf_r+0x7e>
 800abe6:	465b      	mov	r3, fp
 800abe8:	4622      	mov	r2, r4
 800abea:	4629      	mov	r1, r5
 800abec:	4638      	mov	r0, r7
 800abee:	f7ff ff6b 	bl	800aac8 <__ssputs_r>
 800abf2:	3001      	adds	r0, #1
 800abf4:	f000 80a7 	beq.w	800ad46 <_svfiprintf_r+0x1c6>
 800abf8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800abfa:	445a      	add	r2, fp
 800abfc:	9209      	str	r2, [sp, #36]	@ 0x24
 800abfe:	f89a 3000 	ldrb.w	r3, [sl]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	f000 809f 	beq.w	800ad46 <_svfiprintf_r+0x1c6>
 800ac08:	2300      	movs	r3, #0
 800ac0a:	f04f 32ff 	mov.w	r2, #4294967295
 800ac0e:	f10a 0a01 	add.w	sl, sl, #1
 800ac12:	9304      	str	r3, [sp, #16]
 800ac14:	9307      	str	r3, [sp, #28]
 800ac16:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ac1a:	931a      	str	r3, [sp, #104]	@ 0x68
 800ac1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac20:	4654      	mov	r4, sl
 800ac22:	2205      	movs	r2, #5
 800ac24:	484f      	ldr	r0, [pc, #316]	@ (800ad64 <_svfiprintf_r+0x1e4>)
 800ac26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac2a:	f000 fcd3 	bl	800b5d4 <memchr>
 800ac2e:	9a04      	ldr	r2, [sp, #16]
 800ac30:	b9d8      	cbnz	r0, 800ac6a <_svfiprintf_r+0xea>
 800ac32:	06d0      	lsls	r0, r2, #27
 800ac34:	bf44      	itt	mi
 800ac36:	2320      	movmi	r3, #32
 800ac38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac3c:	0711      	lsls	r1, r2, #28
 800ac3e:	bf44      	itt	mi
 800ac40:	232b      	movmi	r3, #43	@ 0x2b
 800ac42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac46:	f89a 3000 	ldrb.w	r3, [sl]
 800ac4a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac4c:	d015      	beq.n	800ac7a <_svfiprintf_r+0xfa>
 800ac4e:	9a07      	ldr	r2, [sp, #28]
 800ac50:	4654      	mov	r4, sl
 800ac52:	2000      	movs	r0, #0
 800ac54:	f04f 0c0a 	mov.w	ip, #10
 800ac58:	4621      	mov	r1, r4
 800ac5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac5e:	3b30      	subs	r3, #48	@ 0x30
 800ac60:	2b09      	cmp	r3, #9
 800ac62:	d94b      	bls.n	800acfc <_svfiprintf_r+0x17c>
 800ac64:	b1b0      	cbz	r0, 800ac94 <_svfiprintf_r+0x114>
 800ac66:	9207      	str	r2, [sp, #28]
 800ac68:	e014      	b.n	800ac94 <_svfiprintf_r+0x114>
 800ac6a:	eba0 0308 	sub.w	r3, r0, r8
 800ac6e:	46a2      	mov	sl, r4
 800ac70:	fa09 f303 	lsl.w	r3, r9, r3
 800ac74:	4313      	orrs	r3, r2
 800ac76:	9304      	str	r3, [sp, #16]
 800ac78:	e7d2      	b.n	800ac20 <_svfiprintf_r+0xa0>
 800ac7a:	9b03      	ldr	r3, [sp, #12]
 800ac7c:	1d19      	adds	r1, r3, #4
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	9103      	str	r1, [sp, #12]
 800ac84:	bfbb      	ittet	lt
 800ac86:	425b      	neglt	r3, r3
 800ac88:	f042 0202 	orrlt.w	r2, r2, #2
 800ac8c:	9307      	strge	r3, [sp, #28]
 800ac8e:	9307      	strlt	r3, [sp, #28]
 800ac90:	bfb8      	it	lt
 800ac92:	9204      	strlt	r2, [sp, #16]
 800ac94:	7823      	ldrb	r3, [r4, #0]
 800ac96:	2b2e      	cmp	r3, #46	@ 0x2e
 800ac98:	d10a      	bne.n	800acb0 <_svfiprintf_r+0x130>
 800ac9a:	7863      	ldrb	r3, [r4, #1]
 800ac9c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac9e:	d132      	bne.n	800ad06 <_svfiprintf_r+0x186>
 800aca0:	9b03      	ldr	r3, [sp, #12]
 800aca2:	3402      	adds	r4, #2
 800aca4:	1d1a      	adds	r2, r3, #4
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800acac:	9203      	str	r2, [sp, #12]
 800acae:	9305      	str	r3, [sp, #20]
 800acb0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ad74 <_svfiprintf_r+0x1f4>
 800acb4:	2203      	movs	r2, #3
 800acb6:	7821      	ldrb	r1, [r4, #0]
 800acb8:	4650      	mov	r0, sl
 800acba:	f000 fc8b 	bl	800b5d4 <memchr>
 800acbe:	b138      	cbz	r0, 800acd0 <_svfiprintf_r+0x150>
 800acc0:	eba0 000a 	sub.w	r0, r0, sl
 800acc4:	2240      	movs	r2, #64	@ 0x40
 800acc6:	9b04      	ldr	r3, [sp, #16]
 800acc8:	3401      	adds	r4, #1
 800acca:	4082      	lsls	r2, r0
 800accc:	4313      	orrs	r3, r2
 800acce:	9304      	str	r3, [sp, #16]
 800acd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acd4:	2206      	movs	r2, #6
 800acd6:	4824      	ldr	r0, [pc, #144]	@ (800ad68 <_svfiprintf_r+0x1e8>)
 800acd8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800acdc:	f000 fc7a 	bl	800b5d4 <memchr>
 800ace0:	2800      	cmp	r0, #0
 800ace2:	d036      	beq.n	800ad52 <_svfiprintf_r+0x1d2>
 800ace4:	4b21      	ldr	r3, [pc, #132]	@ (800ad6c <_svfiprintf_r+0x1ec>)
 800ace6:	bb1b      	cbnz	r3, 800ad30 <_svfiprintf_r+0x1b0>
 800ace8:	9b03      	ldr	r3, [sp, #12]
 800acea:	3307      	adds	r3, #7
 800acec:	f023 0307 	bic.w	r3, r3, #7
 800acf0:	3308      	adds	r3, #8
 800acf2:	9303      	str	r3, [sp, #12]
 800acf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acf6:	4433      	add	r3, r6
 800acf8:	9309      	str	r3, [sp, #36]	@ 0x24
 800acfa:	e76a      	b.n	800abd2 <_svfiprintf_r+0x52>
 800acfc:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad00:	460c      	mov	r4, r1
 800ad02:	2001      	movs	r0, #1
 800ad04:	e7a8      	b.n	800ac58 <_svfiprintf_r+0xd8>
 800ad06:	2300      	movs	r3, #0
 800ad08:	3401      	adds	r4, #1
 800ad0a:	f04f 0c0a 	mov.w	ip, #10
 800ad0e:	4619      	mov	r1, r3
 800ad10:	9305      	str	r3, [sp, #20]
 800ad12:	4620      	mov	r0, r4
 800ad14:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad18:	3a30      	subs	r2, #48	@ 0x30
 800ad1a:	2a09      	cmp	r2, #9
 800ad1c:	d903      	bls.n	800ad26 <_svfiprintf_r+0x1a6>
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d0c6      	beq.n	800acb0 <_svfiprintf_r+0x130>
 800ad22:	9105      	str	r1, [sp, #20]
 800ad24:	e7c4      	b.n	800acb0 <_svfiprintf_r+0x130>
 800ad26:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad2a:	4604      	mov	r4, r0
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	e7f0      	b.n	800ad12 <_svfiprintf_r+0x192>
 800ad30:	ab03      	add	r3, sp, #12
 800ad32:	462a      	mov	r2, r5
 800ad34:	a904      	add	r1, sp, #16
 800ad36:	4638      	mov	r0, r7
 800ad38:	9300      	str	r3, [sp, #0]
 800ad3a:	4b0d      	ldr	r3, [pc, #52]	@ (800ad70 <_svfiprintf_r+0x1f0>)
 800ad3c:	f3af 8000 	nop.w
 800ad40:	1c42      	adds	r2, r0, #1
 800ad42:	4606      	mov	r6, r0
 800ad44:	d1d6      	bne.n	800acf4 <_svfiprintf_r+0x174>
 800ad46:	89ab      	ldrh	r3, [r5, #12]
 800ad48:	065b      	lsls	r3, r3, #25
 800ad4a:	f53f af2d 	bmi.w	800aba8 <_svfiprintf_r+0x28>
 800ad4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ad50:	e72c      	b.n	800abac <_svfiprintf_r+0x2c>
 800ad52:	ab03      	add	r3, sp, #12
 800ad54:	462a      	mov	r2, r5
 800ad56:	a904      	add	r1, sp, #16
 800ad58:	4638      	mov	r0, r7
 800ad5a:	9300      	str	r3, [sp, #0]
 800ad5c:	4b04      	ldr	r3, [pc, #16]	@ (800ad70 <_svfiprintf_r+0x1f0>)
 800ad5e:	f000 f9bf 	bl	800b0e0 <_printf_i>
 800ad62:	e7ed      	b.n	800ad40 <_svfiprintf_r+0x1c0>
 800ad64:	0800bc9d 	.word	0x0800bc9d
 800ad68:	0800bca7 	.word	0x0800bca7
 800ad6c:	00000000 	.word	0x00000000
 800ad70:	0800aac9 	.word	0x0800aac9
 800ad74:	0800bca3 	.word	0x0800bca3

0800ad78 <__sfputc_r>:
 800ad78:	6893      	ldr	r3, [r2, #8]
 800ad7a:	3b01      	subs	r3, #1
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	6093      	str	r3, [r2, #8]
 800ad80:	b410      	push	{r4}
 800ad82:	da08      	bge.n	800ad96 <__sfputc_r+0x1e>
 800ad84:	6994      	ldr	r4, [r2, #24]
 800ad86:	42a3      	cmp	r3, r4
 800ad88:	db01      	blt.n	800ad8e <__sfputc_r+0x16>
 800ad8a:	290a      	cmp	r1, #10
 800ad8c:	d103      	bne.n	800ad96 <__sfputc_r+0x1e>
 800ad8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad92:	f7ff bc90 	b.w	800a6b6 <__swbuf_r>
 800ad96:	6813      	ldr	r3, [r2, #0]
 800ad98:	1c58      	adds	r0, r3, #1
 800ad9a:	6010      	str	r0, [r2, #0]
 800ad9c:	4608      	mov	r0, r1
 800ad9e:	7019      	strb	r1, [r3, #0]
 800ada0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ada4:	4770      	bx	lr

0800ada6 <__sfputs_r>:
 800ada6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ada8:	4606      	mov	r6, r0
 800adaa:	460f      	mov	r7, r1
 800adac:	4614      	mov	r4, r2
 800adae:	18d5      	adds	r5, r2, r3
 800adb0:	42ac      	cmp	r4, r5
 800adb2:	d101      	bne.n	800adb8 <__sfputs_r+0x12>
 800adb4:	2000      	movs	r0, #0
 800adb6:	e007      	b.n	800adc8 <__sfputs_r+0x22>
 800adb8:	463a      	mov	r2, r7
 800adba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adbe:	4630      	mov	r0, r6
 800adc0:	f7ff ffda 	bl	800ad78 <__sfputc_r>
 800adc4:	1c43      	adds	r3, r0, #1
 800adc6:	d1f3      	bne.n	800adb0 <__sfputs_r+0xa>
 800adc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800adcc <_vfiprintf_r>:
 800adcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800add0:	460d      	mov	r5, r1
 800add2:	b09d      	sub	sp, #116	@ 0x74
 800add4:	4614      	mov	r4, r2
 800add6:	4698      	mov	r8, r3
 800add8:	4606      	mov	r6, r0
 800adda:	b118      	cbz	r0, 800ade4 <_vfiprintf_r+0x18>
 800addc:	6a03      	ldr	r3, [r0, #32]
 800adde:	b90b      	cbnz	r3, 800ade4 <_vfiprintf_r+0x18>
 800ade0:	f7ff fb4c 	bl	800a47c <__sinit>
 800ade4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ade6:	07d9      	lsls	r1, r3, #31
 800ade8:	d405      	bmi.n	800adf6 <_vfiprintf_r+0x2a>
 800adea:	89ab      	ldrh	r3, [r5, #12]
 800adec:	059a      	lsls	r2, r3, #22
 800adee:	d402      	bmi.n	800adf6 <_vfiprintf_r+0x2a>
 800adf0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800adf2:	f7ff fd6e 	bl	800a8d2 <__retarget_lock_acquire_recursive>
 800adf6:	89ab      	ldrh	r3, [r5, #12]
 800adf8:	071b      	lsls	r3, r3, #28
 800adfa:	d501      	bpl.n	800ae00 <_vfiprintf_r+0x34>
 800adfc:	692b      	ldr	r3, [r5, #16]
 800adfe:	b99b      	cbnz	r3, 800ae28 <_vfiprintf_r+0x5c>
 800ae00:	4629      	mov	r1, r5
 800ae02:	4630      	mov	r0, r6
 800ae04:	f7ff fc96 	bl	800a734 <__swsetup_r>
 800ae08:	b170      	cbz	r0, 800ae28 <_vfiprintf_r+0x5c>
 800ae0a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ae0c:	07dc      	lsls	r4, r3, #31
 800ae0e:	d504      	bpl.n	800ae1a <_vfiprintf_r+0x4e>
 800ae10:	f04f 30ff 	mov.w	r0, #4294967295
 800ae14:	b01d      	add	sp, #116	@ 0x74
 800ae16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae1a:	89ab      	ldrh	r3, [r5, #12]
 800ae1c:	0598      	lsls	r0, r3, #22
 800ae1e:	d4f7      	bmi.n	800ae10 <_vfiprintf_r+0x44>
 800ae20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ae22:	f7ff fd57 	bl	800a8d4 <__retarget_lock_release_recursive>
 800ae26:	e7f3      	b.n	800ae10 <_vfiprintf_r+0x44>
 800ae28:	2300      	movs	r3, #0
 800ae2a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae2e:	f04f 0901 	mov.w	r9, #1
 800ae32:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800afe8 <_vfiprintf_r+0x21c>
 800ae36:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae38:	2320      	movs	r3, #32
 800ae3a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ae3e:	2330      	movs	r3, #48	@ 0x30
 800ae40:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ae44:	4623      	mov	r3, r4
 800ae46:	469a      	mov	sl, r3
 800ae48:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae4c:	b10a      	cbz	r2, 800ae52 <_vfiprintf_r+0x86>
 800ae4e:	2a25      	cmp	r2, #37	@ 0x25
 800ae50:	d1f9      	bne.n	800ae46 <_vfiprintf_r+0x7a>
 800ae52:	ebba 0b04 	subs.w	fp, sl, r4
 800ae56:	d00b      	beq.n	800ae70 <_vfiprintf_r+0xa4>
 800ae58:	465b      	mov	r3, fp
 800ae5a:	4622      	mov	r2, r4
 800ae5c:	4629      	mov	r1, r5
 800ae5e:	4630      	mov	r0, r6
 800ae60:	f7ff ffa1 	bl	800ada6 <__sfputs_r>
 800ae64:	3001      	adds	r0, #1
 800ae66:	f000 80a7 	beq.w	800afb8 <_vfiprintf_r+0x1ec>
 800ae6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae6c:	445a      	add	r2, fp
 800ae6e:	9209      	str	r2, [sp, #36]	@ 0x24
 800ae70:	f89a 3000 	ldrb.w	r3, [sl]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	f000 809f 	beq.w	800afb8 <_vfiprintf_r+0x1ec>
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	f04f 32ff 	mov.w	r2, #4294967295
 800ae80:	f10a 0a01 	add.w	sl, sl, #1
 800ae84:	9304      	str	r3, [sp, #16]
 800ae86:	9307      	str	r3, [sp, #28]
 800ae88:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ae8c:	931a      	str	r3, [sp, #104]	@ 0x68
 800ae8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae92:	4654      	mov	r4, sl
 800ae94:	2205      	movs	r2, #5
 800ae96:	4854      	ldr	r0, [pc, #336]	@ (800afe8 <_vfiprintf_r+0x21c>)
 800ae98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae9c:	f000 fb9a 	bl	800b5d4 <memchr>
 800aea0:	9a04      	ldr	r2, [sp, #16]
 800aea2:	b9d8      	cbnz	r0, 800aedc <_vfiprintf_r+0x110>
 800aea4:	06d1      	lsls	r1, r2, #27
 800aea6:	bf44      	itt	mi
 800aea8:	2320      	movmi	r3, #32
 800aeaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aeae:	0713      	lsls	r3, r2, #28
 800aeb0:	bf44      	itt	mi
 800aeb2:	232b      	movmi	r3, #43	@ 0x2b
 800aeb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aeb8:	f89a 3000 	ldrb.w	r3, [sl]
 800aebc:	2b2a      	cmp	r3, #42	@ 0x2a
 800aebe:	d015      	beq.n	800aeec <_vfiprintf_r+0x120>
 800aec0:	9a07      	ldr	r2, [sp, #28]
 800aec2:	4654      	mov	r4, sl
 800aec4:	2000      	movs	r0, #0
 800aec6:	f04f 0c0a 	mov.w	ip, #10
 800aeca:	4621      	mov	r1, r4
 800aecc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aed0:	3b30      	subs	r3, #48	@ 0x30
 800aed2:	2b09      	cmp	r3, #9
 800aed4:	d94b      	bls.n	800af6e <_vfiprintf_r+0x1a2>
 800aed6:	b1b0      	cbz	r0, 800af06 <_vfiprintf_r+0x13a>
 800aed8:	9207      	str	r2, [sp, #28]
 800aeda:	e014      	b.n	800af06 <_vfiprintf_r+0x13a>
 800aedc:	eba0 0308 	sub.w	r3, r0, r8
 800aee0:	46a2      	mov	sl, r4
 800aee2:	fa09 f303 	lsl.w	r3, r9, r3
 800aee6:	4313      	orrs	r3, r2
 800aee8:	9304      	str	r3, [sp, #16]
 800aeea:	e7d2      	b.n	800ae92 <_vfiprintf_r+0xc6>
 800aeec:	9b03      	ldr	r3, [sp, #12]
 800aeee:	1d19      	adds	r1, r3, #4
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	9103      	str	r1, [sp, #12]
 800aef6:	bfbb      	ittet	lt
 800aef8:	425b      	neglt	r3, r3
 800aefa:	f042 0202 	orrlt.w	r2, r2, #2
 800aefe:	9307      	strge	r3, [sp, #28]
 800af00:	9307      	strlt	r3, [sp, #28]
 800af02:	bfb8      	it	lt
 800af04:	9204      	strlt	r2, [sp, #16]
 800af06:	7823      	ldrb	r3, [r4, #0]
 800af08:	2b2e      	cmp	r3, #46	@ 0x2e
 800af0a:	d10a      	bne.n	800af22 <_vfiprintf_r+0x156>
 800af0c:	7863      	ldrb	r3, [r4, #1]
 800af0e:	2b2a      	cmp	r3, #42	@ 0x2a
 800af10:	d132      	bne.n	800af78 <_vfiprintf_r+0x1ac>
 800af12:	9b03      	ldr	r3, [sp, #12]
 800af14:	3402      	adds	r4, #2
 800af16:	1d1a      	adds	r2, r3, #4
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800af1e:	9203      	str	r2, [sp, #12]
 800af20:	9305      	str	r3, [sp, #20]
 800af22:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800aff8 <_vfiprintf_r+0x22c>
 800af26:	2203      	movs	r2, #3
 800af28:	7821      	ldrb	r1, [r4, #0]
 800af2a:	4650      	mov	r0, sl
 800af2c:	f000 fb52 	bl	800b5d4 <memchr>
 800af30:	b138      	cbz	r0, 800af42 <_vfiprintf_r+0x176>
 800af32:	eba0 000a 	sub.w	r0, r0, sl
 800af36:	2240      	movs	r2, #64	@ 0x40
 800af38:	9b04      	ldr	r3, [sp, #16]
 800af3a:	3401      	adds	r4, #1
 800af3c:	4082      	lsls	r2, r0
 800af3e:	4313      	orrs	r3, r2
 800af40:	9304      	str	r3, [sp, #16]
 800af42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af46:	2206      	movs	r2, #6
 800af48:	4828      	ldr	r0, [pc, #160]	@ (800afec <_vfiprintf_r+0x220>)
 800af4a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800af4e:	f000 fb41 	bl	800b5d4 <memchr>
 800af52:	2800      	cmp	r0, #0
 800af54:	d03f      	beq.n	800afd6 <_vfiprintf_r+0x20a>
 800af56:	4b26      	ldr	r3, [pc, #152]	@ (800aff0 <_vfiprintf_r+0x224>)
 800af58:	bb1b      	cbnz	r3, 800afa2 <_vfiprintf_r+0x1d6>
 800af5a:	9b03      	ldr	r3, [sp, #12]
 800af5c:	3307      	adds	r3, #7
 800af5e:	f023 0307 	bic.w	r3, r3, #7
 800af62:	3308      	adds	r3, #8
 800af64:	9303      	str	r3, [sp, #12]
 800af66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af68:	443b      	add	r3, r7
 800af6a:	9309      	str	r3, [sp, #36]	@ 0x24
 800af6c:	e76a      	b.n	800ae44 <_vfiprintf_r+0x78>
 800af6e:	fb0c 3202 	mla	r2, ip, r2, r3
 800af72:	460c      	mov	r4, r1
 800af74:	2001      	movs	r0, #1
 800af76:	e7a8      	b.n	800aeca <_vfiprintf_r+0xfe>
 800af78:	2300      	movs	r3, #0
 800af7a:	3401      	adds	r4, #1
 800af7c:	f04f 0c0a 	mov.w	ip, #10
 800af80:	4619      	mov	r1, r3
 800af82:	9305      	str	r3, [sp, #20]
 800af84:	4620      	mov	r0, r4
 800af86:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af8a:	3a30      	subs	r2, #48	@ 0x30
 800af8c:	2a09      	cmp	r2, #9
 800af8e:	d903      	bls.n	800af98 <_vfiprintf_r+0x1cc>
 800af90:	2b00      	cmp	r3, #0
 800af92:	d0c6      	beq.n	800af22 <_vfiprintf_r+0x156>
 800af94:	9105      	str	r1, [sp, #20]
 800af96:	e7c4      	b.n	800af22 <_vfiprintf_r+0x156>
 800af98:	fb0c 2101 	mla	r1, ip, r1, r2
 800af9c:	4604      	mov	r4, r0
 800af9e:	2301      	movs	r3, #1
 800afa0:	e7f0      	b.n	800af84 <_vfiprintf_r+0x1b8>
 800afa2:	ab03      	add	r3, sp, #12
 800afa4:	462a      	mov	r2, r5
 800afa6:	a904      	add	r1, sp, #16
 800afa8:	4630      	mov	r0, r6
 800afaa:	9300      	str	r3, [sp, #0]
 800afac:	4b11      	ldr	r3, [pc, #68]	@ (800aff4 <_vfiprintf_r+0x228>)
 800afae:	f3af 8000 	nop.w
 800afb2:	4607      	mov	r7, r0
 800afb4:	1c78      	adds	r0, r7, #1
 800afb6:	d1d6      	bne.n	800af66 <_vfiprintf_r+0x19a>
 800afb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800afba:	07d9      	lsls	r1, r3, #31
 800afbc:	d405      	bmi.n	800afca <_vfiprintf_r+0x1fe>
 800afbe:	89ab      	ldrh	r3, [r5, #12]
 800afc0:	059a      	lsls	r2, r3, #22
 800afc2:	d402      	bmi.n	800afca <_vfiprintf_r+0x1fe>
 800afc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800afc6:	f7ff fc85 	bl	800a8d4 <__retarget_lock_release_recursive>
 800afca:	89ab      	ldrh	r3, [r5, #12]
 800afcc:	065b      	lsls	r3, r3, #25
 800afce:	f53f af1f 	bmi.w	800ae10 <_vfiprintf_r+0x44>
 800afd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800afd4:	e71e      	b.n	800ae14 <_vfiprintf_r+0x48>
 800afd6:	ab03      	add	r3, sp, #12
 800afd8:	462a      	mov	r2, r5
 800afda:	a904      	add	r1, sp, #16
 800afdc:	4630      	mov	r0, r6
 800afde:	9300      	str	r3, [sp, #0]
 800afe0:	4b04      	ldr	r3, [pc, #16]	@ (800aff4 <_vfiprintf_r+0x228>)
 800afe2:	f000 f87d 	bl	800b0e0 <_printf_i>
 800afe6:	e7e4      	b.n	800afb2 <_vfiprintf_r+0x1e6>
 800afe8:	0800bc9d 	.word	0x0800bc9d
 800afec:	0800bca7 	.word	0x0800bca7
 800aff0:	00000000 	.word	0x00000000
 800aff4:	0800ada7 	.word	0x0800ada7
 800aff8:	0800bca3 	.word	0x0800bca3

0800affc <_printf_common>:
 800affc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b000:	4616      	mov	r6, r2
 800b002:	4698      	mov	r8, r3
 800b004:	688a      	ldr	r2, [r1, #8]
 800b006:	4607      	mov	r7, r0
 800b008:	690b      	ldr	r3, [r1, #16]
 800b00a:	460c      	mov	r4, r1
 800b00c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b010:	4293      	cmp	r3, r2
 800b012:	bfb8      	it	lt
 800b014:	4613      	movlt	r3, r2
 800b016:	6033      	str	r3, [r6, #0]
 800b018:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b01c:	b10a      	cbz	r2, 800b022 <_printf_common+0x26>
 800b01e:	3301      	adds	r3, #1
 800b020:	6033      	str	r3, [r6, #0]
 800b022:	6823      	ldr	r3, [r4, #0]
 800b024:	0699      	lsls	r1, r3, #26
 800b026:	bf42      	ittt	mi
 800b028:	6833      	ldrmi	r3, [r6, #0]
 800b02a:	3302      	addmi	r3, #2
 800b02c:	6033      	strmi	r3, [r6, #0]
 800b02e:	6825      	ldr	r5, [r4, #0]
 800b030:	f015 0506 	ands.w	r5, r5, #6
 800b034:	d106      	bne.n	800b044 <_printf_common+0x48>
 800b036:	f104 0a19 	add.w	sl, r4, #25
 800b03a:	68e3      	ldr	r3, [r4, #12]
 800b03c:	6832      	ldr	r2, [r6, #0]
 800b03e:	1a9b      	subs	r3, r3, r2
 800b040:	42ab      	cmp	r3, r5
 800b042:	dc2b      	bgt.n	800b09c <_printf_common+0xa0>
 800b044:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b048:	6822      	ldr	r2, [r4, #0]
 800b04a:	3b00      	subs	r3, #0
 800b04c:	bf18      	it	ne
 800b04e:	2301      	movne	r3, #1
 800b050:	0692      	lsls	r2, r2, #26
 800b052:	d430      	bmi.n	800b0b6 <_printf_common+0xba>
 800b054:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b058:	4641      	mov	r1, r8
 800b05a:	4638      	mov	r0, r7
 800b05c:	47c8      	blx	r9
 800b05e:	3001      	adds	r0, #1
 800b060:	d023      	beq.n	800b0aa <_printf_common+0xae>
 800b062:	6823      	ldr	r3, [r4, #0]
 800b064:	341a      	adds	r4, #26
 800b066:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800b06a:	f003 0306 	and.w	r3, r3, #6
 800b06e:	2b04      	cmp	r3, #4
 800b070:	bf0a      	itet	eq
 800b072:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800b076:	2500      	movne	r5, #0
 800b078:	6833      	ldreq	r3, [r6, #0]
 800b07a:	f04f 0600 	mov.w	r6, #0
 800b07e:	bf08      	it	eq
 800b080:	1aed      	subeq	r5, r5, r3
 800b082:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b086:	bf08      	it	eq
 800b088:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b08c:	4293      	cmp	r3, r2
 800b08e:	bfc4      	itt	gt
 800b090:	1a9b      	subgt	r3, r3, r2
 800b092:	18ed      	addgt	r5, r5, r3
 800b094:	42b5      	cmp	r5, r6
 800b096:	d11a      	bne.n	800b0ce <_printf_common+0xd2>
 800b098:	2000      	movs	r0, #0
 800b09a:	e008      	b.n	800b0ae <_printf_common+0xb2>
 800b09c:	2301      	movs	r3, #1
 800b09e:	4652      	mov	r2, sl
 800b0a0:	4641      	mov	r1, r8
 800b0a2:	4638      	mov	r0, r7
 800b0a4:	47c8      	blx	r9
 800b0a6:	3001      	adds	r0, #1
 800b0a8:	d103      	bne.n	800b0b2 <_printf_common+0xb6>
 800b0aa:	f04f 30ff 	mov.w	r0, #4294967295
 800b0ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0b2:	3501      	adds	r5, #1
 800b0b4:	e7c1      	b.n	800b03a <_printf_common+0x3e>
 800b0b6:	18e1      	adds	r1, r4, r3
 800b0b8:	1c5a      	adds	r2, r3, #1
 800b0ba:	2030      	movs	r0, #48	@ 0x30
 800b0bc:	3302      	adds	r3, #2
 800b0be:	4422      	add	r2, r4
 800b0c0:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b0c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b0c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b0cc:	e7c2      	b.n	800b054 <_printf_common+0x58>
 800b0ce:	2301      	movs	r3, #1
 800b0d0:	4622      	mov	r2, r4
 800b0d2:	4641      	mov	r1, r8
 800b0d4:	4638      	mov	r0, r7
 800b0d6:	47c8      	blx	r9
 800b0d8:	3001      	adds	r0, #1
 800b0da:	d0e6      	beq.n	800b0aa <_printf_common+0xae>
 800b0dc:	3601      	adds	r6, #1
 800b0de:	e7d9      	b.n	800b094 <_printf_common+0x98>

0800b0e0 <_printf_i>:
 800b0e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b0e4:	7e0f      	ldrb	r7, [r1, #24]
 800b0e6:	4691      	mov	r9, r2
 800b0e8:	4680      	mov	r8, r0
 800b0ea:	460c      	mov	r4, r1
 800b0ec:	2f78      	cmp	r7, #120	@ 0x78
 800b0ee:	469a      	mov	sl, r3
 800b0f0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b0f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b0f6:	d807      	bhi.n	800b108 <_printf_i+0x28>
 800b0f8:	2f62      	cmp	r7, #98	@ 0x62
 800b0fa:	d80a      	bhi.n	800b112 <_printf_i+0x32>
 800b0fc:	2f00      	cmp	r7, #0
 800b0fe:	f000 80d2 	beq.w	800b2a6 <_printf_i+0x1c6>
 800b102:	2f58      	cmp	r7, #88	@ 0x58
 800b104:	f000 80b9 	beq.w	800b27a <_printf_i+0x19a>
 800b108:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b10c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b110:	e03a      	b.n	800b188 <_printf_i+0xa8>
 800b112:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b116:	2b15      	cmp	r3, #21
 800b118:	d8f6      	bhi.n	800b108 <_printf_i+0x28>
 800b11a:	a101      	add	r1, pc, #4	@ (adr r1, 800b120 <_printf_i+0x40>)
 800b11c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b120:	0800b179 	.word	0x0800b179
 800b124:	0800b18d 	.word	0x0800b18d
 800b128:	0800b109 	.word	0x0800b109
 800b12c:	0800b109 	.word	0x0800b109
 800b130:	0800b109 	.word	0x0800b109
 800b134:	0800b109 	.word	0x0800b109
 800b138:	0800b18d 	.word	0x0800b18d
 800b13c:	0800b109 	.word	0x0800b109
 800b140:	0800b109 	.word	0x0800b109
 800b144:	0800b109 	.word	0x0800b109
 800b148:	0800b109 	.word	0x0800b109
 800b14c:	0800b28d 	.word	0x0800b28d
 800b150:	0800b1b7 	.word	0x0800b1b7
 800b154:	0800b247 	.word	0x0800b247
 800b158:	0800b109 	.word	0x0800b109
 800b15c:	0800b109 	.word	0x0800b109
 800b160:	0800b2af 	.word	0x0800b2af
 800b164:	0800b109 	.word	0x0800b109
 800b168:	0800b1b7 	.word	0x0800b1b7
 800b16c:	0800b109 	.word	0x0800b109
 800b170:	0800b109 	.word	0x0800b109
 800b174:	0800b24f 	.word	0x0800b24f
 800b178:	6833      	ldr	r3, [r6, #0]
 800b17a:	1d1a      	adds	r2, r3, #4
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	6032      	str	r2, [r6, #0]
 800b180:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b184:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b188:	2301      	movs	r3, #1
 800b18a:	e09d      	b.n	800b2c8 <_printf_i+0x1e8>
 800b18c:	6833      	ldr	r3, [r6, #0]
 800b18e:	6820      	ldr	r0, [r4, #0]
 800b190:	1d19      	adds	r1, r3, #4
 800b192:	6031      	str	r1, [r6, #0]
 800b194:	0606      	lsls	r6, r0, #24
 800b196:	d501      	bpl.n	800b19c <_printf_i+0xbc>
 800b198:	681d      	ldr	r5, [r3, #0]
 800b19a:	e003      	b.n	800b1a4 <_printf_i+0xc4>
 800b19c:	0645      	lsls	r5, r0, #25
 800b19e:	d5fb      	bpl.n	800b198 <_printf_i+0xb8>
 800b1a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b1a4:	2d00      	cmp	r5, #0
 800b1a6:	da03      	bge.n	800b1b0 <_printf_i+0xd0>
 800b1a8:	232d      	movs	r3, #45	@ 0x2d
 800b1aa:	426d      	negs	r5, r5
 800b1ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b1b0:	4859      	ldr	r0, [pc, #356]	@ (800b318 <_printf_i+0x238>)
 800b1b2:	230a      	movs	r3, #10
 800b1b4:	e011      	b.n	800b1da <_printf_i+0xfa>
 800b1b6:	6821      	ldr	r1, [r4, #0]
 800b1b8:	6833      	ldr	r3, [r6, #0]
 800b1ba:	0608      	lsls	r0, r1, #24
 800b1bc:	f853 5b04 	ldr.w	r5, [r3], #4
 800b1c0:	d402      	bmi.n	800b1c8 <_printf_i+0xe8>
 800b1c2:	0649      	lsls	r1, r1, #25
 800b1c4:	bf48      	it	mi
 800b1c6:	b2ad      	uxthmi	r5, r5
 800b1c8:	2f6f      	cmp	r7, #111	@ 0x6f
 800b1ca:	6033      	str	r3, [r6, #0]
 800b1cc:	4852      	ldr	r0, [pc, #328]	@ (800b318 <_printf_i+0x238>)
 800b1ce:	bf14      	ite	ne
 800b1d0:	230a      	movne	r3, #10
 800b1d2:	2308      	moveq	r3, #8
 800b1d4:	2100      	movs	r1, #0
 800b1d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b1da:	6866      	ldr	r6, [r4, #4]
 800b1dc:	2e00      	cmp	r6, #0
 800b1de:	60a6      	str	r6, [r4, #8]
 800b1e0:	bfa2      	ittt	ge
 800b1e2:	6821      	ldrge	r1, [r4, #0]
 800b1e4:	f021 0104 	bicge.w	r1, r1, #4
 800b1e8:	6021      	strge	r1, [r4, #0]
 800b1ea:	b90d      	cbnz	r5, 800b1f0 <_printf_i+0x110>
 800b1ec:	2e00      	cmp	r6, #0
 800b1ee:	d04b      	beq.n	800b288 <_printf_i+0x1a8>
 800b1f0:	4616      	mov	r6, r2
 800b1f2:	fbb5 f1f3 	udiv	r1, r5, r3
 800b1f6:	fb03 5711 	mls	r7, r3, r1, r5
 800b1fa:	5dc7      	ldrb	r7, [r0, r7]
 800b1fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b200:	462f      	mov	r7, r5
 800b202:	460d      	mov	r5, r1
 800b204:	42bb      	cmp	r3, r7
 800b206:	d9f4      	bls.n	800b1f2 <_printf_i+0x112>
 800b208:	2b08      	cmp	r3, #8
 800b20a:	d10b      	bne.n	800b224 <_printf_i+0x144>
 800b20c:	6823      	ldr	r3, [r4, #0]
 800b20e:	07df      	lsls	r7, r3, #31
 800b210:	d508      	bpl.n	800b224 <_printf_i+0x144>
 800b212:	6923      	ldr	r3, [r4, #16]
 800b214:	6861      	ldr	r1, [r4, #4]
 800b216:	4299      	cmp	r1, r3
 800b218:	bfde      	ittt	le
 800b21a:	2330      	movle	r3, #48	@ 0x30
 800b21c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b220:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b224:	1b92      	subs	r2, r2, r6
 800b226:	6122      	str	r2, [r4, #16]
 800b228:	464b      	mov	r3, r9
 800b22a:	aa03      	add	r2, sp, #12
 800b22c:	4621      	mov	r1, r4
 800b22e:	4640      	mov	r0, r8
 800b230:	f8cd a000 	str.w	sl, [sp]
 800b234:	f7ff fee2 	bl	800affc <_printf_common>
 800b238:	3001      	adds	r0, #1
 800b23a:	d14a      	bne.n	800b2d2 <_printf_i+0x1f2>
 800b23c:	f04f 30ff 	mov.w	r0, #4294967295
 800b240:	b004      	add	sp, #16
 800b242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b246:	6823      	ldr	r3, [r4, #0]
 800b248:	f043 0320 	orr.w	r3, r3, #32
 800b24c:	6023      	str	r3, [r4, #0]
 800b24e:	2778      	movs	r7, #120	@ 0x78
 800b250:	4832      	ldr	r0, [pc, #200]	@ (800b31c <_printf_i+0x23c>)
 800b252:	6823      	ldr	r3, [r4, #0]
 800b254:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b258:	061f      	lsls	r7, r3, #24
 800b25a:	6831      	ldr	r1, [r6, #0]
 800b25c:	f851 5b04 	ldr.w	r5, [r1], #4
 800b260:	d402      	bmi.n	800b268 <_printf_i+0x188>
 800b262:	065f      	lsls	r7, r3, #25
 800b264:	bf48      	it	mi
 800b266:	b2ad      	uxthmi	r5, r5
 800b268:	6031      	str	r1, [r6, #0]
 800b26a:	07d9      	lsls	r1, r3, #31
 800b26c:	bf44      	itt	mi
 800b26e:	f043 0320 	orrmi.w	r3, r3, #32
 800b272:	6023      	strmi	r3, [r4, #0]
 800b274:	b11d      	cbz	r5, 800b27e <_printf_i+0x19e>
 800b276:	2310      	movs	r3, #16
 800b278:	e7ac      	b.n	800b1d4 <_printf_i+0xf4>
 800b27a:	4827      	ldr	r0, [pc, #156]	@ (800b318 <_printf_i+0x238>)
 800b27c:	e7e9      	b.n	800b252 <_printf_i+0x172>
 800b27e:	6823      	ldr	r3, [r4, #0]
 800b280:	f023 0320 	bic.w	r3, r3, #32
 800b284:	6023      	str	r3, [r4, #0]
 800b286:	e7f6      	b.n	800b276 <_printf_i+0x196>
 800b288:	4616      	mov	r6, r2
 800b28a:	e7bd      	b.n	800b208 <_printf_i+0x128>
 800b28c:	6833      	ldr	r3, [r6, #0]
 800b28e:	6825      	ldr	r5, [r4, #0]
 800b290:	1d18      	adds	r0, r3, #4
 800b292:	6961      	ldr	r1, [r4, #20]
 800b294:	6030      	str	r0, [r6, #0]
 800b296:	062e      	lsls	r6, r5, #24
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	d501      	bpl.n	800b2a0 <_printf_i+0x1c0>
 800b29c:	6019      	str	r1, [r3, #0]
 800b29e:	e002      	b.n	800b2a6 <_printf_i+0x1c6>
 800b2a0:	0668      	lsls	r0, r5, #25
 800b2a2:	d5fb      	bpl.n	800b29c <_printf_i+0x1bc>
 800b2a4:	8019      	strh	r1, [r3, #0]
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	4616      	mov	r6, r2
 800b2aa:	6123      	str	r3, [r4, #16]
 800b2ac:	e7bc      	b.n	800b228 <_printf_i+0x148>
 800b2ae:	6833      	ldr	r3, [r6, #0]
 800b2b0:	2100      	movs	r1, #0
 800b2b2:	1d1a      	adds	r2, r3, #4
 800b2b4:	6032      	str	r2, [r6, #0]
 800b2b6:	681e      	ldr	r6, [r3, #0]
 800b2b8:	6862      	ldr	r2, [r4, #4]
 800b2ba:	4630      	mov	r0, r6
 800b2bc:	f000 f98a 	bl	800b5d4 <memchr>
 800b2c0:	b108      	cbz	r0, 800b2c6 <_printf_i+0x1e6>
 800b2c2:	1b80      	subs	r0, r0, r6
 800b2c4:	6060      	str	r0, [r4, #4]
 800b2c6:	6863      	ldr	r3, [r4, #4]
 800b2c8:	6123      	str	r3, [r4, #16]
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b2d0:	e7aa      	b.n	800b228 <_printf_i+0x148>
 800b2d2:	6923      	ldr	r3, [r4, #16]
 800b2d4:	4632      	mov	r2, r6
 800b2d6:	4649      	mov	r1, r9
 800b2d8:	4640      	mov	r0, r8
 800b2da:	47d0      	blx	sl
 800b2dc:	3001      	adds	r0, #1
 800b2de:	d0ad      	beq.n	800b23c <_printf_i+0x15c>
 800b2e0:	6823      	ldr	r3, [r4, #0]
 800b2e2:	079b      	lsls	r3, r3, #30
 800b2e4:	d413      	bmi.n	800b30e <_printf_i+0x22e>
 800b2e6:	68e0      	ldr	r0, [r4, #12]
 800b2e8:	9b03      	ldr	r3, [sp, #12]
 800b2ea:	4298      	cmp	r0, r3
 800b2ec:	bfb8      	it	lt
 800b2ee:	4618      	movlt	r0, r3
 800b2f0:	e7a6      	b.n	800b240 <_printf_i+0x160>
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	4632      	mov	r2, r6
 800b2f6:	4649      	mov	r1, r9
 800b2f8:	4640      	mov	r0, r8
 800b2fa:	47d0      	blx	sl
 800b2fc:	3001      	adds	r0, #1
 800b2fe:	d09d      	beq.n	800b23c <_printf_i+0x15c>
 800b300:	3501      	adds	r5, #1
 800b302:	68e3      	ldr	r3, [r4, #12]
 800b304:	9903      	ldr	r1, [sp, #12]
 800b306:	1a5b      	subs	r3, r3, r1
 800b308:	42ab      	cmp	r3, r5
 800b30a:	dcf2      	bgt.n	800b2f2 <_printf_i+0x212>
 800b30c:	e7eb      	b.n	800b2e6 <_printf_i+0x206>
 800b30e:	2500      	movs	r5, #0
 800b310:	f104 0619 	add.w	r6, r4, #25
 800b314:	e7f5      	b.n	800b302 <_printf_i+0x222>
 800b316:	bf00      	nop
 800b318:	0800bcae 	.word	0x0800bcae
 800b31c:	0800bcbf 	.word	0x0800bcbf

0800b320 <__sflush_r>:
 800b320:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b328:	0716      	lsls	r6, r2, #28
 800b32a:	4605      	mov	r5, r0
 800b32c:	460c      	mov	r4, r1
 800b32e:	d454      	bmi.n	800b3da <__sflush_r+0xba>
 800b330:	684b      	ldr	r3, [r1, #4]
 800b332:	2b00      	cmp	r3, #0
 800b334:	dc02      	bgt.n	800b33c <__sflush_r+0x1c>
 800b336:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b338:	2b00      	cmp	r3, #0
 800b33a:	dd48      	ble.n	800b3ce <__sflush_r+0xae>
 800b33c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b33e:	2e00      	cmp	r6, #0
 800b340:	d045      	beq.n	800b3ce <__sflush_r+0xae>
 800b342:	2300      	movs	r3, #0
 800b344:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b348:	682f      	ldr	r7, [r5, #0]
 800b34a:	6a21      	ldr	r1, [r4, #32]
 800b34c:	602b      	str	r3, [r5, #0]
 800b34e:	d030      	beq.n	800b3b2 <__sflush_r+0x92>
 800b350:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b352:	89a3      	ldrh	r3, [r4, #12]
 800b354:	0759      	lsls	r1, r3, #29
 800b356:	d505      	bpl.n	800b364 <__sflush_r+0x44>
 800b358:	6863      	ldr	r3, [r4, #4]
 800b35a:	1ad2      	subs	r2, r2, r3
 800b35c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b35e:	b10b      	cbz	r3, 800b364 <__sflush_r+0x44>
 800b360:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b362:	1ad2      	subs	r2, r2, r3
 800b364:	2300      	movs	r3, #0
 800b366:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b368:	6a21      	ldr	r1, [r4, #32]
 800b36a:	4628      	mov	r0, r5
 800b36c:	47b0      	blx	r6
 800b36e:	1c43      	adds	r3, r0, #1
 800b370:	89a3      	ldrh	r3, [r4, #12]
 800b372:	d106      	bne.n	800b382 <__sflush_r+0x62>
 800b374:	6829      	ldr	r1, [r5, #0]
 800b376:	291d      	cmp	r1, #29
 800b378:	d82b      	bhi.n	800b3d2 <__sflush_r+0xb2>
 800b37a:	4a2a      	ldr	r2, [pc, #168]	@ (800b424 <__sflush_r+0x104>)
 800b37c:	410a      	asrs	r2, r1
 800b37e:	07d6      	lsls	r6, r2, #31
 800b380:	d427      	bmi.n	800b3d2 <__sflush_r+0xb2>
 800b382:	2200      	movs	r2, #0
 800b384:	04d9      	lsls	r1, r3, #19
 800b386:	6062      	str	r2, [r4, #4]
 800b388:	6922      	ldr	r2, [r4, #16]
 800b38a:	6022      	str	r2, [r4, #0]
 800b38c:	d504      	bpl.n	800b398 <__sflush_r+0x78>
 800b38e:	1c42      	adds	r2, r0, #1
 800b390:	d101      	bne.n	800b396 <__sflush_r+0x76>
 800b392:	682b      	ldr	r3, [r5, #0]
 800b394:	b903      	cbnz	r3, 800b398 <__sflush_r+0x78>
 800b396:	6560      	str	r0, [r4, #84]	@ 0x54
 800b398:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b39a:	602f      	str	r7, [r5, #0]
 800b39c:	b1b9      	cbz	r1, 800b3ce <__sflush_r+0xae>
 800b39e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b3a2:	4299      	cmp	r1, r3
 800b3a4:	d002      	beq.n	800b3ac <__sflush_r+0x8c>
 800b3a6:	4628      	mov	r0, r5
 800b3a8:	f7ff fa96 	bl	800a8d8 <_free_r>
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	6363      	str	r3, [r4, #52]	@ 0x34
 800b3b0:	e00d      	b.n	800b3ce <__sflush_r+0xae>
 800b3b2:	2301      	movs	r3, #1
 800b3b4:	4628      	mov	r0, r5
 800b3b6:	47b0      	blx	r6
 800b3b8:	4602      	mov	r2, r0
 800b3ba:	1c50      	adds	r0, r2, #1
 800b3bc:	d1c9      	bne.n	800b352 <__sflush_r+0x32>
 800b3be:	682b      	ldr	r3, [r5, #0]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d0c6      	beq.n	800b352 <__sflush_r+0x32>
 800b3c4:	2b1d      	cmp	r3, #29
 800b3c6:	d001      	beq.n	800b3cc <__sflush_r+0xac>
 800b3c8:	2b16      	cmp	r3, #22
 800b3ca:	d11d      	bne.n	800b408 <__sflush_r+0xe8>
 800b3cc:	602f      	str	r7, [r5, #0]
 800b3ce:	2000      	movs	r0, #0
 800b3d0:	e021      	b.n	800b416 <__sflush_r+0xf6>
 800b3d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b3d6:	b21b      	sxth	r3, r3
 800b3d8:	e01a      	b.n	800b410 <__sflush_r+0xf0>
 800b3da:	690f      	ldr	r7, [r1, #16]
 800b3dc:	2f00      	cmp	r7, #0
 800b3de:	d0f6      	beq.n	800b3ce <__sflush_r+0xae>
 800b3e0:	0793      	lsls	r3, r2, #30
 800b3e2:	680e      	ldr	r6, [r1, #0]
 800b3e4:	600f      	str	r7, [r1, #0]
 800b3e6:	bf0c      	ite	eq
 800b3e8:	694b      	ldreq	r3, [r1, #20]
 800b3ea:	2300      	movne	r3, #0
 800b3ec:	eba6 0807 	sub.w	r8, r6, r7
 800b3f0:	608b      	str	r3, [r1, #8]
 800b3f2:	f1b8 0f00 	cmp.w	r8, #0
 800b3f6:	ddea      	ble.n	800b3ce <__sflush_r+0xae>
 800b3f8:	4643      	mov	r3, r8
 800b3fa:	463a      	mov	r2, r7
 800b3fc:	6a21      	ldr	r1, [r4, #32]
 800b3fe:	4628      	mov	r0, r5
 800b400:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b402:	47b0      	blx	r6
 800b404:	2800      	cmp	r0, #0
 800b406:	dc08      	bgt.n	800b41a <__sflush_r+0xfa>
 800b408:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b40c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b410:	f04f 30ff 	mov.w	r0, #4294967295
 800b414:	81a3      	strh	r3, [r4, #12]
 800b416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b41a:	4407      	add	r7, r0
 800b41c:	eba8 0800 	sub.w	r8, r8, r0
 800b420:	e7e7      	b.n	800b3f2 <__sflush_r+0xd2>
 800b422:	bf00      	nop
 800b424:	dfbffffe 	.word	0xdfbffffe

0800b428 <_fflush_r>:
 800b428:	b538      	push	{r3, r4, r5, lr}
 800b42a:	690b      	ldr	r3, [r1, #16]
 800b42c:	4605      	mov	r5, r0
 800b42e:	460c      	mov	r4, r1
 800b430:	b913      	cbnz	r3, 800b438 <_fflush_r+0x10>
 800b432:	2500      	movs	r5, #0
 800b434:	4628      	mov	r0, r5
 800b436:	bd38      	pop	{r3, r4, r5, pc}
 800b438:	b118      	cbz	r0, 800b442 <_fflush_r+0x1a>
 800b43a:	6a03      	ldr	r3, [r0, #32]
 800b43c:	b90b      	cbnz	r3, 800b442 <_fflush_r+0x1a>
 800b43e:	f7ff f81d 	bl	800a47c <__sinit>
 800b442:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d0f3      	beq.n	800b432 <_fflush_r+0xa>
 800b44a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b44c:	07d0      	lsls	r0, r2, #31
 800b44e:	d404      	bmi.n	800b45a <_fflush_r+0x32>
 800b450:	0599      	lsls	r1, r3, #22
 800b452:	d402      	bmi.n	800b45a <_fflush_r+0x32>
 800b454:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b456:	f7ff fa3c 	bl	800a8d2 <__retarget_lock_acquire_recursive>
 800b45a:	4628      	mov	r0, r5
 800b45c:	4621      	mov	r1, r4
 800b45e:	f7ff ff5f 	bl	800b320 <__sflush_r>
 800b462:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b464:	4605      	mov	r5, r0
 800b466:	07da      	lsls	r2, r3, #31
 800b468:	d4e4      	bmi.n	800b434 <_fflush_r+0xc>
 800b46a:	89a3      	ldrh	r3, [r4, #12]
 800b46c:	059b      	lsls	r3, r3, #22
 800b46e:	d4e1      	bmi.n	800b434 <_fflush_r+0xc>
 800b470:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b472:	f7ff fa2f 	bl	800a8d4 <__retarget_lock_release_recursive>
 800b476:	e7dd      	b.n	800b434 <_fflush_r+0xc>

0800b478 <__swhatbuf_r>:
 800b478:	b570      	push	{r4, r5, r6, lr}
 800b47a:	460c      	mov	r4, r1
 800b47c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b480:	b096      	sub	sp, #88	@ 0x58
 800b482:	4615      	mov	r5, r2
 800b484:	2900      	cmp	r1, #0
 800b486:	461e      	mov	r6, r3
 800b488:	da0c      	bge.n	800b4a4 <__swhatbuf_r+0x2c>
 800b48a:	89a3      	ldrh	r3, [r4, #12]
 800b48c:	2100      	movs	r1, #0
 800b48e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b492:	bf14      	ite	ne
 800b494:	2340      	movne	r3, #64	@ 0x40
 800b496:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b49a:	2000      	movs	r0, #0
 800b49c:	6031      	str	r1, [r6, #0]
 800b49e:	602b      	str	r3, [r5, #0]
 800b4a0:	b016      	add	sp, #88	@ 0x58
 800b4a2:	bd70      	pop	{r4, r5, r6, pc}
 800b4a4:	466a      	mov	r2, sp
 800b4a6:	f000 f863 	bl	800b570 <_fstat_r>
 800b4aa:	2800      	cmp	r0, #0
 800b4ac:	dbed      	blt.n	800b48a <__swhatbuf_r+0x12>
 800b4ae:	9901      	ldr	r1, [sp, #4]
 800b4b0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b4b4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b4b8:	4259      	negs	r1, r3
 800b4ba:	4159      	adcs	r1, r3
 800b4bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b4c0:	e7eb      	b.n	800b49a <__swhatbuf_r+0x22>

0800b4c2 <__smakebuf_r>:
 800b4c2:	898b      	ldrh	r3, [r1, #12]
 800b4c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b4c6:	079d      	lsls	r5, r3, #30
 800b4c8:	4606      	mov	r6, r0
 800b4ca:	460c      	mov	r4, r1
 800b4cc:	d507      	bpl.n	800b4de <__smakebuf_r+0x1c>
 800b4ce:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b4d2:	6023      	str	r3, [r4, #0]
 800b4d4:	6123      	str	r3, [r4, #16]
 800b4d6:	2301      	movs	r3, #1
 800b4d8:	6163      	str	r3, [r4, #20]
 800b4da:	b003      	add	sp, #12
 800b4dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4de:	ab01      	add	r3, sp, #4
 800b4e0:	466a      	mov	r2, sp
 800b4e2:	f7ff ffc9 	bl	800b478 <__swhatbuf_r>
 800b4e6:	9f00      	ldr	r7, [sp, #0]
 800b4e8:	4605      	mov	r5, r0
 800b4ea:	4630      	mov	r0, r6
 800b4ec:	4639      	mov	r1, r7
 800b4ee:	f7ff fa5f 	bl	800a9b0 <_malloc_r>
 800b4f2:	b948      	cbnz	r0, 800b508 <__smakebuf_r+0x46>
 800b4f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4f8:	059a      	lsls	r2, r3, #22
 800b4fa:	d4ee      	bmi.n	800b4da <__smakebuf_r+0x18>
 800b4fc:	f023 0303 	bic.w	r3, r3, #3
 800b500:	f043 0302 	orr.w	r3, r3, #2
 800b504:	81a3      	strh	r3, [r4, #12]
 800b506:	e7e2      	b.n	800b4ce <__smakebuf_r+0xc>
 800b508:	89a3      	ldrh	r3, [r4, #12]
 800b50a:	6020      	str	r0, [r4, #0]
 800b50c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b510:	81a3      	strh	r3, [r4, #12]
 800b512:	9b01      	ldr	r3, [sp, #4]
 800b514:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b518:	b15b      	cbz	r3, 800b532 <__smakebuf_r+0x70>
 800b51a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b51e:	4630      	mov	r0, r6
 800b520:	f000 f838 	bl	800b594 <_isatty_r>
 800b524:	b128      	cbz	r0, 800b532 <__smakebuf_r+0x70>
 800b526:	89a3      	ldrh	r3, [r4, #12]
 800b528:	f023 0303 	bic.w	r3, r3, #3
 800b52c:	f043 0301 	orr.w	r3, r3, #1
 800b530:	81a3      	strh	r3, [r4, #12]
 800b532:	89a3      	ldrh	r3, [r4, #12]
 800b534:	431d      	orrs	r5, r3
 800b536:	81a5      	strh	r5, [r4, #12]
 800b538:	e7cf      	b.n	800b4da <__smakebuf_r+0x18>

0800b53a <memmove>:
 800b53a:	4288      	cmp	r0, r1
 800b53c:	b510      	push	{r4, lr}
 800b53e:	eb01 0402 	add.w	r4, r1, r2
 800b542:	d902      	bls.n	800b54a <memmove+0x10>
 800b544:	4284      	cmp	r4, r0
 800b546:	4623      	mov	r3, r4
 800b548:	d807      	bhi.n	800b55a <memmove+0x20>
 800b54a:	1e43      	subs	r3, r0, #1
 800b54c:	42a1      	cmp	r1, r4
 800b54e:	d008      	beq.n	800b562 <memmove+0x28>
 800b550:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b554:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b558:	e7f8      	b.n	800b54c <memmove+0x12>
 800b55a:	4402      	add	r2, r0
 800b55c:	4601      	mov	r1, r0
 800b55e:	428a      	cmp	r2, r1
 800b560:	d100      	bne.n	800b564 <memmove+0x2a>
 800b562:	bd10      	pop	{r4, pc}
 800b564:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b568:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b56c:	e7f7      	b.n	800b55e <memmove+0x24>
	...

0800b570 <_fstat_r>:
 800b570:	b538      	push	{r3, r4, r5, lr}
 800b572:	2300      	movs	r3, #0
 800b574:	4d06      	ldr	r5, [pc, #24]	@ (800b590 <_fstat_r+0x20>)
 800b576:	4604      	mov	r4, r0
 800b578:	4608      	mov	r0, r1
 800b57a:	4611      	mov	r1, r2
 800b57c:	602b      	str	r3, [r5, #0]
 800b57e:	f7f6 f9e1 	bl	8001944 <_fstat>
 800b582:	1c43      	adds	r3, r0, #1
 800b584:	d102      	bne.n	800b58c <_fstat_r+0x1c>
 800b586:	682b      	ldr	r3, [r5, #0]
 800b588:	b103      	cbz	r3, 800b58c <_fstat_r+0x1c>
 800b58a:	6023      	str	r3, [r4, #0]
 800b58c:	bd38      	pop	{r3, r4, r5, pc}
 800b58e:	bf00      	nop
 800b590:	2000070c 	.word	0x2000070c

0800b594 <_isatty_r>:
 800b594:	b538      	push	{r3, r4, r5, lr}
 800b596:	2300      	movs	r3, #0
 800b598:	4d05      	ldr	r5, [pc, #20]	@ (800b5b0 <_isatty_r+0x1c>)
 800b59a:	4604      	mov	r4, r0
 800b59c:	4608      	mov	r0, r1
 800b59e:	602b      	str	r3, [r5, #0]
 800b5a0:	f7f6 f9e0 	bl	8001964 <_isatty>
 800b5a4:	1c43      	adds	r3, r0, #1
 800b5a6:	d102      	bne.n	800b5ae <_isatty_r+0x1a>
 800b5a8:	682b      	ldr	r3, [r5, #0]
 800b5aa:	b103      	cbz	r3, 800b5ae <_isatty_r+0x1a>
 800b5ac:	6023      	str	r3, [r4, #0]
 800b5ae:	bd38      	pop	{r3, r4, r5, pc}
 800b5b0:	2000070c 	.word	0x2000070c

0800b5b4 <_sbrk_r>:
 800b5b4:	b538      	push	{r3, r4, r5, lr}
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	4d05      	ldr	r5, [pc, #20]	@ (800b5d0 <_sbrk_r+0x1c>)
 800b5ba:	4604      	mov	r4, r0
 800b5bc:	4608      	mov	r0, r1
 800b5be:	602b      	str	r3, [r5, #0]
 800b5c0:	f7f6 f9e8 	bl	8001994 <_sbrk>
 800b5c4:	1c43      	adds	r3, r0, #1
 800b5c6:	d102      	bne.n	800b5ce <_sbrk_r+0x1a>
 800b5c8:	682b      	ldr	r3, [r5, #0]
 800b5ca:	b103      	cbz	r3, 800b5ce <_sbrk_r+0x1a>
 800b5cc:	6023      	str	r3, [r4, #0]
 800b5ce:	bd38      	pop	{r3, r4, r5, pc}
 800b5d0:	2000070c 	.word	0x2000070c

0800b5d4 <memchr>:
 800b5d4:	b2c9      	uxtb	r1, r1
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	4402      	add	r2, r0
 800b5da:	b510      	push	{r4, lr}
 800b5dc:	4293      	cmp	r3, r2
 800b5de:	4618      	mov	r0, r3
 800b5e0:	d101      	bne.n	800b5e6 <memchr+0x12>
 800b5e2:	2000      	movs	r0, #0
 800b5e4:	e003      	b.n	800b5ee <memchr+0x1a>
 800b5e6:	7804      	ldrb	r4, [r0, #0]
 800b5e8:	3301      	adds	r3, #1
 800b5ea:	428c      	cmp	r4, r1
 800b5ec:	d1f6      	bne.n	800b5dc <memchr+0x8>
 800b5ee:	bd10      	pop	{r4, pc}

0800b5f0 <memcpy>:
 800b5f0:	440a      	add	r2, r1
 800b5f2:	1e43      	subs	r3, r0, #1
 800b5f4:	4291      	cmp	r1, r2
 800b5f6:	d100      	bne.n	800b5fa <memcpy+0xa>
 800b5f8:	4770      	bx	lr
 800b5fa:	b510      	push	{r4, lr}
 800b5fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b600:	4291      	cmp	r1, r2
 800b602:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b606:	d1f9      	bne.n	800b5fc <memcpy+0xc>
 800b608:	bd10      	pop	{r4, pc}

0800b60a <_realloc_r>:
 800b60a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b60e:	4680      	mov	r8, r0
 800b610:	4615      	mov	r5, r2
 800b612:	460c      	mov	r4, r1
 800b614:	b921      	cbnz	r1, 800b620 <_realloc_r+0x16>
 800b616:	4611      	mov	r1, r2
 800b618:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b61c:	f7ff b9c8 	b.w	800a9b0 <_malloc_r>
 800b620:	b92a      	cbnz	r2, 800b62e <_realloc_r+0x24>
 800b622:	f7ff f959 	bl	800a8d8 <_free_r>
 800b626:	2400      	movs	r4, #0
 800b628:	4620      	mov	r0, r4
 800b62a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b62e:	f000 f81a 	bl	800b666 <_malloc_usable_size_r>
 800b632:	4285      	cmp	r5, r0
 800b634:	4606      	mov	r6, r0
 800b636:	d802      	bhi.n	800b63e <_realloc_r+0x34>
 800b638:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b63c:	d8f4      	bhi.n	800b628 <_realloc_r+0x1e>
 800b63e:	4629      	mov	r1, r5
 800b640:	4640      	mov	r0, r8
 800b642:	f7ff f9b5 	bl	800a9b0 <_malloc_r>
 800b646:	4607      	mov	r7, r0
 800b648:	2800      	cmp	r0, #0
 800b64a:	d0ec      	beq.n	800b626 <_realloc_r+0x1c>
 800b64c:	42b5      	cmp	r5, r6
 800b64e:	462a      	mov	r2, r5
 800b650:	4621      	mov	r1, r4
 800b652:	bf28      	it	cs
 800b654:	4632      	movcs	r2, r6
 800b656:	f7ff ffcb 	bl	800b5f0 <memcpy>
 800b65a:	4621      	mov	r1, r4
 800b65c:	4640      	mov	r0, r8
 800b65e:	463c      	mov	r4, r7
 800b660:	f7ff f93a 	bl	800a8d8 <_free_r>
 800b664:	e7e0      	b.n	800b628 <_realloc_r+0x1e>

0800b666 <_malloc_usable_size_r>:
 800b666:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b66a:	1f18      	subs	r0, r3, #4
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	bfbc      	itt	lt
 800b670:	580b      	ldrlt	r3, [r1, r0]
 800b672:	18c0      	addlt	r0, r0, r3
 800b674:	4770      	bx	lr
	...

0800b678 <ceil>:
 800b678:	ec51 0b10 	vmov	r0, r1, d0
 800b67c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b684:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800b688:	460c      	mov	r4, r1
 800b68a:	4605      	mov	r5, r0
 800b68c:	4680      	mov	r8, r0
 800b68e:	2e13      	cmp	r6, #19
 800b690:	dc2f      	bgt.n	800b6f2 <ceil+0x7a>
 800b692:	2e00      	cmp	r6, #0
 800b694:	da11      	bge.n	800b6ba <ceil+0x42>
 800b696:	a332      	add	r3, pc, #200	@ (adr r3, 800b760 <ceil+0xe8>)
 800b698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b69c:	f7f4 fdfa 	bl	8000294 <__adddf3>
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	f7f5 fa3c 	bl	8000b20 <__aeabi_dcmpgt>
 800b6a8:	b120      	cbz	r0, 800b6b4 <ceil+0x3c>
 800b6aa:	2c00      	cmp	r4, #0
 800b6ac:	db50      	blt.n	800b750 <ceil+0xd8>
 800b6ae:	4325      	orrs	r5, r4
 800b6b0:	d152      	bne.n	800b758 <ceil+0xe0>
 800b6b2:	462c      	mov	r4, r5
 800b6b4:	4621      	mov	r1, r4
 800b6b6:	4628      	mov	r0, r5
 800b6b8:	e024      	b.n	800b704 <ceil+0x8c>
 800b6ba:	4f2b      	ldr	r7, [pc, #172]	@ (800b768 <ceil+0xf0>)
 800b6bc:	4137      	asrs	r7, r6
 800b6be:	ea01 0307 	and.w	r3, r1, r7
 800b6c2:	4303      	orrs	r3, r0
 800b6c4:	d01e      	beq.n	800b704 <ceil+0x8c>
 800b6c6:	a326      	add	r3, pc, #152	@ (adr r3, 800b760 <ceil+0xe8>)
 800b6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6cc:	f7f4 fde2 	bl	8000294 <__adddf3>
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	f7f5 fa24 	bl	8000b20 <__aeabi_dcmpgt>
 800b6d8:	2800      	cmp	r0, #0
 800b6da:	d0eb      	beq.n	800b6b4 <ceil+0x3c>
 800b6dc:	2c00      	cmp	r4, #0
 800b6de:	f04f 0500 	mov.w	r5, #0
 800b6e2:	bfc2      	ittt	gt
 800b6e4:	f44f 1380 	movgt.w	r3, #1048576	@ 0x100000
 800b6e8:	4133      	asrgt	r3, r6
 800b6ea:	18e4      	addgt	r4, r4, r3
 800b6ec:	ea24 0407 	bic.w	r4, r4, r7
 800b6f0:	e7e0      	b.n	800b6b4 <ceil+0x3c>
 800b6f2:	2e33      	cmp	r6, #51	@ 0x33
 800b6f4:	dd0a      	ble.n	800b70c <ceil+0x94>
 800b6f6:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800b6fa:	d103      	bne.n	800b704 <ceil+0x8c>
 800b6fc:	4602      	mov	r2, r0
 800b6fe:	460b      	mov	r3, r1
 800b700:	f7f4 fdc8 	bl	8000294 <__adddf3>
 800b704:	ec41 0b10 	vmov	d0, r0, r1
 800b708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b70c:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800b710:	f04f 37ff 	mov.w	r7, #4294967295
 800b714:	40df      	lsrs	r7, r3
 800b716:	4238      	tst	r0, r7
 800b718:	d0f4      	beq.n	800b704 <ceil+0x8c>
 800b71a:	a311      	add	r3, pc, #68	@ (adr r3, 800b760 <ceil+0xe8>)
 800b71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b720:	f7f4 fdb8 	bl	8000294 <__adddf3>
 800b724:	2200      	movs	r2, #0
 800b726:	2300      	movs	r3, #0
 800b728:	f7f5 f9fa 	bl	8000b20 <__aeabi_dcmpgt>
 800b72c:	2800      	cmp	r0, #0
 800b72e:	d0c1      	beq.n	800b6b4 <ceil+0x3c>
 800b730:	2c00      	cmp	r4, #0
 800b732:	dd0a      	ble.n	800b74a <ceil+0xd2>
 800b734:	2e14      	cmp	r6, #20
 800b736:	d101      	bne.n	800b73c <ceil+0xc4>
 800b738:	3401      	adds	r4, #1
 800b73a:	e006      	b.n	800b74a <ceil+0xd2>
 800b73c:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800b740:	2301      	movs	r3, #1
 800b742:	40b3      	lsls	r3, r6
 800b744:	441d      	add	r5, r3
 800b746:	45a8      	cmp	r8, r5
 800b748:	d8f6      	bhi.n	800b738 <ceil+0xc0>
 800b74a:	ea25 0507 	bic.w	r5, r5, r7
 800b74e:	e7b1      	b.n	800b6b4 <ceil+0x3c>
 800b750:	2500      	movs	r5, #0
 800b752:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 800b756:	e7ad      	b.n	800b6b4 <ceil+0x3c>
 800b758:	2500      	movs	r5, #0
 800b75a:	4c04      	ldr	r4, [pc, #16]	@ (800b76c <ceil+0xf4>)
 800b75c:	e7aa      	b.n	800b6b4 <ceil+0x3c>
 800b75e:	bf00      	nop
 800b760:	8800759c 	.word	0x8800759c
 800b764:	7e37e43c 	.word	0x7e37e43c
 800b768:	000fffff 	.word	0x000fffff
 800b76c:	3ff00000 	.word	0x3ff00000

0800b770 <floor>:
 800b770:	ec51 0b10 	vmov	r0, r1, d0
 800b774:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b77c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800b780:	460c      	mov	r4, r1
 800b782:	4605      	mov	r5, r0
 800b784:	4680      	mov	r8, r0
 800b786:	2e13      	cmp	r6, #19
 800b788:	dc35      	bgt.n	800b7f6 <floor+0x86>
 800b78a:	2e00      	cmp	r6, #0
 800b78c:	da17      	bge.n	800b7be <floor+0x4e>
 800b78e:	a334      	add	r3, pc, #208	@ (adr r3, 800b860 <floor+0xf0>)
 800b790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b794:	f7f4 fd7e 	bl	8000294 <__adddf3>
 800b798:	2200      	movs	r2, #0
 800b79a:	2300      	movs	r3, #0
 800b79c:	f7f5 f9c0 	bl	8000b20 <__aeabi_dcmpgt>
 800b7a0:	b150      	cbz	r0, 800b7b8 <floor+0x48>
 800b7a2:	2c00      	cmp	r4, #0
 800b7a4:	da56      	bge.n	800b854 <floor+0xe4>
 800b7a6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800b7aa:	432c      	orrs	r4, r5
 800b7ac:	2500      	movs	r5, #0
 800b7ae:	42ac      	cmp	r4, r5
 800b7b0:	4c2d      	ldr	r4, [pc, #180]	@ (800b868 <floor+0xf8>)
 800b7b2:	bf08      	it	eq
 800b7b4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800b7b8:	4621      	mov	r1, r4
 800b7ba:	4628      	mov	r0, r5
 800b7bc:	e024      	b.n	800b808 <floor+0x98>
 800b7be:	4f2b      	ldr	r7, [pc, #172]	@ (800b86c <floor+0xfc>)
 800b7c0:	4137      	asrs	r7, r6
 800b7c2:	ea01 0307 	and.w	r3, r1, r7
 800b7c6:	4303      	orrs	r3, r0
 800b7c8:	d01e      	beq.n	800b808 <floor+0x98>
 800b7ca:	a325      	add	r3, pc, #148	@ (adr r3, 800b860 <floor+0xf0>)
 800b7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d0:	f7f4 fd60 	bl	8000294 <__adddf3>
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	f7f5 f9a2 	bl	8000b20 <__aeabi_dcmpgt>
 800b7dc:	2800      	cmp	r0, #0
 800b7de:	d0eb      	beq.n	800b7b8 <floor+0x48>
 800b7e0:	2c00      	cmp	r4, #0
 800b7e2:	f04f 0500 	mov.w	r5, #0
 800b7e6:	bfbe      	ittt	lt
 800b7e8:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800b7ec:	4133      	asrlt	r3, r6
 800b7ee:	18e4      	addlt	r4, r4, r3
 800b7f0:	ea24 0407 	bic.w	r4, r4, r7
 800b7f4:	e7e0      	b.n	800b7b8 <floor+0x48>
 800b7f6:	2e33      	cmp	r6, #51	@ 0x33
 800b7f8:	dd0a      	ble.n	800b810 <floor+0xa0>
 800b7fa:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800b7fe:	d103      	bne.n	800b808 <floor+0x98>
 800b800:	4602      	mov	r2, r0
 800b802:	460b      	mov	r3, r1
 800b804:	f7f4 fd46 	bl	8000294 <__adddf3>
 800b808:	ec41 0b10 	vmov	d0, r0, r1
 800b80c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b810:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800b814:	f04f 37ff 	mov.w	r7, #4294967295
 800b818:	40df      	lsrs	r7, r3
 800b81a:	4207      	tst	r7, r0
 800b81c:	d0f4      	beq.n	800b808 <floor+0x98>
 800b81e:	a310      	add	r3, pc, #64	@ (adr r3, 800b860 <floor+0xf0>)
 800b820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b824:	f7f4 fd36 	bl	8000294 <__adddf3>
 800b828:	2200      	movs	r2, #0
 800b82a:	2300      	movs	r3, #0
 800b82c:	f7f5 f978 	bl	8000b20 <__aeabi_dcmpgt>
 800b830:	2800      	cmp	r0, #0
 800b832:	d0c1      	beq.n	800b7b8 <floor+0x48>
 800b834:	2c00      	cmp	r4, #0
 800b836:	da0a      	bge.n	800b84e <floor+0xde>
 800b838:	2e14      	cmp	r6, #20
 800b83a:	d101      	bne.n	800b840 <floor+0xd0>
 800b83c:	3401      	adds	r4, #1
 800b83e:	e006      	b.n	800b84e <floor+0xde>
 800b840:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800b844:	2301      	movs	r3, #1
 800b846:	40b3      	lsls	r3, r6
 800b848:	441d      	add	r5, r3
 800b84a:	4545      	cmp	r5, r8
 800b84c:	d3f6      	bcc.n	800b83c <floor+0xcc>
 800b84e:	ea25 0507 	bic.w	r5, r5, r7
 800b852:	e7b1      	b.n	800b7b8 <floor+0x48>
 800b854:	2500      	movs	r5, #0
 800b856:	462c      	mov	r4, r5
 800b858:	e7ae      	b.n	800b7b8 <floor+0x48>
 800b85a:	bf00      	nop
 800b85c:	f3af 8000 	nop.w
 800b860:	8800759c 	.word	0x8800759c
 800b864:	7e37e43c 	.word	0x7e37e43c
 800b868:	bff00000 	.word	0xbff00000
 800b86c:	000fffff 	.word	0x000fffff

0800b870 <round>:
 800b870:	ec51 0b10 	vmov	r0, r1, d0
 800b874:	b570      	push	{r4, r5, r6, lr}
 800b876:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800b87a:	460b      	mov	r3, r1
 800b87c:	4605      	mov	r5, r0
 800b87e:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800b882:	2a13      	cmp	r2, #19
 800b884:	dc1b      	bgt.n	800b8be <round+0x4e>
 800b886:	2a00      	cmp	r2, #0
 800b888:	da0b      	bge.n	800b8a2 <round+0x32>
 800b88a:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800b88e:	3201      	adds	r2, #1
 800b890:	bf04      	itt	eq
 800b892:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800b896:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800b89a:	2200      	movs	r2, #0
 800b89c:	4619      	mov	r1, r3
 800b89e:	4610      	mov	r0, r2
 800b8a0:	e015      	b.n	800b8ce <round+0x5e>
 800b8a2:	4c15      	ldr	r4, [pc, #84]	@ (800b8f8 <round+0x88>)
 800b8a4:	4114      	asrs	r4, r2
 800b8a6:	ea04 0601 	and.w	r6, r4, r1
 800b8aa:	4306      	orrs	r6, r0
 800b8ac:	d00f      	beq.n	800b8ce <round+0x5e>
 800b8ae:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800b8b2:	fa41 f202 	asr.w	r2, r1, r2
 800b8b6:	4413      	add	r3, r2
 800b8b8:	ea23 0304 	bic.w	r3, r3, r4
 800b8bc:	e7ed      	b.n	800b89a <round+0x2a>
 800b8be:	2a33      	cmp	r2, #51	@ 0x33
 800b8c0:	dd08      	ble.n	800b8d4 <round+0x64>
 800b8c2:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800b8c6:	d102      	bne.n	800b8ce <round+0x5e>
 800b8c8:	4602      	mov	r2, r0
 800b8ca:	f7f4 fce3 	bl	8000294 <__adddf3>
 800b8ce:	ec41 0b10 	vmov	d0, r0, r1
 800b8d2:	bd70      	pop	{r4, r5, r6, pc}
 800b8d4:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800b8d8:	f04f 34ff 	mov.w	r4, #4294967295
 800b8dc:	40f4      	lsrs	r4, r6
 800b8de:	4204      	tst	r4, r0
 800b8e0:	d0f5      	beq.n	800b8ce <round+0x5e>
 800b8e2:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800b8e6:	2201      	movs	r2, #1
 800b8e8:	408a      	lsls	r2, r1
 800b8ea:	1952      	adds	r2, r2, r5
 800b8ec:	bf28      	it	cs
 800b8ee:	3301      	addcs	r3, #1
 800b8f0:	ea22 0204 	bic.w	r2, r2, r4
 800b8f4:	e7d2      	b.n	800b89c <round+0x2c>
 800b8f6:	bf00      	nop
 800b8f8:	000fffff 	.word	0x000fffff

0800b8fc <_init>:
 800b8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8fe:	bf00      	nop
 800b900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b902:	bc08      	pop	{r3}
 800b904:	469e      	mov	lr, r3
 800b906:	4770      	bx	lr

0800b908 <_fini>:
 800b908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b90a:	bf00      	nop
 800b90c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b90e:	bc08      	pop	{r3}
 800b910:	469e      	mov	lr, r3
 800b912:	4770      	bx	lr
